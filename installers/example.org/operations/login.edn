{:install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site.malli/input-schema
   [:map
    ["username" [:string {:min 1}]]
    ["password" [:string {:min 1}]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)]
      (case content-type
        "application/x-www-form-urlencoded"
        {:form (-> body (String.) ring.util.codec/form-decode juxt.site.malli/validate-input)
         :subject-id (juxt.site.util/make-nonce 10)
         :session-id (juxt.site.util/make-nonce 16)
         :session-token (juxt.site.util/make-nonce 16)
         :query-params (some-> *ctx* :ring.request/query ring.util.codec/form-decode)}))}

   :juxt.site/transact
   {
    :juxt.site.sci/program
    #juxt.pprint
    (if-let [user-identity-ref
             (juxt.site/match-identity-with-password
              {:juxt.site/type "https://meta.juxt.site/types/basic-user-identity"
               :juxt.site/username (clojure.string/lower-case (get-in *prepare* [:form "username"]))}
              (get-in *prepare* [:form "password"])
              :juxt.site/password-hash)]
      (let [user-identity (xt/entity user-identity-ref)
            ;; TODO: What if user-identity-doc is nil?
            subject
            {:xt/id (str "https://auth.example.org/subjects/" (get *prepare* :subject-id))
             :juxt.site/type "https://meta.juxt.site/types/subject"
             :juxt.site/user-identity user-identity-ref
             :juxt.site/user (:juxt.site/user user-identity)}

            _ (assert subject)

            session-id (:session-id *prepare*)
            _ (assert session-id)

            session-scope-id (:juxt.site/session-scope *resource*)

            session-scope (xt/entity session-scope-id)

            _ (when-not session-scope
                (throw (ex-info "Session scope does not exist in database" {:session-scope session-scope-id})))

            query-params (:query-params *prepare*)
            return-to (get query-params "return-to")

            session
            (when subject
              {:xt/id (str "https://auth.example.org/sessions/" session-id)
               :juxt.site/type "https://meta.juxt.site/types/session"
               :juxt.site/subject (:xt/id subject)
               :juxt.site/session-scope session-scope-id})

            session-token (:session-token *prepare*)
            _ (assert session-token)

            session-token-doc
            (when session
              {:xt/id (str "https://auth.example.org/session-tokens/" session-token)
               :juxt.site/type "https://meta.juxt.site/types/session-token"
               :juxt.site/session-token session-token
               :juxt.site/session (:xt/id session)})

            cookie-name (:juxt.site/cookie-name session-scope)
            cookie-path (or (:juxt.site/cookie-path session-scope) "/")]

        (cond-> []
          subject (conj [:xtdb.api/put subject])
          session (conj [:xtdb.api/put session])
          session-token-doc (conj [:xtdb.api/put session-token-doc])

          (and session-token-doc cookie-name)
          (conj [:ring.response/headers
                 {"set-cookie"
                  (format "%s=%s; Path=%s; Secure; HttpOnly; SameSite=None"
                          cookie-name session-token cookie-path)}])

          ;; This start-with check is to avoid an open-redirect
          (and return-to (clojure.string/starts-with? return-to "https://auth.example.org"))
          (conj
           [:ring.response/status 303]
           [:ring.response/headers {"location" return-to}])))

      ;; Failure case
      (let [message (.getBytes "Invalid credentials")]
        [[:ring.response/status 401]
         [:ring.response/headers
          {"content-type" "text/plain"
           "content-size" (str (count message))}]
         [:ring.response/body message]]))}

   :juxt.site/rules
   [
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
