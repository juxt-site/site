{:install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    {:session-scope (:juxt.site/session-scope *ctx*)
     :session-token-id (:xt/id (:juxt.site/session-token *ctx*))
     :session-id (:xt/id (:juxt.site/session *ctx*))
     :query-params (some-> *ctx* :ring.request/query ring.util.codec/form-decode)}}

   :juxt.site/transact
   {
    :juxt.site.sci/program
    #juxt.pprint
    (let [session-scope (:session-scope *prepare*)
          query-params (:query-params *prepare*)
          return-to (get query-params "return-to")
          cookie-name (:juxt.site/cookie-name session-scope)
          cookie-path (or (:juxt.site/cookie-path session-scope) "/")
          session-token-id (:session-token-id *prepare*)
          session-id (:session-id *prepare*)]

      (cond-> []
        session-token-id (conj [:xtdb.api/delete session-token-id])
        session-id (conj [:xtdb.api/delete session-id])
        cookie-name
        (conj [:ring.response/headers
               {"set-cookie"
                (format "%s=\"\"; Path=%s; Max-Age: 0"
                        cookie-name cookie-path)}])

        ;; This start-with check is to avoid an open-redirect
        (and return-to (clojure.string/starts-with? return-to "https://auth.example.org"))
        (conj
         [:ring.response/status 303]
         [:ring.response/headers {"location" return-to}])))}

   :juxt.site/rules
   [
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
