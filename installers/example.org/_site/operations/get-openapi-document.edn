{:install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site/state
   {:juxt.site.sci/program
    #juxt.pprint
    (let [
          [_ base-uri _] (re-matches (re-pattern "(.*/)openapi\\.(.+)") (:xt/id *resource*))

          openapi-paths
          ;; This is over-reaching. There should be an explicit
          ;; mapping between an OpenAPI and its collection of
          ;; endpoints.
          ;;
          ;; A Site instance might 'host' multiple OpenAPIs
          ;; Some users might not be able to 'see' a given OpenAPI
          ;; Scopes will likely be shared across an OpenAPI (for a given resource server)
          ;;
          ;; A Site instance may host multiple resource servers
          ;; Each resource server might host multiple OpenAPIs
          (map first
               (xt/q '{:find [(pull e [* {(:juxt.site/_variant-of {:as :variants}) [*]}])]
                       :where [[e :xt/id]
                               [(clojure.string/starts-with? e base)]]
                       :in [base]} base-uri))

          allowed-operations (set (map :xt/id (juxt.site/allowed-operations {})))

          paths
          (reduce
           (fn [acc path]
             (assoc
              acc
              (:openapi.v3/path path)
              (merge
               ;; Path parameters
               (when-let [parameters (:openapi.v3/parameters path)]
                 {"parameters" parameters})
               (reduce
                (fn [acc [method method-details]]
                  (cond-> acc
                    ;; When the operation associated with the operation is
                    ;; permitted, we should show the operation
                    true
                    ;; Until this is issue is
                    ;; resolved (https://github.com/swagger-api/swagger-ui/issues/4324)
                    ;; we can't to this:
                    #_(seq (clojure.set/intersection
                            (set (:juxt.site/operations metadata))
                            allowed-operations))
                    (assoc
                     (name method)
                     (let [operation (xt/entity (:juxt.site/operation-uri method-details))
                           scope (:juxt.site/scope operation)]
                       (merge
                        {"operationId" (:xt/id operation)}
                        (when-let [description
                                   (or
                                    (:juxt.site/description method-details)
                                    (:juxt.site/description operation))]
                          {"description" description})
                        (when (seq scope)
                          {"security" [{"oauth" (vec (seq scope))}]})
                        {"responses"
                         (let [variants
                               (or
                                ;; explicit
                                (:juxt.site/variants method-details)
                                ;; implicit
                                (sort-by
                                 ;; Privilege application/json in sort
                                 (juxt (fn [variant]
                                         (not= "application/json" (:juxt.http/content-type variant)))
                                       :juxt.http/content-type)
                                 (:variants path)))]
                           (case method
                             :get
                             {"200"
                              {"content"
                               (reduce
                                (fn [acc variant]
                                  (assoc acc (:juxt.http/content-type variant) {}))
                                {}
                                variants)
                               "description" "Successful operation"}
                              "401"
                              {"description" "Unauthorized"}}
                             {}))}
                        (:openapi.v3/metadata method-details))))))
                {} (:juxt.site/methods path)))))
           {}
           ;; We need to be more selective, because openapi-paths
           ;; currently returns everything under the path.
           (filter :openapi.v3/path openapi-paths))]

      (-> (:openapi.v3/definition *resource*)
          (assoc "paths" paths)))}

   :juxt.site/rules
   [
    ;; Anyone
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
