{:deps
 []
 :install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site.malli/input-schema
   [:vector
    [:or
     [:tuple
      [:enum :add-method]
      [:map
       [:method [:enum "GET" "PUT" "POST"]]
       [:operation [:re "https://data.example.org/.*"]]]]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)]
      (case content-type
        "application/edn"
        (let [edn (some->
                   body
                   (String.)
                   clojure.edn/read-string
                   juxt.site.malli/validate-input)
              id (get-in *ctx* [:juxt.site/resource :xt/id])]

          ;; TODO: In due course we should use JSON Merge Patch (RFC
          ;; 7396, https://datatracker.ietf.org/doc/html/rfc7396),
          ;; JSON Patch (RFC 6902,
          ;; https://datatracker.ietf.org/doc/html/rfc6902), or
          ;; something similar. Of course, this might be too much
          ;; power. Adopting
          ;; https://en.wikipedia.org/wiki/Rule_of_least_power (because
          ;; SECURITY) we might want to check each 'command' is
          ;; allowed by the permissions we are passed in.
          {:id id
           :commands edn})))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [{:keys [id commands]} *prepare*]
      (if-let [doc (xt/entity id)]
        (for [[command opts] commands]
          (case command
            :add-method
            (let [{:keys [method operation]} opts]
              [:xtdb.api/put
               (update doc
                       :juxt.site/methods (fnil assoc {})
                       (keyword (clojure.string/lower-case method))
                       {:juxt.site/operation-uri operation})])))
        (throw (ex-info "Cannot patch a missing document" {:xt/id id}))))}

   :juxt.site/rules
   [
    [(allowed? subject operation resource permission)
     [permission :juxt.site/subject subject]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/user-identity id]
     [id :juxt.site/user user]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://meta.juxt.site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/user user]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/application app]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://meta.juxt.site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/application app]]]}}}
