{:deps
 ["https://auth.example.org/operations/get-user"
  "https://auth.example.org/scopes/system/write"]
 :install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site.malli/input-schema
   [:map
    [:username [:re "[A-Za-z0-9]{2,}"]]
    [:password {:optional true} [:string {:min 6}]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)

          input
          (case content-type
            "application/edn"
            (some->
             body
             (String.)
             clojure.edn/read-string)

            "application/json"
            (some->
             body
             (String.)
             jsonista.core/read-value-with-keywords))

          _ (assert input)

          _ (juxt.site.malli/validate-input input)

          username (clojure.string/lower-case (:username input))
          password-hash (when-let [password (:password input)]
                          (crypto.password.bcrypt/encrypt password))

          user-uri (format "https://data.example.org/_site/users/%s" username)
          user-id-uri (format "https://data.example.org/_site/user-identities/%s" username)

          input (dissoc input :username :password)

          user
          (-> input
              (assoc :xt/id user-uri
                     :juxt.site/username username
                     :juxt.site/type "https://meta.juxt.site/types/user"
                     :juxt.site/methods
                     {:get {:juxt.site/operation-uri "https://auth.example.org/operations/get-user"}}
                     :juxt.site/protection-space-uris #{"https://auth.example.org/protection-spaces/bearer"}

                     :juxt.site/access-control-allow-origins
                     [[".*" {:juxt.site/access-control-allow-origin "*"
                             :juxt.site/access-control-allow-methods [:get]
                             :juxt.site/access-control-allow-headers ["authorization"]}]]))

          base
          {:juxt.site/variant-of user-uri
           :juxt.site/methods
           {:get {:juxt.site/operation-uri "https://auth.example.org/operations/get-user"}}
           :juxt.site/protection-space-uris #{"https://auth.example.org/protection-spaces/bearer"}
           :juxt.site/access-control-allow-origins
           [[".*" {:juxt.site/access-control-allow-origin "*"
                   :juxt.site/access-control-allow-methods [:get]
                   :juxt.site/access-control-allow-headers ["authorization"]}]]}

          user-json
          (assoc base
                 :xt/id (str user-uri ".json")
                 :juxt.http/content-type "application/json"
                 :juxt.site/respond
                 {:juxt.site.sci/program
                  #juxt.pprint
                  (let [content (str (jsonista.core/write-value-as-string *state*) "\r\n")]
                    (-> *ctx*
                        (assoc :ring.response/body content)
                        (update :ring.response/headers assoc "content-length" (str (count (.getBytes content))))))})

          user-edn
          (assoc base
                 :xt/id (str user-uri ".edn")
                 :juxt.http/content-type "application/edn"
                 :juxt.pick/quality-of-source 0.5
                 :juxt.site/respond
                 {:juxt.site.sci/program
                  #juxt.pprint
                  (let [content (str (pr-str *state*) "\r\n")]
                    (-> *ctx*
                        (assoc :ring.response/body content)
                        (update :ring.response/headers assoc "content-length" (str (count (.getBytes content))))))})

          user-identity
          (when password-hash
            {:xt/id user-id-uri
             :juxt.site/user user-uri
             :juxt.site/username username
             :juxt.site/password-hash password-hash
             :juxt.site/type #{"https://meta.juxt.site/types/user-identity"
                               "https://meta.juxt.site/types/basic-user-identity"}})]

      (filter some? [user user-json user-edn user-identity]))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (mapv
     (fn [doc]
       ;; TODO: If xt/id already exists, then an if-matches header
       ;; must be provided.
       [:xtdb.api/put doc])
     *prepare*)}

   :juxt.site/scope
   #{"https://auth.example.org/scopes/system/write"}

   :juxt.site/rules
   [
    [(allowed? subject operation resource permission)
     [permission :juxt.site/subject subject]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/user-identity id]
     [id :juxt.site/user user]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://meta.juxt.site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/user user]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/application app]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://meta.juxt.site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/application app]]]}}}
