{:install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)

          openapi-doc
          (case content-type
            "application/json" (some->
                                body
                                (String.)
                                jsonista.core/read-value)
            "application/edn" (some->
                               body
                               (String.)
                               clojure.edn/read-string))]
      {:openapi openapi-doc})}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [openapi (:openapi *prepare*)
          base-uri (get-in openapi ["servers" 0 "url"])
          body (format "Successfully installed API: %s (version %s)\r\n"
                       (get-in openapi ["info" "title"])
                       (get-in openapi ["info" "version"])
                       ) ;;(pprint-str {:keys (keys openapi)})
          content-length (count body)]

      (concat
       [
        ;; openapi.json
        [:xtdb.api/put
         {:xt/id (str base-uri "/openapi.json")
          :juxt.site/type "https://meta.juxt.site/types/openapi-document"
          :juxt.http/content-type "application/json"
          :juxt.site/methods {:get {:juxt.site/operation-uri "https://auth.example.org/operations/get-openapi-document"}}
          :openapi.v3/definition openapi

          :juxt.site/access-control-allow-origins
          [[".*" {:juxt.site/access-control-allow-origin "*"
                  :juxt.site/access-control-allow-methods [:get]}]]

          :juxt.site/respond
          {:juxt.site.sci/program
           #juxt.pprint
           (let [content (str (jsonista.core/write-value-as-string *state*) "\r\n")]
             (-> *ctx*
                 (assoc :ring.response/body content)
                 (update :ring.response/headers assoc "content-length" (str (count (.getBytes content))))))}}]]

       (for [[path path-obj] (get openapi "paths")]
         [:xtdb.api/put
          {:xt/id (str base-uri path)
           :openapi.v3/path path
           :juxt.site/methods
           (into {}
                 (for [[method operation] path-obj
                       :let [request-body (get operation "requestBody")]]
                   [(keyword method)
                    (cond-> {:juxt.site/operation-uri (get operation "operationId")
                             :openapi.v3/metadata operation}
                      request-body
                      (assoc :juxt.site/acceptable
                             (clojure.string/join "," (keys (get request-body "content")))))]))
           :juxt.site/protection-space-uris #{"https://auth.example.org/protection-spaces/bearer"}
           :juxt.site/access-control-allow-origins
           [[".*" {:juxt.site/access-control-allow-origin "*"
                   :juxt.site/access-control-allow-methods [:get]
                   :juxt.site/access-control-allow-headers ["content-type" "authorization"]}]]}])
       (let [suffix-map {"application/json" ".json"
                         "application/xml" ".xml"
                         "text/html" ".html"
                         "application/ld+json" ".jsonld"}]
         (for [[path path-obj] (get openapi "paths")
               [method operation] path-obj
               [variant-type _] (get-in operation ["responses" "200" "content"])
               :when (suffix-map variant-type)]
           [:xtdb.api/put
            {:xt/id (str base-uri path (suffix-map variant-type))
             :juxt.http/content-type variant-type
             :juxt.site/variant-of (str base-uri path)
             :juxt.site/methods
             (into {}
                   (for [[method operation] path-obj
                         :let [request-body (get operation "requestBody")]]
                     [(keyword method)
                      (cond-> {:juxt.site/operation-uri (get operation "operationId")}
                        request-body
                        (assoc :juxt.site/acceptable
                               (clojure.string/join "," (keys (get request-body "content")))))]))
             :juxt.site/respond
             {:juxt.site.sci/program
              #juxt.pprint
              (let [content (str (jsonista.core/write-value-as-string *state*) "\r\n")]
                (-> *ctx*
                    (assoc :ring.response/body content)
                    (update :ring.response/headers assoc "content-length" (str (count (.getBytes content))))))}
             :juxt.site/protection-space-uris #{"https://auth.example.org/protection-spaces/bearer"}
             :juxt.site/access-control-allow-origins
             [[".*" {:juxt.site/access-control-allow-origin "*"
                     :juxt.site/access-control-allow-methods [:get]
                     :juxt.site/access-control-allow-headers ["content-type" "authorization"]}]]}]))


       [[:ring.response/headers
         {"content-type" "text/plain"
          "content-length" (str content-length)}]
        [:ring.response/body body]]))}

   :juxt.site/rules
   [
    [(allowed? subject operation resource permission)
     [subject :juxt.site/user user]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://meta.juxt.site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/user user]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/application app]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://meta.juxt.site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/application app]]]}}}
