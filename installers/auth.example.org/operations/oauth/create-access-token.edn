;; TODO: Rename to 'issue-tokens' or similar. This does a lot more
;; than merely create an access token.
{:deps
 ["https://auth.example.org/permissions/oauth/create-access-token"]

 :install
 {:juxt.site/subject-uri "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-uri "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/do-operation-tx-fn "https://auth.example.org/_site/do-operation"

   :juxt.site.malli/input-schema
   [:or
    [:map
     ["grant_type" [:enum "authorization_code"]]
     ["code" :string]
     ;; TODO: Read https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3
     ["redirect_uri" {:optional true} :string]
     ["client_id" {:optional true} :string]
     ["code_verifier" {:optional true} :string]]
    [:map
     ["grant_type" [:enum "refresh_token"]]
     ["refresh_token" :string]
     ["scope" {:optional true} :string]]
    [:map
     ["grant_type" [:enum "password"]]
     ["username" :string]
     ["password" :string]
     ["scope" {:optional true} :string]
     ["client_id" :string]]
    [:map
     ["grant_type" [:enum "client_credentials"]]
     ["scope" {:optional true} :string]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [error
          (fn [{error "error"
                error-description "error_description"
                explain :explain :as data}]
            (when error-description
              ;; %x20-21 / %x23-5B / %x5D-7E
              (assert (re-matches (re-pattern "[\\x20-\\x21\\x23-\\x5B\\x5D-\\x7E]+") error-description)))
            (let [body (->> data
                            ;; We only externalize the entries with
                            ;; string keys.
                            (filter (comp string? first))
                            (into {})
                            jsonista.core/write-value-as-string
                            (format "%s\r\n"))]
              (throw
               (ex-info
                (or error-description error)
                (merge
                 {:ring.response/status 400
                  :ring.response/headers
                  {"content-type" "application/json"
                   "content-length" (str (count (.getBytes body)))}
                  :ring.response/body body
                  :malli.error/explain explain}
                 data)))))

          input (:juxt.site/received-representation *ctx*)
          content-type (apply format "%s/%s"
                              ((juxt :juxt.reap.alpha.rfc7231/type
                                     :juxt.reap.alpha.rfc7231/subtype)
                               (:juxt.reap.alpha.rfc7231/content-type input)))

          ;; "The authorization server SHOULD document the size of any
          ;; value it issues." -- RFC 6749 Section 4.2.2
          jti-length 16

          {grant-type "grant_type" :as form}
          (case content-type
            "application/x-www-form-urlencoded"
            (some->
             input
             :juxt.http/body
             (String.)
             ring.util.codec/form-decode))

          ;; First, check the grant_type
          _ (when-not (contains? #{"authorization_code"
                                   "refresh_token"
                                   "password"
                                   "client_credentials"} grant-type)
              (throw
               (ex-info
                "unsupported_grant_type"
                (let [bytes (jsonista.core/write-value-as-bytes
                             {"error" "unsupported_grant_type"
                              "error_description" "This grant type is not supported"})]
                  {:ring.response/status 400
                   :ring.response/headers
                   {"content-type" "application/json"
                    "content-length" (str (count bytes))}
                   :ring.response/body bytes}))))

          ;; Now do a Malli validation on the whole form to guard
          ;; against bad input and malicious forgeries.
          explain (juxt.site.malli/explain-input form)

          _ (when explain
              (log/info (str "Invalid input: " explain))
              (log/info (str "Request body as form: " (pr-str form)))
              (error
               {"error" "invalid_request"
                :explain explain}))]

      (case grant-type

        "authorization_code"
        {:grant-type "authorization_code"
         :client-id (get form "client_id")
         :code (get form "code")
         :code-verifier (get form "code_verifier")
         :jwt-claims {"iss" "https://auth.example.org"
                      "jti" (juxt.site.util/make-nonce jti-length)}
         :new-refresh-token (juxt.site.util/make-nonce 16)
         :origin (get-in *ctx* [:ring.request/headers "origin"])}

        "refresh_token"
        {:grant-type "refresh_token"
         :refresh-token (get form "refresh_token")
         :scope (get form "scope")
         :jwt-claims {"iss" "https://auth.example.org"
                      "jti" (juxt.site.util/make-nonce jti-length)}
         :new-refresh-token (juxt.site.util/make-nonce 16)
         :origin (get-in *ctx* [:ring.request/headers "origin"])}

        "password"
        (let [scope (get form "scope")]
          (cond-> {:grant-type "password"
                   :form form
                   :new-subject-id (juxt.site.util/make-nonce 10)
                   :new-access-token (juxt.site.util/make-nonce 16)
                   :new-refresh-token (juxt.site.util/make-nonce 16)
                   :origin (get-in *ctx* [:ring.request/headers "origin"])}
            scope (assoc :scope (set (clojure.string/split scope (re-pattern " "))))))

        "client_credentials"
        (let [scope (get form "scope")]
          (cond-> {:grant-type "client_credentials"
                   :form form
                   :new-subject-id (juxt.site.util/make-nonce 10)
                   :jwt-claims {"iss" "https://auth.example.org"
                                "jti" (juxt.site.util/make-nonce jti-length)}
                   :new-access-token (juxt.site.util/make-nonce 16)
                   :origin (get-in *ctx* [:ring.request/headers "origin"])}
            scope (assoc :scope (set (clojure.string/split scope (re-pattern " "))))))))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [{:keys [grant-type jwt-claims new-refresh-token]} *prepare*
          error (fn [m] (throw (ex-info "Error" (assoc m :oauth-error true))))]

      (try
        (case grant-type
          "authorization_code"
          (let [{:keys [client-id code code-verifier]} *prepare*

                {code-challenge :juxt.site/code-challenge
                 code-challenge-method :juxt.site/code-challenge-method
                 subject :juxt.site/subject
                 scope :juxt.site/scope
                 :as code-doc}
                (juxt.site/lookup-authorization-code code)

                _ (when-not code-doc
                    (error {"error" "invalid_grant"
                            "error_description" "Code invalid or expired"}))

                ;; If client-id is not specified, default to the one
                ;; stored in the database.
                client-id (or client-id (:juxt.site/client-id code-doc))

                verification
                (juxt.site/verify-authorization-code
                 {:code-verifier code-verifier
                  :code-challenge code-challenge
                  :code-challenge-method code-challenge-method})]

            (when-not (:verified? verification)
              (throw
               (ex-info
                "Not verified"
                {:code-verifier code-verifier
                 :code-challenge code-challenge
                 :code-challenge-method code-challenge-method
                 :verification verification})))

            (let [[{:keys [juxt.site/resource-server]} & others]
                  (juxt.site/lookup-applications client-id)

                  ;; TODO: If client-id is unknown, we need to return
                  ;; an unauthorized_client error. Add a test for
                  ;; this.

                  _ (assert resource-server)

                  ;; TODO: We need to recheck whether the client's
                  ;; scope is a superset of the requested scope. A
                  ;; client's scope may have changed on the time-line
                  ;; since granting the authorization code.

                  now (java.time.Instant/now)
                  issued-at (java.util.Date/from now)
                  not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

                  ;; TODO: How to best make this configurable?
                  access-token-expires-in (java.time.Duration/parse "PT15M")
                  access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

                  username (some-> subject xt/entity :juxt.site/user-identity xt/entity :juxt.site/user xt/entity :username)

                  jwt-claims
                  (into jwt-claims
                        (cond-> {"iat" issued-at
                                 "nbf" not-before
                                 "exp" access-token-expiry
                                 "aud" resource-server
                                 "sub" subject
                                 "client_id" client-id}
                          scope (assoc "scope" (clojure.string/join " " scope))
                          username (assoc "username" username)))

                  _ (when-not (:juxt.site/keypair *resource*)
                      (throw (ex-info "KEYPAIR NOT FOUND" {:resource *resource*}))
                      )

                  access-token
                  (juxt.site/make-access-token
                   jwt-claims
                   (:juxt.site/keypair *resource*))

                  access-token-doc
                  (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" (get jwt-claims "jti"))
                           :juxt.site/type "https://meta.juxt.site/types/access-token"
                           :juxt.site/grant-type grant-type
                           :juxt.site/subject subject
                           :juxt.site/issuer (get jwt-claims "iss")
                           :juxt.site/issued-at issued-at
                           :juxt.site/not-before not-before
                           :juxt.site/expiry access-token-expiry
                           :juxt.site/audience resource-server
                           :juxt.site/application client-id
                           :juxt.site/token access-token
                           :juxt.site/keypair (:juxt.site/keypair *resource*)}
                    scope (assoc :juxt.site/scope scope)
                    username (assoc :juxt.site/username username))

                  refresh-token-expires-in (java.time.Duration/parse "PT6H")
                  refresh-token-expiry (java.util.Date/from (.plus now refresh-token-expires-in))

                  refresh-token-doc
                  (into {:xt/id (str "https://auth.example.org/refresh-tokens/" new-refresh-token)
                         :juxt.site/type "https://meta.juxt.site/types/refresh-token"
                         :juxt.site/expiry refresh-token-expiry
                         :juxt.site/token new-refresh-token
                         :juxt.site/access-token (:xt/id access-token-doc)}
                        (cond-> (select-keys
                                 access-token-doc
                                 [:juxt.site/subject
                                  :juxt.site/issuer
                                  :juxt.site/issued-at
                                  :juxt.site/application
                                  :juxt.site/keypair])
                          scope (assoc :juxt.site/scope scope)
                          username (assoc :juxt.site/username username)))

                  origin (:origin *prepare*)]

              [[:xtdb.api/put access-token-doc issued-at access-token-expiry]
               [:xtdb.api/put refresh-token-doc issued-at refresh-token-expiry]
               [:ring.response/status 200]
               [:ring.response/headers
                (cond-> {"content-type" "application/json"
                         "cache-control" "no-store"
                         "pragma" "no-cache"}
                  origin (assoc "access-control-allow-origin" origin
                                ;; No longer require credentials
                                ;; "access-control-allow-credentials" "true"
                                ))]
               [:ring.response/body
                (jsonista.core/write-value-as-string
                 ;; See https://www.rfc-editor.org/rfc/rfc6749#section-5.1
                 (merge
                  {"access_token" access-token
                   "token_type" "bearer"
                   "expires_in" (.getSeconds access-token-expires-in)
                   "refresh_token" new-refresh-token}
                  (when scope
                    ;; As per
                    ;; https://www.rfc-editor.org/rfc/rfc6749#section-5.1,
                    ;; scope can be OPTIONAL if it is exactly what was
                    ;; requested, otherwise it is REQUIRED. We include
                    ;; it if there was a requested scope, regardless
                    ;; of whether its value is now exactly what was
                    ;; requested or not.
                    {"scope" (clojure.string/join " " scope)})))]]))

          "refresh_token"
          (let [{subject :juxt.site/subject,
                 application :juxt.site/application,
                 keypair :juxt.site/keypair,
                 scope :juxt.site/scope,
                 :as existing-refresh-token-doc}
                (juxt.site/lookup-refresh-token (:refresh-token *prepare*))

                client-id application ;; TODO: Consider a rename

                _ (when-not existing-refresh-token-doc
                    (error {"error" "invalid_grant"
                            "error_description" "Refresh token invalid or expired"}))

                [{:keys [juxt.site/resource-server]} & others] (juxt.site/lookup-applications client-id)
                _ (assert resource-server)

                now (java.time.Instant/now)
                issued-at (java.util.Date/from now)
                not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

                access-token-expires-in (java.time.Duration/parse "PT15M")
                access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

                username (some-> subject xt/entity :juxt.site/user-identity xt/entity :juxt.site/user xt/entity :username)

                jwt-claims
                (into jwt-claims
                      (cond-> {"iat" issued-at
                               "nbf" not-before
                               "exp" access-token-expiry
                               "aud" resource-server
                               "sub" subject
                               "client_id" client-id}
                        username (assoc "username" username)))

                access-token
                (juxt.site/make-access-token jwt-claims keypair)

                access-token-doc
                (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" (get jwt-claims "jti"))
                         :juxt.site/type "https://meta.juxt.site/types/access-token"
                         :juxt.site/grant-type grant-type
                         :juxt.site/subject subject
                         :juxt.site/issuer (get jwt-claims "iss")
                         :juxt.site/issued-at issued-at
                         :juxt.site/not-before not-before
                         :juxt.site/expiry access-token-expiry
                         :juxt.site/audience resource-server
                         ;; TODO: consider renaming to
                         ;; juxt.site/client-id. An application does
                         ;; exist, but when specified, should be the
                         ;; full URI of the application. The client-id
                         ;; is not (yet) a URI.
                         :juxt.site/application client-id
                         :juxt.site/token access-token
                         :juxt.site/keypair keypair}
                  scope (assoc :juxt.site/scope scope)
                  username (assoc :juxt.site/username username))

                refresh-token-expires-in (java.time.Duration/parse "PT6H")
                refresh-token-expiry (java.util.Date/from (.plus now refresh-token-expires-in))

                refresh-token-doc
                (into {:xt/id (str "https://auth.example.org/refresh-tokens/" new-refresh-token)
                       :juxt.site/type "https://meta.juxt.site/types/refresh-token"
                       :juxt.site/expiry refresh-token-expiry
                       :juxt.site/token new-refresh-token
                       :juxt.site/access-token (:xt/id access-token-doc)}
                      (cond-> (select-keys
                               access-token-doc
                               [:juxt.site/subject
                                :juxt.site/issuer
                                :juxt.site/issued-at
                                :juxt.site/application
                                :juxt.site/keypair])
                        scope (assoc :juxt.site/scope scope)
                        username (assoc :juxt.site/username username)))]

            (let [body
                  (jsonista.core/write-value-as-string
                   (cond-> {"access_token" access-token
                            "token_type" "bearer"
                            "expires_in" (.getSeconds access-token-expires-in)
                            "refresh_token" new-refresh-token}
                     scope (assoc "scope" (clojure.string/join " " scope))))
                  origin (:origin *prepare*)]
              [[:xtdb.api/put access-token-doc issued-at access-token-expiry]
               [:xtdb.api/put refresh-token-doc issued-at refresh-token-expiry]
               ;; Delete the old refresh-token and access-token
               [:xtdb.api/delete (:xt/id existing-refresh-token-doc)]
               [:xtdb.api/delete (:juxt.site/access-token existing-refresh-token-doc)]
               ;; See https://www.rfc-editor.org/rfc/rfc6749#section-5.1
               [:ring.response/status 200]
               [:ring.response/headers
                (cond-> {"content-type" "application/json"
                         "content-length" (str (count (.getBytes body)))
                         "cache-control" "no-store"
                         "pragma" "no-cache"}

                  origin (assoc "access-control-allow-origin" origin))]
               [:ring.response/body body]]))

          "password"
          (let [username (get-in *prepare* [:form "username"])
                user-identity-ref
                (juxt.site/match-identity-with-password
                 {:juxt.site/type "https://meta.juxt.site/types/basic-user-identity"
                  :juxt.site/username (clojure.string/lower-case username)}
                 (get-in *prepare* [:form "password"])
                 :juxt.site/password-hash)
                user-identity (xt/entity user-identity-ref)]

            (when-not user-identity-ref
              (error {"error" "invalid_grant"
                      "error_description" "No user identity matches those credentials"}))

            (when-not user-identity
              (error {"error" "invalid_grant"
                      "error_description" "No user identity found"}))

            (let [client-id (get-in *prepare* [:form "client_id"])
                  _ (assert client-id)

                  requested-scope (:scope *prepare*)

                  [{resource-server :juxt.site/resource-server
                    client-scope :juxt.site/scope
                    :as client-doc} & others]
                  (juxt.site/lookup-applications client-id)

                  _ (when-not client-doc
                      (error
                       {"error" "invalid_client"
                        "error_description" "No client registered with that client_id"}))
                  _ (when others
                      (error
                       {"error" "invalid_client"
                        "error_description" "Multiple clients registered with that client_id"}))

                  _ (assert resource-server)

                  available-scope
                  (set
                   (map first
                        (xt/q '{:find [e]
                                :where [[e :juxt.site/type "https://meta.juxt.site/types/scope"]
                                        [e :juxt.site/issuer "https://auth.example.org"]]})))

                  scope (cond
                          (and requested-scope client-scope)
                          (clojure.set/intersection requested-scope client-scope available-scope)

                          (and requested-scope (nil? client-scope))
                          (clojure.set/intersection requested-scope available-scope)

                          (and (nil? requested-scope) client-scope)
                          (clojure.set/intersection client-scope available-scope)

                          :otherwise nil)

                  _ (when (= #{} scope)
                      (error
                       {"error" "invalid_scope"
                        "error_description" "No intersection between requested scope and available scope"}))

                  now (java.time.Instant/now)
                  issued-at (java.util.Date/from now)
                  not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

                  access-token-expires-in (java.time.Duration/parse "PT24H") ; 24 hours
                  access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

                  access-token (get *prepare* :new-access-token)

                  subject
                  {:xt/id (str "https://auth.example.org/subjects/" (get *prepare* :new-subject-id))
                   :juxt.site/user-identity user-identity-ref
                   :juxt.site/user (:juxt.site/user user-identity)
                   :juxt.site/type "https://meta.juxt.site/types/subject"}

                  access-token-doc
                  (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" access-token)
                           :juxt.site/type "https://meta.juxt.site/types/access-token"
                           :juxt.site/grant-type grant-type
                           :juxt.site/subject (:xt/id subject)
                           :juxt.site/issuer "https://auth.example.org"
                           :juxt.site/issued-at issued-at
                           :juxt.site/not-before not-before
                           :juxt.site/expiry access-token-expiry
                           :juxt.site/audience resource-server
                           ;; TODO: consider renaming to
                           ;; juxt.site/client-id. An application does
                           ;; exist, but when specified, should be the
                           ;; full URI of the application. The client-id
                           ;; is not (yet) a URI.
                           :juxt.site/application client-id
                           :juxt.site/token access-token
                           ;;:juxt.site/keypair keypair
                           }
                    scope (assoc :juxt.site/scope scope)
                    username (assoc :juxt.site/username username))

                  new-refresh-token (get *prepare* :new-refresh-token)
                  refresh-token-expires-in (java.time.Duration/parse "PT6H")
                  refresh-token-expiry (java.util.Date/from (.plus now refresh-token-expires-in))

                  refresh-token-doc
                  (into {:xt/id (str "https://auth.example.org/refresh-tokens/" new-refresh-token)
                         :juxt.site/type "https://meta.juxt.site/types/refresh-token"
                         :juxt.site/expiry refresh-token-expiry
                         :juxt.site/token new-refresh-token
                         :juxt.site/access-token (:xt/id access-token-doc)}
                        (cond-> (select-keys
                                 access-token-doc
                                 [:juxt.site/subject
                                  :juxt.site/issuer
                                  :juxt.site/issued-at
                                  :juxt.site/application])
                          scope (assoc :juxt.site/scope scope)
                          username (assoc :juxt.site/username username)))]

              (let [body (->>
                          (cond-> {"access_token" access-token
                                   "token_type" "bearer"
                                   "expires_in" (.getSeconds access-token-expires-in)
                                   "refresh_token" new-refresh-token}
                            scope (assoc "scope" (clojure.string/join " " scope)))
                          jsonista.core/write-value-as-string
                          (format "%s\r\n"))]
                [
                 [:xtdb.api/put access-token-doc issued-at access-token-expiry]
                 [:xtdb.api/put refresh-token-doc issued-at refresh-token-expiry]
                 [:xtdb.api/put subject issued-at refresh-token-expiry]
                 [:ring.response/status 200]
                 [:ring.response/headers
                  {"content-type" "application/json"
                   "content-length" (str (count (.getBytes body)))
                   "cache-control" "no-store"
                   "pragma" "no-cache"}]
                 [:ring.response/body body]])))

          ;; TODO: Is it possible to analyse SCI code ahead-of-time
          ;; and store the analysed result in the database, to save us
          ;; from analysing the same code on every transaction
          ;; function. Also, this will have the fail-fast advantage of
          ;; telling the developer about bad code and not waiting for
          ;; the user to find it!

          "client_credentials"
          (let [subject-of-request *subject*

                _ (when-not subject-of-request
                    (error
                     ;; TODO: We need a mechanism of returning a 401
                     {"error" "invalid_client"
                      "error_description" "Unauthorized"}))

                ;; When no subject we must fail
                client (:juxt.site/application subject-of-request)

                _ (when-not client
                    (error
                     ;; TODO: We need a mechanism of returning a 401
                     {"error" "invalid_client"
                      "error_description" "Unauthorized"}))

                client-doc (xt/entity client)

                _ (when-not client-doc
                    (error
                     ;; TODO: We need a mechanism of returning a 401
                     {"error" "invalid_client"
                      "error_description" "No such client"}))

                {:keys [juxt.site/client-id]} client-doc

                _ (when-not client-id
                    (error
                     {"error" "invalid_client"
                      "error_description" "No client-id in client-doc"}))

                now (java.time.Instant/now)
                issued-at (java.util.Date/from now)
                not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

                access-token-expires-in (java.time.Duration/parse "PT24H") ; 24 hours
                access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

                ;; The client-id will be given to us in the Authorization header
                ;; client-id -> client-document -> resource-server

                ;; application

                subject
                {:xt/id (str "https://auth.example.org/subjects/" (get *prepare* :new-subject-id))
                 :juxt.site/type "https://meta.juxt.site/types/subject"
                 :juxt.site/application client
                 }

                ;; resource-server  will be part of the client document, and specified during the registration of a client

                jwt-claims
                (into jwt-claims
                      (cond-> {"iat" issued-at
                               "nbf" not-before
                               "exp" access-token-expiry
                               ;;"aud" resource-server
                               "sub" (:xt/id subject)
                               "client_id" client-id
                               }
                        ;;scope (assoc "scope" (clojure.string/join " " scope))
                        ))

                access-token (juxt.site/make-access-token
                              jwt-claims
                              (:juxt.site/keypair *resource*))

                access-token-doc
                (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" (get jwt-claims "jti"))
                         :juxt.site/type "https://meta.juxt.site/types/access-token"
                         :juxt.site/grant-type grant-type
                         :juxt.site/subject (:xt/id subject)
                         :juxt.site/issuer (get jwt-claims "iss")
                         :juxt.site/issued-at issued-at
                         :juxt.site/not-before not-before
                         :juxt.site/expiry access-token-expiry
                         ;;:juxt.site/audience resource-server
                         :juxt.site/application client-id
                         :juxt.site/token access-token
                         :juxt.site/keypair (:juxt.site/keypair *resource*)}
                  ;;scope (assoc :juxt.site/scope scope)
                  )

                body (->>
                      (cond-> {"access_token" access-token
                               "token_type" "bearer"
                               "expires_in" (.getSeconds access-token-expires-in)}
                        ;;scope (assoc "scope" (clojure.string/join " " scope))
                        )
                      jsonista.core/write-value-as-string
                      (format "%s\r\n"))]
            [
             [:xtdb.api/put access-token-doc issued-at access-token-expiry]
             [:xtdb.api/put subject issued-at access-token-expiry]
             [:ring.response/status 200]
             [:ring.response/headers
              (cond-> {"content-type" "application/json"
                       "content-length" (str (count (.getBytes body)))
                       "cache-control" "no-store"
                       "pragma" "no-cache"}
                ;; We do CORS in the endpoint, not here! see
                ;; /installers/auth.example.org/oauth/token.edn
                ;; origin (assoc "access-control-allow-origin" origin)
                )]
             [:ring.response/body body]]))

        (catch clojure.lang.ExceptionInfo error
          ;; TODO: This may be an attack. Log this?
          ;; TODO: Sanitize error description
          (let [ex-data (ex-data error)]
            (if (:oauth-error ex-data)

              ;; TODO: Compare with the error handler in authorize
              ;; which doesn't put anything in the database on error,
              ;; unlike this approach.

              ;; TODO: Add error_uri ? If so, ensure chars only in set
              ;; '%x21 / %x23-5B / %x5D-7E' as per
              ;; https://www.rfc-editor.org/rfc/rfc6749#section-5.2
              (let [{error "error" error-description "error_description"} ex-data]

                (assert error)

                ;; %x20-21 / %x23-5B / %x5D-7E
                (when error-description
                  (assert (re-matches (re-pattern "[\\x20-\\x21\\x23-\\x5B\\x5D-\\x7E]+") error-description)))

                (let [content (str (jsonista.core/write-value-as-string
                                    (select-keys ex-data ["error" "error_description"])) "\r\n")]
                  [[:ring.response/status 400]
                   [:ring.response/headers
                    {"content-type" "application/json"
                     "content-length" (str (count content))
                     "cache-control" "no-store"
                     "pragma" "no-cache"}]
                   [:ring.response/body content]]))

              ;; Pass through if not a recognized error
              (throw error))))))}

   :juxt.site/rules
   [
    ;; Publicly available. This is often required to be accessible by
    ;; browser-based scripts, e.g. for the authorization code with
    ;; PKCE OAuth2 flow.
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
