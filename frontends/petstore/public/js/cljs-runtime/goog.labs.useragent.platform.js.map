{
"version":3,
"file":"goog.labs.useragent.platform.js",
"lineCount":80,
"mappings":"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",
"sources":["goog/labs/useragent/platform.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Closure user agent platform detection.\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>\n * For more information on browser brand, rendering engine, or device see the\n * other sub-namespaces in goog.labs.userAgent (browser, engine, and device\n * respectively).\n */\n\ngoog.module('goog.labs.userAgent.platform');\ngoog.module.declareLegacyNamespace();\n\nconst googString = goog.require('goog.string.internal');\nconst util = goog.require('goog.labs.userAgent.util');\n\n/**\n * @return {boolean} Whether the platform is Android.\n */\nfunction isAndroid() {\n  return util.matchUserAgent('Android');\n}\n\n/**\n * @return {boolean} Whether the platform is iPod.\n */\nfunction isIpod() {\n  return util.matchUserAgent('iPod');\n}\n\n/**\n * @return {boolean} Whether the platform is iPhone.\n */\nfunction isIphone() {\n  return util.matchUserAgent('iPhone') && !util.matchUserAgent('iPod') &&\n      !util.matchUserAgent('iPad');\n}\n\n/**\n * Returns whether the platform is iPad.\n * Note that iPadOS 13+ spoofs macOS Safari by default in its user agent, and in\n * this scenario the platform will not be recognized as iPad. If you must have\n * iPad-specific behavior, use\n * {@link goog.labs.userAgent.extra.isSafariDesktopOnMobile}.\n * @return {boolean} Whether the platform is iPad.\n */\nfunction isIpad() {\n  return util.matchUserAgent('iPad');\n}\n\n/**\n * Returns whether the platform is iOS.\n * Note that iPadOS 13+ spoofs macOS Safari by default in its user agent, and in\n * this scenario the platform will not be recognized as iOS. If you must have\n * iPad-specific behavior, use\n * {@link goog.labs.userAgent.extra.isSafariDesktopOnMobile}.\n * @return {boolean} Whether the platform is iOS.\n */\nfunction isIos() {\n  return isIphone() || isIpad() || isIpod();\n}\n\n/**\n * @return {boolean} Whether the platform is Mac.\n */\nfunction isMacintosh() {\n  return util.matchUserAgent('Macintosh');\n}\n\n/**\n * Note: ChromeOS is not considered to be Linux as it does not report itself\n * as Linux in the user agent string.\n * @return {boolean} Whether the platform is Linux.\n */\nfunction isLinux() {\n  return util.matchUserAgent('Linux');\n}\n\n/**\n * @return {boolean} Whether the platform is Windows.\n */\nfunction isWindows() {\n  return util.matchUserAgent('Windows');\n}\n\n/**\n * @return {boolean} Whether the platform is ChromeOS.\n */\nfunction isChromeOS() {\n  return util.matchUserAgent('CrOS');\n}\n\n/**\n * @return {boolean} Whether the platform is Chromecast.\n */\nfunction isChromecast() {\n  return util.matchUserAgent('CrKey');\n}\n\n/**\n * @return {boolean} Whether the platform is KaiOS.\n */\nfunction isKaiOS() {\n  return util.matchUserAgentIgnoreCase('KaiOS');\n}\n\n/**\n * The version of the platform. We only determine the version for Windows,\n * Mac, and Chrome OS. It doesn't make much sense on Linux. For Windows, we only\n * look at the NT version. Non-NT-based versions (e.g. 95, 98, etc.) are given\n * version 0.0.\n *\n * @return {string} The platform version or empty string if version cannot be\n *     determined.\n */\nfunction getVersion() {\n  const userAgentString = util.getUserAgent();\n  let version = '', re;\n  if (isWindows()) {\n    re = /Windows (?:NT|Phone) ([0-9.]+)/;\n    const match = re.exec(userAgentString);\n    if (match) {\n      version = match[1];\n    } else {\n      version = '0.0';\n    }\n  } else if (isIos()) {\n    re = /(?:iPhone|iPod|iPad|CPU)\\s+OS\\s+(\\S+)/;\n    const match = re.exec(userAgentString);\n    // Report the version as x.y.z and not x_y_z\n    version = match && match[1].replace(/_/g, '.');\n  } else if (isMacintosh()) {\n    re = /Mac OS X ([0-9_.]+)/;\n    const match = re.exec(userAgentString);\n    // Note: some old versions of Camino do not report an OSX version.\n    // Default to 10.\n    version = match ? match[1].replace(/_/g, '.') : '10';\n  } else if (isKaiOS()) {\n    re = /(?:KaiOS)\\/(\\S+)/i;\n    const match = re.exec(userAgentString);\n    version = match && match[1];\n  } else if (isAndroid()) {\n    re = /Android\\s+([^\\);]+)(\\)|;)/;\n    const match = re.exec(userAgentString);\n    version = match && match[1];\n  } else if (isChromeOS()) {\n    re = /(?:CrOS\\s+(?:i686|x86_64)\\s+([0-9.]+))/;\n    const match = re.exec(userAgentString);\n    version = match && match[1];\n  }\n  return version || '';\n}\n\n/**\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the browser version is higher or the same as the\n *     given version.\n */\nfunction isVersionOrHigher(version) {\n  return googString.compareVersions(getVersion(), version) >= 0;\n}\n\nexports = {\n  getVersion,\n  isAndroid,\n  isChromeOS,\n  isChromecast,\n  isIos,\n  isIpad,\n  isIphone,\n  isIpod,\n  isKaiOS,\n  isLinux,\n  isMacintosh,\n  isVersionOrHigher,\n  isWindows,\n};\n"],
"names":["goog","module","declareLegacyNamespace","googString","require","util","isAndroid","matchUserAgent","isIpod","isIphone","isIpad","isIos","isMacintosh","isLinux","isWindows","isChromeOS","isChromecast","isKaiOS","matchUserAgentIgnoreCase","getVersion","userAgentString","getUserAgent","version","re","match","exec","replace","isVersionOrHigher","compareVersions","exports"]
}
