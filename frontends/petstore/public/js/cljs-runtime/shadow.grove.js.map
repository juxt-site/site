{"version":3,"sources":["shadow/grove.cljs"],"mappings":";AAwBA,AAEA,iCAAA,yCAAAA,1EAAMK,mFAAyDG;AAA/D,AAAA,IAAAP,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAAA,NAA0DM;aAA1D,AAAAJ,4CAAAF,eAAA,pEAA8CK;AAA9C,AAAA,GACS,AAACG,qBAAKF;AADf;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,GAES,AAACK,qBAAKD;AAFf;AAAA,AAAA,MAAA,KAAAJ,MAAA;;;AAAA,GAGS,AAACM,mCAAmB,AAAA,6EAAIF;AAHjC;AAAA,AAAA,MAAA,KAAAJ,MAAA;;;AAKE,0FAAA,nFAAkBE,4EAAOE,YAAWD;;AAEtC,AAAA,2BAAA,mCAAAI,9DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAMS,oEAEFC;AAFJ,AAGG,0CAAA,KAAA,xCAACC,6BAAgBD;;;AAHpB,CAAA,yDAAA,zDAAMD,oEAKFC,MAAME;AALV,AAMG,gDAAA,zCAACD,6BAAgBD,MAAME;;;AAN1B,CAAA,yDAAA,zDAAMH,oEAOFC,MAAME,MAAMC;AAPhB,AAQG,OAACF,6BAAgBD,MAAME,MAAMC;;;AARhC,CAAA,mDAAA,nDAAMJ;;AAAN,AAUA,AAAA,0BAAA,kCAAAF,5DAAMQ;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAf,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMe,mEACFH;AADJ,AAEG,oCAAA,WAAA,xCAACD,kCAAoBC;;;AAFxB,CAAA,wDAAA,xDAAMG,mEAGFH,MAAMC;AAHV,AAIG,oCAAA,7BAACF,kCAAoBC,MAAMC;;;AAJ9B,CAAA,kDAAA,lDAAME;;AAAN,AAMA,sBAAA,8BAAAC,pDAAME,6DAC+BE;AADrC,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAnB,4BAAAmB;UAAAA,NACgCd;kBADhC,AAAAJ,4CAAAkB,eAAA,zEACeE;AADf,AAEE,OAACE,gCAAmBF,YAAYC,GAAGjB;;AAErC,4BAAA,5BAAMmB,gEAASH,YAAYC;AAA3B,AACE,oBAAQ,AAACG,gCAAQJ;AAAjB;AAAA,AAAA,MAAA,KAAAnB,MAAA,CAAA,kBAAA,wBAAA,KAAA;;;AACA,IAAAwB,aAAA,AAAAC,gBAA+BN;IAA/BK,iBAAA,AAAA1B,4BAAA0B;gBAAA,AAAAzB,4CAAAyB,eAAA,vEAAkBE;AAAlB,AACE,sDAAA,/CAACC,qCAAYD;AAAb,AAAwB,sDAAA,/CAACL,gCAAmBF,YAAYC;GAAxD;;AAEJ,4BAAA,5BAAMQ,gEAAkBC;AAAxB,AACE,IAAAC,qBAA6B,AAAWD;AAAxC,AAAA,oBAAAC;AAAA,AAAA,WAAAA,PAAwBC;AAAxB,AACE,mBAAA,nBAAWA;;AACX,eAAA,RAAWF;;AACX,sBAAA,RAAWA;;AAHb;;;AAKF,AAAA;;;;;;;qBAAA,6BAAAtB,lDAAM0B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mDAAA,nDAAMiC,8DAMFC;AANJ,AAOG,OAACC,iDAAMD,SAAS,WAAKE,IAAIC;AAAT,AAAcA;;;;AAPjC,CAAA,mDAAA,nDAAMJ,8DAQFC,SAASI;AARb,AASG,GAAI,AAACC,wBAAQD;AACX,YAAAE,gCAAkBN,SAAS,WAAKE,IAAIC;AAAT,AAAc,OAACI,+CAAOJ,KAAIC;GAArD,KAAA;;AACA,YAAAE,oDAAA,KAAA,zBAAkBN,SAASI;;;;AAXhC,CAAA,6CAAA,7CAAML;;AAAN,AAaA,AAAA,yBAAA,iCAAA1B,1DAAMoC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA3C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAM2C,kEACFC;AADJ,AAEG,wEAAA,iCAAA,lGAACC,qDAAUD;;;AAFd,CAAA,uDAAA,vDAAMD,kEAGFC,YAAYE;AAHhB,AAIG,6EAAA,tEAACD,qDAAUD,YAAYE;;;AAJ1B,CAAA,uDAAA,vDAAMH,kEAKFC,YAAYE,KAAKC;AALrB,AAAA,GAMU,wBAAAC,vBAAUJ;AANpB;AAAA,AAAA,MAAA,KAAA5C,MAAA;;;AAAA,GAOU,AAACuC,wBAAQO;AAPnB;AAAA,AAAA,MAAA,KAAA9C,MAAA;;;AAQG,YAAAiD,yDAAA,KAAA,KAAA,pCAAiBL,YAAYE,KAAKC;;;AARrC,CAAA,iDAAA,jDAAMJ;;AAAN,AAUA,wBAAA,xBAAMO,wDAAUC,KAAKC;AAArB,AACE,YAAAC,sCAAwBF,KAAKC;;AAE/B,0BAAA,1BAAME,4DAAYC,KAAKC;AAAvB,AACE,OAACC,uCAAcF,KAAKC;;AAEtB,yBAAA,zBAAME,0DAAWH,KAAKI,OAAOH;AAA7B,AACE,OAACI,sCAAaL,KAAKI,OAAOH;;AAE5B,AAAA;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,mEAAAK,nEAASK;;AAAT,CAAA,AAAA,0FAAA,1FAASA,qGAOMM,MAAKC;;AAPpB,AAAA,gBAAA,ZAOeD;AAPf,AAQI,CAAMD,0BAAiBE;;AACvB,QAAMH,gBAAO,iBAAAI,WAAY,AAAsBH;IAAlCI,WAAA;IAAAC,WAAwDR;AAAxD,AAAA,0GAAAM,SAAAC,SAAAC,wCAAAF,SAAAC,SAAAC,9KAACP,kDAAAA,8EAAAA;;;;AATlB,CAAA,AAAA,4FAAA,5FAASH,uGAWOM;;AAXhB,AAAA,gBAAA,ZAWgBA;AAXhB,AAAA;;;AAAA,CAAA,AAAA,qFAAA,rFAASN,gGAYMM;;AAZf,AAAA,gBAAA,ZAYeA;AAZf,AAYqBF;;;AAZrB,CAAA,AAAA,4FAAA,5FAASJ,uGAaQM;;AAbjB,AAAA,gBAAA,ZAaiBA;AAbjB,AAAA;;;AAAA,CAAA,AAAA,iGAAA,jGAASN,4GAeaM,MAAkBK;;AAfxC,AAAA,gBAAA,ZAesBL;AAftB,AAgBI,IAAMM,WAAS,AAAOD;IAChBE,cAAYT;AADlB,AAGE,CAAMD,oBAAW,AAAcQ;;AAC/B,CAAMP,gBAAO,iBAAAU,WAAY,AAAsBT;IAAlCU,WAAoDb;IAApDc,WAAwDJ;AAAxD,AAAA,0GAAAE,SAAAC,SAAAC,wCAAAF,SAAAC,SAAAC,9KAACb,kDAAAA,8EAAAA;;;AACd,CAAMD,aAAIU;;AAEV,OAACK,gDAAKb,cAAOS;;;AAvBnB,CAAA,AAAA,6FAAA,7FAASb,wGAyBSM;;AAzBlB,AAAA,gBAAA,ZAyBkBA;AAzBlB,AAAA;;;AAAA,CAAA,oCAAA,pCAASN;AAAT,AAAA,AAAA;;;AAAA,CAAA,0CAAA,1CAASA;;AAAT,CAAA,6CAAA,7CAASA;;AAAT,CAAA,kDAAA,WAAAJ,mBAAAC,qBAAAC,rGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;gCAAA,hCAASI,wEACIC,IACAC,WACAC,OACYC;AAJzB,AAAA,YAAAL,yBACaE,IACAC,WACAC,OACYC;;;AAJhBL,AA4BT,4BAAA,5BAAMkB,gEAAchB,IAAIC;AAAxB,AACE,YAAAH,wCAAA,KAAA,pBAAcE,IAAIC;;AAKpB,mBAAA,nBAAMgB;AAAN,AACE,gCAAA,zBAACC;;AAEH;;;;sBAAA,tBAAMC,oDAGHC,KAAKC;AAHR,AAIE,YAAAC,iDAAA,KAAA,KAAA,xBAAkBF,KAAKC;;AAEzB;;;6BAAA,7BAAME,kEAEHF;AAFH,AAGE,YAAAC,mCAAA,mEAAA,KAAA,KAAA,nBAA0BD;;AAE5B;;;4BAAA,5BAAMG,gEAEHH;AAFH,AAGE,YAAAC,mCAAA,iEAAA,KAAA,KAAA,nBAAyBD;;AAG3B,AAAA,sBAAA,8BAAAlF,pDAAMuF;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9F,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAM8F,+DACFC;AADJ,AAEG,OAACC,8BAAcC,cAAiBF;;;AAFnC,CAAA,oDAAA,pDAAMD,+DAGFI,SAASH;AAHb,AAIG,OAACC,8BAAcE,SAASH;;;AAJ3B,CAAA,8CAAA,9CAAMD;;AAAN,AAMA,qCAAA,rCAAMK,kFAAuBC,UAAUC;AAAvC,AAIE,GAAaC;AACX,AAACC,cAAiB,CAAA,qGAAA,jCAA6B,AAAA,AAAIH,wEAAiEA;;AACpH,cAAA,dAACG,yEAA4EH;;;AAC/E,OAACG,cAAiBF;;AAEpB,AAAA;;;;;;;;AAAA,AAAA,CAAA,AAAA,+EAAAxC,/EAAS2C;;AAAT,CAAA,AAAA,yGAAA,zGAASA,oHAEShC,MAAKpE,OAAOuG,EAAEC;;AAFhC,AAAA,gBAAA,ZAEkBpC;AAFlB,AAKI,OAACnD,gCAAmBqF,cAAOtG,OAAOwG;;;AALtC,CAAA,wCAAA,xCAASJ;AAAT,AAAA,AAAA;;;AAAA,CAAA,8CAAA,9CAASA;;AAAT,CAAA,iDAAA,jDAASA;;AAAT,CAAA,sDAAA,WAAA1C,mBAAAC,qBAAAC,zGAASwC;AAAT,AAAA,OAAAvC,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAAS0C,gFAAiBC;AAA1B,AAAA,YAAAF,6BAA0BE;;;AAAjBF,AAOT,6BAAA,7BAAOK,kEACJH,OAAO7E;AADV,AAKE,IAAMiF,eACA,KAAAN,6BAAkBE;IAElBK,WACA,AAAA,kIAAA,AAAAtF,gBAAgBiF;AAJtB,AAME,OAACM,+CACC,WAAK7G,IAAI8G;AAAT,AACE,QAACA,wCAAAA,6CAAAA,PAAQ9G,yBAAAA;GAFb,2CAAA,yQAAA,+HAAA,gLAAA,0GAAA,gHAAA,vqBAKoB,AAAA,qIAAA,AAAAsB,gBAAiBiF,2HACdI,4GACJ,6CAAA,7CAACI,mLACJrF,iHACI6E,4HAEIP,2CAEtBY;;AAEN,4BAAA,5BAAMI,gEAAST,OAAW7E,QAAQuF;AAAlC,AAAA,oBACS,AAAC7F,gCAAQmF;AADlB;AAAA,AAAA,MAAA,KAAA1G,MAAA;;;AAEE,IAAAqH,qBAAqB,AAAWxF;AAAhC,AAAA,oBAAAwF;AAAA,kBAAAA,dAASC;AAAT,AACE,AAAI,GAAehB;AAAf,AACE,AAACiB;;AADH;;AAQA,AAACC,6BAAWF,YAAYF;;AAR5B;;AAWA,IAAMK,UAAQ,AAACZ,2BAAcH,OAAO7E;IAC9B6F,WAAS,AAACC,uDAAY9F,QAAQ4F;AADpC,AAEE,AAACD,6BAAWE,SAASN;;AACrB,CAAM,AAAWvF,kBAAS6F;;AAC1B,CAAM,AAAU7F,iBAAS4F;;AAJ3B;;;AAOJ,sBAAA,tBAAMG,oDAAQlB,OAAW7E,QAAQuF;AAAjC,AAAA,oBACS,AAAC7F,gCAAQmF;AADlB;AAAA,AAAA,MAAA,KAAA1G,MAAA;;;AAEE,qOAAA,9NAAa,AAAA,qIAAA,AAAAyB,gBAA6BiF;AAA1C,AAAmD,OAACS,0BAAQT,OAAO7E,QAAQuF;GAA3E;;AAGF,AAAA;;;;;;;;;AAAA,AAAA,CAAA,AAAA,6EAAAvD,7EAASgE;;AAAT,CAAA,AAAA,wGAAA,xGAASA,mHAEUrD,MAAKyD,UAAUC;;AAFlC,AAAA,gBAAA,ZAEmB1D;AAFnB,AAGI,AAAMwD,oBAASC;;AAEf,oBAAUF;AAAV;;AAAA,AACE,gCAAA,/BAAMA;;AACN,sCAAA,/BAACI;AAAD,AAAe,OAAgB3D;;;;;AAPrC,CAAA,AAAA,qGAAA,rGAASqD,gHASOrD,MAAKyD;;AATrB,AAAA,gBAAA,ZASgBzD;AAThB,AAUI,OAASwD,uBAASC;;;AAVtB,CAAA,AAAA,sGAAA,tGAASJ,iHAYQrD,MAAK4D;;AAZtB,AAAA,gBAAA,ZAYiB5D;AAZjB,AAAA;;;AAAA,CAAA,AAAA,qGAAA,rGAASqD,gHAaOrD,MAAK4D;;AAbrB,AAAA,gBAAA,ZAagB5D;AAbhB,AAAA;;;AAAA,CAAA,AAAA,kGAAA,lGAASqD,6GAeIrD,MAAK6D,OAAOH;;AAfzB,AAAA,gBAAA,ZAea1D;AAfb,AAgBI,gCAAA,/BAAMuD;;AACN,CAACM,uCAAAA,yCAAAA;;AAID,OAAgB7D;;;AArBpB,CAAA,AAAA,0DAAA,1DAASqD;;AAAT,AAAA,YAAA,RAwBkBrD;AAxBlB,AAyBI,IAAA,AACE,IAAM8D,OAAK,AAASN;AAApB,AACE;AAAA,AACE,IAAMO,UAAQ,AAAOD;AAArB,AACE,GAAM,GAAK,AAAiBC;AAA5B,AACE,AAAU,AAAqBA;;AAI/B;;AALF;;;;UAJR,AAYI,gCAAA,/BAAMR;;;AArCd,CAAA,sCAAA,tCAASF;AAAT,AAAA,AAAA;;;AAAA,CAAA,4CAAA,5CAASA;;AAAT,CAAA,+CAAA,/CAASA;;AAAT,CAAA,oDAAA,WAAA/D,mBAAAC,qBAAAC,vGAAS6D;AAAT,AAAA,OAAA5D,iBAAAF,qBAAA;;;AAAA;;;kCAAA,lCAAS+D,4EAAyBC,sBAAgBC;AAAlD,AAAA,YAAAH,2BAAkCE,sBAAgBC;;;AAAzCH,AAwCT,AAAA;;;;;;;;;AAAA,AAAA,CAAA,AAAA,oFAAAhE,pFAAS2E;;AAAT,CAAA,AAAA,+GAAA,/GAASA,0HAEUhE,MAAKyD,UAAUC;;AAFlC,AAAA,gBAAA,ZAEmB1D;AAFnB,AAGI,AAAMwD,oBAASC;;AAEf,oBAAUF;AAAV;;AAAA,AACE,gCAAA,/BAAMA;;AACN,OAACI,+BACC;AAAA,AACE,AAACO,cAAiB,4CAAKR;;AACvB,IAAA,AACE,OAAgB1D;UADlB,AAGI,AAACmE;;;;;AAbf,CAAA,AAAA,4GAAA,5GAASH,uHAgBOhE,MAAKyD;;AAhBrB,AAAA,gBAAA,ZAgBgBzD;AAhBhB,AAiBI,OAASwD,uBAASC;;;AAjBtB,CAAA,AAAA,6GAAA,7GAASO,wHAmBQhE,MAAK4D;;AAnBtB,AAAA,gBAAA,ZAmBiB5D;AAnBjB,AAAA;;;AAAA,CAAA,AAAA,4GAAA,5GAASgE,uHAoBOhE,MAAK4D;;AApBrB,AAAA,gBAAA,ZAoBgB5D;AApBhB,AAAA;;;AAAA,CAAA,AAAA,yGAAA,zGAASgE,oHAsBIhE,MAAK6D,OAAOH;;AAtBzB,AAAA,gBAAA,ZAsBa1D;AAtBb,AAuBI,AAACkE,cAAiB,4CAAKR;;AACvB,IAAA,AACE,gCAAA,/BAAMH;;AACN,CAACM,uCAAAA,yCAAAA;;AAID,OAAgB7D;UANlB,AASI,AAACmE;;;AAjCT,CAAA,AAAA,iEAAA,jEAASH;;AAAT,AAAA,YAAA,RAqCkBhE;AArClB,AAsCI,IAAA,AACE,IAAM8D,OAAK,AAASN;AAApB,AACE;AAAA,AACE,IAAMO,UAAQ,AAAOD;AAArB,AACE,GAAM,GAAK,AAAiBC;AAA5B,AACE,AAAU,AAAqBA;;AAI/B;;AALF;;;;UAJR,AAYI,gCAAA,/BAAMR;;;AAlDd,CAAA,6CAAA,7CAASS;AAAT,AAAA,AAAA;;;AAAA,CAAA,mDAAA,nDAASA;;AAAT,CAAA,sDAAA,tDAASA;;AAAT,CAAA,2DAAA,WAAA1E,mBAAAC,qBAAAC,9GAASwE;AAAT,AAAA,OAAAvE,iBAAAF,qBAAA;;;AAAA;;;yCAAA,zCAAS0E,0FAAgCV,sBAAgBC;AAAzD,AAAA,YAAAQ,kCAAyCT,sBAAgBC;;;AAAhDQ,AAoDT;;;qBAAA,AAAAI,YAAA,qBAAA,tDAAaC;AAEb,AAAA,uBAAA,+BAAAtI,tDAAMwI;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/I,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qDAAA,rDAAM+I,gEACFC,SAASC;AADb,AAEG,0DAAA,nDAACC,sFAAWF,SAASC;;;AAFxB,CAAA,qDAAA,rDAAMF,gEAGFI,KAAKH,SAASC;AAHlB,AAIG,IAAMG,iBACA,EAAaP,oBACX,KAAAL,kCAAA,MAA6B,KAAAa,SAC7B,KAAAxB,2BAAA,MAAsB,KAAAwB;IAExB3C,SACA,6CAAA,7CAACQ;IAEDoC,qBACA,KAAAC;AATN,AAWE,AAACC,sBAAO9C,OACN,0DAAA,wFAAA,uDAAA,sHAAA,mHAAA,8GAAA,4GAAA,mCAAA,sGAAA,mCAAA,2IAAA,gKAAA,gMAAA,8HAAA,mMAAA,oGAAA,xsDAAC+C,qDAAMN,2PAEUC,uHACCH,gHACFD,yZAGUM,iIACL,6CAAA,7CAACpC,iKACD,6CAAA,7CAACA,mMACC,KAAAqC,yHACA,6CAAA,7CAACrC;;AAG1B,GAAeZ;AAAf,AACE,AAACoD,mDAAMC,wCAAsBC,gBAAMX,WAAWvC;;AADhD;;AAGAA;;;AAjCL,CAAA,+CAAA,/CAAMqC;;AAAN,AAmCA,wBAAA,xBAAMc,wDAAUC,EAAEC;AAAlB,AACE,GAAI,MAAA,LAAMD;AAAV,0FAAcC;;AAAG,OAACC,6CAAKF,EAAEC;;;AAE3B,wBAAA,xBAAME,wDAAU9J,IAAI+J,MAAMC;AAA1B,AACE,0DAAA,8GAAA,jKAACC,+CAAOjK,4FAAY0J,yGAAUK,MAAMC;;AAEtC,yBAAA,zBAAME,0DAAW3D,OAAO4D,MAAMC;AAA9B,AAAA,GACS,kBAAAvH,jBAAUsH;AADnB;AAAA,AAAA,MAAA,KAAAtK,MAAA;;;AAAA,GAES,AAACwK,qBAAKD;AAFf;AAAA,AAAA,MAAA,KAAAvK,MAAA;;;AAGE,6EAAA,mFAAA,hKAAC0J,mDAAMhD,OAAO+D,kNAA4BH,cAAOC;;AACjD7D;;AAEF,sBAAA,tBAAMgE,oDAAQhE,OAAOwD,MAAMK;AAA3B,AACE,6EAAA,mFAAA,hKAACb,mDAAMhD,OAAO+D,4MAAyBP,cAAOK;;AAC9C7D","names":["p__12923","map__12926","cljs.core/--destructure-map","cljs.core.get","js/Error","shadow.grove/dispatch-up!","parent","env","ev-map","cljs.core/map?","cljs.core/qualified-keyword?","var_args","G__12935","shadow.grove/query-ident","ident","shadow.grove.impl/hook-query","query","config","G__12951","shadow.grove/query-root","p__12965","map__12966","shadow.grove/run-tx","runtime-ref","tx","shadow.grove.impl/process-event","shadow.grove/run-tx!","shadow.grove.runtime/ref?","map__12971","cljs.core/deref","scheduler","shadow.grove.protocols/run-now!","shadow.grove/unmount-root","root-el","temp__5804__auto__","root","G__12975","shadow.grove/watch","the-atom","shadow.grove.watch","old","new","path-or-fn","cljs.core/vector?","shadow.grove.ui.atoms/AtomWatch","cljs.core.get_in","G__12981","shadow.grove/env-watch","key-to-atom","shadow.grove.env_watch","path","default","cljs.core/Keyword","shadow.grove.ui.atoms/EnvWatch","shadow.grove/suspense","opts","vnode","shadow.grove.ui.suspense/SuspenseInit","shadow.grove/simple-seq","coll","render-fn","shadow.arborist.collections/simple-seq","shadow.grove/keyed-seq","key-fn","shadow.arborist.collections/keyed-seq","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.grove/TrackChange","shadow.grove/->TrackChange","val","trigger-fn","result","component-handle","this","ch","G__12992","G__12993","G__12994","new-track","next-val","prev-result","G__13000","G__13001","G__13002","cljs.core.not_EQ_","shadow.grove/track-change","shadow.grove/ref","cljs.core/volatile!","shadow.grove/effect","deps","callback","shadow.grove.components/EffectHook","shadow.grove/render-effect","shadow.grove/mount-effect","G__13025","shadow.grove/portal","body","shadow.grove.ui.portal/portal","js/document.body","ref-node","shadow.grove/default-error-handler","component","ex","js/goog.DEBUG","js/console.error","shadow.grove/RootEventTarget","shadow.grove/->RootEventTarget","rt-ref","e","origin","shadow.grove/make-root-env","event-target","env-init","cljs.core.reduce","init-fn","cljs.core.atom","shadow.grove/render*","root-node","temp__5802__auto__","active-root","shadow.grove.components/mark-all-dirty!","shadow.arborist/update!","new-env","new-root","shadow.arborist.dom_root","shadow.grove/render","shadow.grove/RootScheduler","shadow.grove/->RootScheduler","update-pending?","work-set","work-task","trigger","shadow.grove.runtime/next-tick","target","action","iter","current","shadow.grove/TracingRootScheduler","shadow.grove/->TracingRootScheduler","js/console.group","js/console.groupEnd","js/goog.define","shadow.grove/TRACE","G__13100","shadow.grove/prepare","data-ref","runtime-id","shadow.grove.prepare","init","root-scheduler","js/Set","active-queries-map","js/Map","cljs.core/reset!","cljs.core.assoc","cljs.core.swap_BANG_","shadow.grove.runtime/known-runtimes-ref","cljs.core/assoc","shadow.grove/vec-conj","x","y","cljs.core.conj","shadow.grove/queue-fx","fx-id","fx-val","cljs.core.update","shadow.grove/reg-event","ev-id","handler-fn","cljs.core/ifn?","cljs.core/assoc-in","shadow.grove/reg-fx"],"sourcesContent":["(ns shadow.grove\n  \"grove - a small wood or forested area (ie. trees)\n   a mini re-frame/fulcro hybrid. re-frame event styles + somewhat normalized db\"\n  (:require-macros [shadow.grove])\n  (:require\n    [goog.async.nextTick]\n    [shadow.arborist.protocols :as ap]\n    [shadow.arborist.common :as common]\n    [shadow.arborist.fragments] ;; util macro references this\n    [shadow.arborist :as sa]\n    [shadow.arborist.collections :as sc]\n    [shadow.grove.protocols :as gp]\n    [shadow.grove.runtime :as rt]\n    [shadow.grove.components :as comp]\n    [shadow.grove.ui.util :as util]\n    [shadow.grove.ui.suspense :as suspense]\n    [shadow.grove.ui.atoms :as atoms]\n    [shadow.grove.ui.portal :as portal]\n    [shadow.arborist.attributes :as a]\n    [shadow.grove.db :as db]\n    [shadow.grove.impl :as impl]\n    [shadow.css] ;; used in macro ns\n    ))\n\n(set! *warn-on-infer* false)\n\n(defn dispatch-up! [{::comp/keys [^not-native parent] :as env} ev-map]\n  {:pre [(map? env)\n         (map? ev-map)\n         (qualified-keyword? (:e ev-map))]}\n  ;; FIXME: should schedule properly when it isn't in event handler already\n  (gp/handle-event! parent ev-map nil env))\n\n(defn query-ident\n  ;; shortcut for ident lookups that can skip EQL queries\n  ([ident]\n   (impl/hook-query ident nil {}))\n  ;; EQL queries\n  ([ident query]\n   (impl/hook-query ident query {}))\n  ([ident query config]\n   (impl/hook-query ident query config)))\n\n(defn query-root\n  ([query]\n   (impl/hook-query nil query {}))\n  ([query config]\n   (impl/hook-query nil query config)))\n\n(defn run-tx\n  [{::rt/keys [runtime-ref] :as env} tx]\n  (impl/process-event runtime-ref tx env))\n\n(defn run-tx! [runtime-ref tx]\n  (assert (rt/ref? runtime-ref) \"expected runtime ref?\")\n  (let [{::rt/keys [scheduler]} @runtime-ref]\n    (gp/run-now! scheduler #(impl/process-event runtime-ref tx nil) ::run-tx!)))\n\n(defn unmount-root [^js root-el]\n  (when-let [^sa/TreeRoot root (.-sg$root root-el)]\n    (.destroy! root true)\n    (js-delete root-el \"sg$root\")\n    (js-delete root-el \"sg$env\")))\n\n(defn watch\n  \"hook that watches an atom and triggers an update on change\n   accepts an optional path-or-fn arg that can be used for quick diffs\n\n   (watch the-atom [:foo])\n   (watch the-atom (fn [old new] ...))\"\n  ([the-atom]\n   (watch the-atom (fn [old new] new)))\n  ([the-atom path-or-fn]\n   (if (vector? path-or-fn)\n     (atoms/AtomWatch. the-atom (fn [old new] (get-in new path-or-fn)) nil nil)\n     (atoms/AtomWatch. the-atom path-or-fn nil nil))))\n\n(defn env-watch\n  ([key-to-atom]\n   (env-watch key-to-atom [] nil))\n  ([key-to-atom path]\n   (env-watch key-to-atom path nil))\n  ([key-to-atom path default]\n   {:pre [(keyword? key-to-atom)\n          (vector? path)]}\n   (atoms/EnvWatch. key-to-atom path default nil nil nil)))\n\n(defn suspense [opts vnode]\n  (suspense/SuspenseInit. opts vnode))\n\n(defn simple-seq [coll render-fn]\n  (sc/simple-seq coll render-fn))\n\n(defn keyed-seq [coll key-fn render-fn]\n  (sc/keyed-seq coll key-fn render-fn))\n\n(deftype TrackChange\n  [^:mutable val\n   ^:mutable trigger-fn\n   ^:mutable result\n   ^:mutable ^not-native component-handle]\n\n  gp/IHook\n  (hook-init! [this ch]\n    (set! component-handle ch)\n    (set! result (trigger-fn (gp/get-component-env component-handle) nil val)))\n\n  (hook-ready? [this] true)\n  (hook-value [this] result)\n  (hook-update! [this] false)\n\n  (hook-deps-update! [this ^TrackChange new-track]\n    (let [next-val (.-val new-track)\n          prev-result result]\n\n      (set! trigger-fn (.-trigger-fn new-track))\n      (set! result (trigger-fn (gp/get-component-env component-handle) val next-val))\n      (set! val next-val)\n\n      (not= result prev-result)))\n\n  (hook-destroy! [this]\n    ))\n\n(defn track-change [val trigger-fn]\n  (TrackChange. val trigger-fn nil nil))\n\n;; using volatile so nobody gets any ideas about add-watch\n;; pretty sure that would cause havoc on the entire rendering\n;; if sometimes does work immediately on set before render can even complete\n(defn ref []\n  (volatile! nil))\n\n(defn effect\n  \"calls (callback env) after render when provided deps argument changes\n   callback can return a function which will be called if cleanup is required\"\n  [deps callback]\n  (comp/EffectHook. deps callback nil true nil))\n\n(defn render-effect\n  \"call (callback env) after every render\"\n  [callback]\n  (comp/EffectHook. :render callback nil true nil))\n\n(defn mount-effect\n  \"call (callback env) on mount once\"\n  [callback]\n  (comp/EffectHook. :mount callback nil true nil))\n\n;; FIXME: does this ever need to take other options?\n(defn portal\n  ([body]\n   (portal/portal js/document.body body))\n  ([ref-node body]\n   (portal/portal ref-node body)))\n\n(defn default-error-handler [component ex]\n  ;; FIXME: this would be the only place there component-name is accessed\n  ;; without this access closure removes it completely in :advanced which is nice\n  ;; ok to access in debug builds though\n  (if ^boolean js/goog.DEBUG\n    (js/console.error (str \"An Error occurred in \" (.. component -config -component-name) \", it will not be rendered.\") component)\n    (js/console.error \"An Error occurred in Component, it will not be rendered.\" component))\n  (js/console.error ex))\n\n(deftype RootEventTarget [rt-ref]\n  gp/IHandleEvents\n  (handle-event! [this ev-map e origin]\n    ;; dropping DOM event since that should have been handled elsewhere already\n    ;; or it wasn't relevant to begin with\n    (impl/process-event rt-ref ev-map origin)))\n\n(defn- make-root-env\n  [rt-ref root-el]\n\n  ;; FIXME: have a shared root scheduler rt-ref\n  ;; multiple roots should schedule in some way not indepdendently\n  (let [event-target\n        (RootEventTarget. rt-ref)\n\n        env-init\n        (::rt/env-init @rt-ref)]\n\n    (reduce\n      (fn [env init-fn]\n        (init-fn env))\n\n      ;; base env, using init-fn to customize\n      {::comp/scheduler (::rt/scheduler @rt-ref)\n       ::comp/event-target event-target\n       ::suspense-keys (atom {})\n       ::rt/root-el root-el\n       ::rt/runtime-ref rt-ref\n       ;; FIXME: get this from rt-ref?\n       ::comp/error-handler default-error-handler}\n\n      env-init)))\n\n(defn render* [rt-ref ^js root-el root-node]\n  {:pre [(rt/ref? rt-ref)]}\n  (if-let [active-root (.-sg$root root-el)]\n    (do (when ^boolean js/goog.DEBUG\n          (comp/mark-all-dirty!))\n\n        ;; FIXME: somehow verify that env hasn't changed\n        ;; env is supposed to be immutable once mounted, but someone may still modify rt-ref\n        ;; but since env is constructed on first mount we don't know what might have changed\n        ;; this is really only a concern for hot-reload, apps only call this once and never update\n\n        (sa/update! active-root root-node)\n        ::updated)\n\n    (let [new-env (make-root-env rt-ref root-el)\n          new-root (sa/dom-root root-el new-env)]\n      (sa/update! new-root root-node)\n      (set! (.-sg$root root-el) new-root)\n      (set! (.-sg$env root-el) new-env)\n      ::started)))\n\n(defn render [rt-ref ^js root-el root-node]\n  {:pre [(rt/ref? rt-ref)]}\n  (gp/run-now! ^not-native (::rt/scheduler @rt-ref) #(render* rt-ref root-el root-node) ::render))\n\n\n(deftype RootScheduler [^:mutable update-pending? work-set]\n  gp/IScheduleWork\n  (schedule-work! [this work-task trigger]\n    (.add work-set work-task)\n\n    (when-not update-pending?\n      (set! update-pending? true)\n      (rt/next-tick #(.process-work! this))))\n\n  (unschedule! [this work-task]\n    (.delete work-set work-task))\n\n  (did-suspend! [this target])\n  (did-finish! [this target])\n\n  (run-now! [this action trigger]\n    (set! update-pending? true)\n    (action)\n    ;; work must happen immediately since (action) may need the DOM event that triggered it\n    ;; any delaying the work here may result in additional paint calls (making things slower overall)\n    ;; if things could have been async the work should have been queued as such and not ended up here\n    (.process-work! this))\n\n  Object\n  (process-work! [this]\n    (try\n      (let [iter (.values work-set)]\n        (loop []\n          (let [current (.next iter)]\n            (when (not ^boolean (.-done current))\n              (gp/work! ^not-native (.-value current))\n\n              ;; should time slice later and only continue work\n              ;; until a given time budget is consumed\n              (recur)))))\n\n      (finally\n        (set! update-pending? false)))))\n\n;; FIXME: make this delegate to the above, don't duplicate the code\n(deftype TracingRootScheduler [^:mutable update-pending? work-set]\n  gp/IScheduleWork\n  (schedule-work! [this work-task trigger]\n    (.add work-set work-task)\n\n    (when-not update-pending?\n      (set! update-pending? true)\n      (rt/next-tick\n        (fn []\n          (js/console.group (str trigger))\n          (try\n            (.process-work! this)\n            (finally\n              (js/console.groupEnd)))\n          ))))\n\n  (unschedule! [this work-task]\n    (.delete work-set work-task))\n\n  (did-suspend! [this target])\n  (did-finish! [this target])\n\n  (run-now! [this action trigger]\n    (js/console.group (str trigger))\n    (try\n      (set! update-pending? true)\n      (action)\n      ;; work must happen immediately since (action) may need the DOM event that triggered it\n      ;; any delaying the work here may result in additional paint calls (making things slower overall)\n      ;; if things could have been async the work should have been queued as such and not ended up here\n      (.process-work! this)\n\n      (finally\n        (js/console.groupEnd))\n      ))\n\n  Object\n  (process-work! [this]\n    (try\n      (let [iter (.values work-set)]\n        (loop []\n          (let [current (.next iter)]\n            (when (not ^boolean (.-done current))\n              (gp/work! ^not-native (.-value current))\n\n              ;; should time slice later and only continue work\n              ;; until a given time budget is consumed\n              (recur)))))\n\n      (finally\n        (set! update-pending? false)))))\n\n(goog-define TRACE false)\n\n(defn prepare\n  ([data-ref runtime-id]\n   (prepare {} data-ref runtime-id))\n  ([init data-ref runtime-id]\n   (let [root-scheduler\n         (if ^boolean TRACE\n           (TracingRootScheduler. false (js/Set.))\n           (RootScheduler. false (js/Set.)))\n\n         rt-ref\n         (atom nil)\n\n         active-queries-map\n         (js/Map.)]\n\n     (reset! rt-ref\n       (assoc init\n         ::rt/rt true\n         ::rt/scheduler root-scheduler\n         ::rt/runtime-id runtime-id\n         ::rt/data-ref data-ref\n         ::rt/event-config {}\n         ::rt/fx-config {}\n         ::rt/active-queries-map active-queries-map\n         ::rt/key-index-seq (atom 0)\n         ::rt/key-index-ref (atom {})\n         ::rt/query-index-map (js/Map.)\n         ::rt/query-index-ref (atom {})\n         ::rt/env-init []))\n\n     (when ^boolean js/goog.DEBUG\n       (swap! rt/known-runtimes-ref assoc runtime-id rt-ref))\n\n     rt-ref)))\n\n(defn vec-conj [x y]\n  (if (nil? x) [y] (conj x y)))\n\n(defn queue-fx [env fx-id fx-val]\n  (update env ::rt/fx vec-conj [fx-id fx-val]))\n\n(defn reg-event [rt-ref ev-id handler-fn]\n  {:pre [(keyword? ev-id)\n         (ifn? handler-fn)]}\n  (swap! rt-ref assoc-in [::rt/event-config ev-id] handler-fn)\n  rt-ref)\n\n(defn reg-fx [rt-ref fx-id handler-fn]\n  (swap! rt-ref assoc-in [::rt/fx-config fx-id] handler-fn)\n  rt-ref)\n"]}