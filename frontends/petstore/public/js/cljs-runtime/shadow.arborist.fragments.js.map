{"version":3,"sources":["shadow/arborist/fragments.cljs"],"mappings":"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","names":["shadow.arborist.fragments/fragment-id","s","shadow.arborist.fragments/array-equiv","a","b","al","bl","i","cljs.core._EQ_","shadow.arborist.fragments/svg-ns","shadow.arborist.fragments/svg-element-fn","type","js/document.createElementNS","shadow.arborist.fragments/dom-element-fn","js/document.createElement","shadow.arborist.fragments/get-element-fn","env","element-ns","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.arborist.fragments/FragmentCode","shadow.arborist.fragments/->FragmentCode","create-fn","mount-fn","update-fn","destroy-fn","cljs.core/PROTOCOL_SENTINEL","shadow.arborist.fragments/ManagedFragment","shadow.arborist.fragments/->ManagedFragment","code","vals","marker","exports","dom-entered?","this","parent","anchor","item","next","and__5043__auto__","shadow.arborist.fragments/fragment-init?","nvals","dom-remove?","shadow.arborist.fragments/FragmentInit","shadow.arborist.fragments/->FragmentInit","_","element-fn","G__11695","cljs.core.assoc","shadow.arborist.common.dom_marker","other","thing","shadow.arborist.fragments/has-no-lazy-seqs?","p1__11720#","cljs.core/every?","cljs.core/LazySeq","shadow.arborist.fragments/fragment-init","js/Error","shadow.arborist.fragments/known-fragments","shadow.arborist.fragments/reset-known-fragments!","shadow.arborist.fragments/create-text","text","js/document.createTextNode","shadow.arborist.fragments/set-attr","node","key","oval","nval","shadow.arborist.attributes/set-attr","shadow.arborist.fragments/append-child","child","shadow.arborist.fragments/managed-create","shadow.arborist.protocols/as-managed","shadow.arborist.fragments/managed-append","cljs.core/native-satisfies?","shadow.arborist.protocols/IManaged","cljs.core.ex_info","shadow.arborist.protocols/dom-insert","shadow.arborist.fragments/managed-insert","component","shadow.arborist.fragments/managed-remove","shadow.arborist.protocols/destroy!","shadow.arborist.fragments/update-managed","fragment","nodes","idx","el","shadow.arborist.common/replace-managed","shadow.arborist.protocols/dom-entered!","shadow.arborist.fragments/update-attr","attr","cljs.core.not_EQ_","shadow.arborist.fragments/clear-attr","shadow.arborist.fragments/dom-insert-before","shadow.arborist.fragments/dom-remove","shadow.arborist.fragments/css-join","from-el","from-attrs"],"sourcesContent":["(ns shadow.arborist.fragments\n  (:require-macros [shadow.arborist.fragments])\n  (:require\n    [shadow.arborist.protocols :as p]\n    [shadow.arborist.attributes :as a]\n    [shadow.arborist.common :as common]))\n\n(defn fragment-id\n  ;; https://github.com/google/closure-compiler/wiki/Id-Generator-Annotations\n  {:jsdoc [\"@idGenerator {consistent}\"]}\n  [s]\n  s)\n\n(defn array-equiv [a b]\n  (let [al (alength a)\n        bl (alength b)]\n    ;; FIXME: identical? wouldn't work in CLJ, but = is slower in CLJS\n    (when (identical? al bl)\n      (loop [i 0]\n        (if (identical? i al)\n          true\n          (when (= (aget a i) (aget b i))\n            (recur (inc i))))))))\n\n(def svg-ns \"http://www.w3.org/2000/svg\")\n\n;; FIXME: maybe take document from env, easier to mock out later\n(defn svg-element-fn [^Keyword type]\n  (js/document.createElementNS svg-ns (.-name type)))\n\n(defn dom-element-fn [^Keyword type]\n  (js/document.createElement (.-name type)))\n\n(defn get-element-fn [env element-ns]\n  (if (identical? element-ns svg-ns)\n    svg-element-fn\n    dom-element-fn))\n\n(deftype FragmentCode [create-fn mount-fn update-fn destroy-fn])\n\n(declare ^{:arglists '([thing])} fragment-init?)\n\n(deftype ManagedFragment\n  [env\n   ^FragmentCode code\n   ^:mutable vals\n   marker\n   exports\n   ^boolean ^:mutable dom-entered?]\n\n  p/IManaged\n  (dom-first [this] marker)\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent marker anchor)\n    (. code (mount-fn exports parent anchor)))\n\n  (dom-entered! [this]\n    ;; FIXME: maybe create fn in macro that saves traversing exports\n    ;; exports may contain many regular dom nodes and those don't need this\n    ;; but this is called once in the entire lifecycle so this should be fine\n    (set! dom-entered? true)\n    (.forEach exports\n      (fn [item]\n        (when (implements? p/IManaged item)\n          (p/dom-entered! item)\n          ))))\n\n  (supports? [this ^FragmentInit next]\n    (and (fragment-init? next)\n         (identical? code (.-code next))))\n\n  (dom-sync! [this ^FragmentInit next]\n    (let [nvals (.-vals next)]\n      (.. code (update-fn this env exports vals nvals))\n      (set! vals nvals))\n    :synced)\n\n  (destroy! [this ^boolean dom-remove?]\n    (when dom-remove?\n      (.remove marker))\n\n    (. code (destroy-fn env exports vals dom-remove?))))\n\n(deftype FragmentInit [vals element-ns ^FragmentCode code]\n  p/IConstruct\n  (as-managed [_ env]\n    (let [element-fn (if (nil? element-ns) (:dom/element-fn env) (get-element-fn env element-ns))\n          env (cond-> env (some? element-ns) (assoc :dom/element-fn element-fn :dom/svg true))\n          ;; create-fn creates all necessary nodes but only exports those that will be accessed later in an array\n          ;; this might be faster if create-fn just closed over locals and returns the callbacks to be used later\n          ;; svelte does this but CLJS doesn't allow to set! locals so it would require ugly js* code to make it work\n          ;; didn't benchmark but the array variant shouldn't be that much slower. maybe even faster since\n          ;; the functions don't need to be recreated for each fragment instance\n          exports (.. code (create-fn env vals element-fn))]\n      (ManagedFragment. env code vals (common/dom-marker env) exports false)))\n\n  IEquiv\n  (-equiv [this ^FragmentInit other]\n    (and (instance? FragmentInit other)\n         (identical? code (. other -code))\n         (array-equiv vals (.-vals other)))))\n\n(defn fragment-init? [thing]\n  (instance? FragmentInit thing))\n\n(defn has-no-lazy-seqs? [vals]\n  (every? #(not (instance? cljs.core/LazySeq %)) vals))\n\n(defn fragment-init [vals element-ns code]\n  (assert (has-no-lazy-seqs? vals)  \"no lazy seqs allowed in fragments\")\n  (FragmentInit. vals element-ns code))\n\n;; for fallback code, relying on registry\n(def ^{:jsdoc [\"@dict\"]} known-fragments #js {})\n\n(defn reset-known-fragments! []\n  (set! known-fragments #js {}))\n\n(defn create-text\n  ;; {:jsdoc [\"@noinline\"]}\n  [env text]\n  (js/document.createTextNode text))\n\n(defn set-attr [env node key oval nval]\n  (a/set-attr env node key oval nval))\n\n\n(defn append-child\n  ;; {:jsdoc [\"@noinline\"]}\n  [parent child]\n  (.appendChild parent child))\n\n(defn managed-create [env other]\n  ;; FIXME: validate that return value implements the proper protocols\n  (p/as-managed other env))\n\n;; called by macro generated code\n(defn managed-append [parent other]\n  (when-not (satisfies? p/IManaged other)\n    (throw (ex-info \"cannot append-managed\" {:parent parent :other other})))\n  (p/dom-insert other parent nil))\n\n(defn managed-insert [component parent anchor]\n  (p/dom-insert component parent anchor))\n\n(defn managed-remove [component dom-remove?]\n  (p/destroy! component dom-remove?))\n\n;; called by macro generated code\n(defn update-managed [^ManagedFragment fragment env nodes idx oval nval]\n  ;; not comparing oval/nval because impls can do that if needed\n  (let [^not-native el (aget nodes idx)]\n    (if ^boolean (p/supports? el nval)\n      (p/dom-sync! el nval)\n      (let [next (common/replace-managed env el nval)]\n        (aset nodes idx next)\n        (when ^boolean (.-dom-entered? fragment)\n          (p/dom-entered! next))))))\n\n;; called by macro generated code\n(defn update-attr [env nodes idx ^not-native attr oval nval]\n  ;; FIXME: should maybe move the comparisons to the actual impls?\n  (when (not= oval nval)\n    (let [el (aget nodes idx)]\n      (set-attr env el attr oval nval))))\n\n(defn clear-attr [env nodes idx attr oval]\n  (let [node (aget nodes idx)]\n    (a/set-attr env node attr oval nil)))\n\n;; just so the macro doesn't have to use dot interop\n;; will likely be inlined by closure anyways\n(defn dom-insert-before [^js parent node anchor]\n  (.insertBefore parent node anchor))\n\n(defn dom-remove [^js node]\n  (.remove node))\n\n(defn css-join [from-el from-attrs]\n  [from-el from-attrs])\n\n"]}