{"version":3,"sources":["shadow/arborist/attributes.cljs"],"mappings":"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","names":["js/shadow","js/shadow.arborist","js/shadow.arborist.attributes","js/shadow.arborist.attributes.attr-handlers","shadow.arborist.attributes/attr-handlers","shadow.arborist.attributes/vec->class","v","cljs.core.reduce","s","c","cljs.core/not","shadow.arborist.attributes/map->class","m","cljs.core/reduce-kv","k","cljs.core/Keyword","js/Error","shadow.arborist.attributes/add-attr","kw","handler","cljs.core/fn?","shadow.arborist.attributes.goog$module$goog$object.set","shadow.arborist.attributes/dom-attribute?","name","clojure.string/starts-with?","shadow.arborist.attributes/set-dom-attribute","node","prop-name","nval","shadow.arborist.attributes/set-style-property","shadow.arborist.attributes/wrap-stop!","target","e","shadow.arborist.attributes/wrap-stop","shadow.arborist.attributes/wrap-prevent-default","shadow.arborist.attributes/make-attr-handler","key","prop-ns","env","oval","cljs.core.ex_info","event","cljs.core.subs","ev-key","temp__5804__auto__","ev-fn","shadow.arborist.attributes.goog$module$goog$object.get","ev-handler","js/goog.DEBUG","m?","cljs.core/map?","dom-event","ev-opts","map__11461","cljs.core/--destructure-map","cljs.core.get","debounce","throttle","rate-limit","once","passive","capture","signal","stop!","stop","prevent-default","G__11468","goog.functions/debounce","prop","goog.string/toCamelCase","shadow.arborist.attributes/set-attr","_","sval","cljs.core/vector?","temp__5802__auto__","cljs.core/vreset!","shadow.arborist.attributes/merge-attrs","old","new","cljs.core.not_EQ_","cljs.core/contains?","shadow.arborist.attributes/set-attrs","attrs","val"],"sourcesContent":["(ns shadow.arborist.attributes\n  (:require\n    [goog.object :as gobj]\n    [goog.string :as gstr]\n    [goog.functions :as gfn]\n    [clojure.string :as str]\n    [shadow.arborist.protocols :as p]\n    ))\n\n(defonce attr-handlers #js {})\n\n(defn vec->class [v]\n  (reduce\n    (fn [s c]\n      (cond\n        (not c)\n        s\n\n        (not s)\n        c\n\n        :else\n        (str s \" \" c)))\n    nil\n    v))\n\n(defn map->class [m]\n  (reduce-kv\n    (fn [s k v]\n      (cond\n        (not v)\n        s\n\n        (not s)\n        (if (keyword? k) (-name k) k)\n\n        :else\n        (str s \" \" (if (keyword? k) (-name k) k))))\n    nil\n    m))\n\n(defn add-attr [^Keyword kw handler]\n  {:pre [(keyword? kw)\n         (fn? handler)]}\n  (gobj/set attr-handlers (.-fqn kw) handler))\n\n(defn dom-attribute? [name]\n  (or (str/starts-with? name \"data-\")\n      (str/starts-with? name \"aria-\")))\n\n(defn set-dom-attribute [^js node prop-name nval]\n  (cond\n    (string? nval)\n    (.setAttribute node prop-name nval)\n\n    (number? nval)\n    (.setAttribute node prop-name nval)\n\n    (nil? nval)\n    (.removeAttribute node prop-name)\n\n    (false? nval)\n    (.removeAttribute node prop-name)\n\n    ;; convention according to\n    ;; https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute\n    ;; looks a little bit better in the inspector, no clue if this actually\n    ;; makes a difference anywhere\n    ;; <div data-thing> vs <div data-thing=\"true\">\n    (true? nval)\n    (.setAttribute node prop-name \"\")\n\n    :else\n    (.setAttribute node prop-name nval)))\n\n(defn set-style-property [^js node prop-name nval]\n  (if (nil? nval)\n    (.. node -style (removeProperty prop-name))\n    (.. node -style (setProperty prop-name nval))))\n\n(defn wrap-stop! [^function target]\n  (fn [^js e]\n    (.stopPropagation e)\n    (.preventDefault e)\n    (target e)))\n\n(defn wrap-stop [^function target]\n  (fn [^js e]\n    (.stopPropagation e)\n    (target e)))\n\n(defn wrap-prevent-default [^function target]\n  (fn [^js e]\n    (.preventDefault e)\n    (target e)))\n\n(defn make-attr-handler [^Keyword key]\n  (let [prop-name (.-name key)\n        prop-ns (.-ns key)]\n\n    (cond\n      (dom-attribute? prop-name)\n      (fn [env node oval nval]\n        (set-dom-attribute node prop-name nval))\n\n      (identical? \"style\" prop-ns)\n      (fn [env node oval nval]\n        (set-style-property node prop-name nval))\n\n      prop-ns\n      (throw\n        (ex-info\n          (str \"namespaced attribute without setter: \" key)\n          {:attr key}))\n\n      ;; :on-* convention for events\n      ;; only handled when there is an actual handler for it registered in the env\n      ;; which will usually be components which I don't want to reference here\n      ;; but is common enough that it should also be extensible somewhat\n      (str/starts-with? prop-name \"on-\")\n      (let [event (subs prop-name 3)\n            ev-key (str \"__shadow$\" event)]\n\n        (fn [env node oval nval]\n          (when-let [ev-fn (gobj/get node ev-key)]\n            (.removeEventListener node event ev-fn))\n\n          ;; FIXME: should maybe allow to just use a function as value\n          ;; skipping all the ev-handler logic and just calling it as a regular callback\n          (when (some? nval)\n            (let [^not-native ev-handler (::p/dom-event-handler env)]\n\n              (when-not ev-handler\n                (throw (ex-info \"missing dom-event-handler!\" {:env env :event event :node node :value nval})))\n\n              (when ^boolean js/goog.DEBUG\n                ;; validate value now in dev so it fails on construction\n                ;; slightly better experience than firing on-event\n                ;; easier to miss in tests and stuff that don't test particular events\n                (p/validate-dom-event-value! ev-handler env event nval))\n\n              (let [m?\n                    (map? nval)\n\n                    ev-fn\n                    (fn [dom-event]\n                      (p/handle-dom-event! ev-handler env event nval dom-event))\n\n                    ev-opts\n                    #js {}\n\n                    ev-fn\n                    (if-not m?\n                      ev-fn\n                      (let [{:e/keys\n                             [debounce\n                              throttle\n                              rate-limit\n                              once\n                              passive\n                              capture\n                              signal\n                              stop!\n                              stop\n                              prevent-default]}\n                            nval]\n\n                        ;; FIXME: need to track if once already happened. otherwise may re-attach and actually fire more than once\n                        ;; but it should be unlikely to have a changing val with :e/once?\n                        (when once\n                          (gobj/set ev-opts \"once\" true))\n\n                        (when passive\n                          (gobj/set ev-opts \"passive\" true))\n\n                        (when capture\n                          (gobj/set ev-opts \"capture\" true))\n\n                        (when signal\n                          (gobj/set ev-opts \"signal\" true))\n\n                        ;; FIXME: should these be exclusive?\n                        (cond-> ev-fn\n                          debounce\n                          (gfn/debounce debounce)\n\n                          throttle\n                          (gfn/debounce throttle)\n\n                          rate-limit\n                          (gfn/debounce rate-limit)\n\n                          ;; FIXME: would it be better to default these to true?\n                          prevent-default\n                          (wrap-prevent-default)\n\n                          stop\n                          (wrap-stop)\n\n                          stop!\n                          (wrap-stop!)\n                          )))]\n\n                ;; FIXME: ev-opts are not supported by all browsers\n                ;; closure lib probably has something to handle that\n                (.addEventListener node event ev-fn ev-opts)\n\n                (gobj/set node ev-key ev-fn))))))\n\n      :else\n      (let [prop (gstr/toCamelCase prop-name)]\n        (fn [env node oval nval]\n          ;; FIXME: must all attributes in svg elements go with setAttribute?\n          ;; can you make web components for svg elements?\n          ;; seems to break if we try to go with node.width=24 instead of .setAttribute\n          (if ^boolean (:dom/svg env)\n            (set-dom-attribute node (.-name key) nval)\n            (gobj/set node prop nval)\n            ))))))\n\n;; quasi multi-method. not using multi-method because it does too much stuff I don't accidentally\n;; want to run into (eg. keyword inheritance). while that might be interesting for some cases\n;; it may also blow up badly. also this is less code in :advanced.\n(defn set-attr [env ^js node ^Keyword key oval nval]\n  {:pre [(keyword? key)]}\n  (let [^function handler (gobj/get attr-handlers (.-fqn key))]\n    (if ^boolean handler\n      (handler env node oval nval)\n\n      ;; create and store attr handler for later\n      ;; avoids doing the same kind of work over and over to figure out what a key meant\n      (let [^function handler (make-attr-handler key)]\n        (gobj/set attr-handlers (.-fqn key) handler)\n        (handler env node oval nval)\n        ))))\n\n;; special case \"for\" -> \"htmlFor\"\n(add-attr :for\n  (fn [env ^js node oval nval]\n    (set! node -htmlFor nval)))\n\n(add-attr :style\n  (fn [env ^js node oval nval]\n    (cond\n      (and (nil? oval) (nil? nval))\n      :empty\n\n      (map? nval)\n      (reduce-kv\n        (fn [_ ^not-native k v]\n          (set-style-property node (-name k) v))\n        nil\n        nval)\n\n      (string? nval)\n      (set! (.. node -style -cssText) nval)\n\n      ;; nil, undefined\n      (not (some? nval))\n      (set! (.. node -style -cssText) \"\")\n\n      :else\n      (throw (ex-info \"invalid value for :style\" {:node node :val nval}))\n      )))\n\n(add-attr :class\n  (fn [^not-native env ^js node oval nval]\n    (let [sval\n          (cond\n            (nil? nval)\n            \"\"\n\n            (string? nval)\n            nval\n\n            ;; FIXME: classlist?\n            (vector? nval)\n            (if-let [s (vec->class nval)]\n              s\n              \"\")\n\n            (map? nval)\n            (if-let [s (map->class nval)]\n              s\n              \"\")\n\n            :else\n            (throw (ex-info \"invalid value for :class\" {:node node :val nval})))]\n\n      ;; setting className directly doesn't work for SVG elements since its a SVGAnimatedString\n      ;; FIXME: could set baseVal directly?\n      (if ^boolean (:dom/svg env)\n        (.setAttribute node \"class\" sval)\n        (set! node -className sval)))))\n\n(add-attr :dom/ref\n  (fn [env node oval nval]\n    (cond\n      (nil? nval)\n      (vreset! oval nil)\n\n      (some? nval)\n      (vreset! nval node)\n\n      :else\n      nil)))\n\n(defn merge-attrs\n  \"merge attributes from old/new attr maps\"\n  [env node old new]\n  (reduce-kv\n    (fn [_ key nval]\n      (let [oval (get old key)]\n        (when (not= nval oval)\n          (set-attr env node key oval nval))))\n    nil\n    new)\n\n  ;; {:a 1 :x 1} vs {:a 1}\n  ;; {:a 1} vs {:b 1}\n  ;; should be uncommon but need to unset props that are no longer used\n  (reduce-kv\n    (fn [_ key oval]\n      (when-not (contains? new key)\n        (set-attr env node key oval nil)))\n    nil\n    old))\n\n(defn set-attrs\n  \"initial set attributes from key/val map\"\n  [env node attrs]\n  (reduce-kv\n    (fn [_ key val]\n      (set-attr env node key nil val))\n    nil\n    attrs))\n\n\n\n\n"]}