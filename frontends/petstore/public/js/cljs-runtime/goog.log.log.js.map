{
"version":3,
"file":"goog.log.log.js",
"lineCount":349,
"mappings":"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",
"sources":["goog/log/log.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Basic strippable logging definitions.\n * @see http://go/closurelogging\n */\n\ngoog.provide('goog.log');\ngoog.provide('goog.log.Level');\ngoog.provide('goog.log.LogBuffer');\ngoog.provide('goog.log.LogRecord');\ngoog.provide('goog.log.Logger');\n\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\n\n\n/**\n * A message value that can be handled by a goog.log.Logger.\n *\n * Functions are treated like callbacks, but are only called when the event's\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n *\n * @typedef {string|function(): string}\n */\ngoog.log.Loggable;\n\n/** @define {boolean} Whether logging is enabled. */\ngoog.log.ENABLED = goog.define('goog.log.ENABLED', goog.debug.LOGGING_ENABLED);\n\n/** @const */\ngoog.log.ROOT_LOGGER_NAME = '';\n\n\n// TODO(user): Make goog.log.Level an enum.\n/**\n * The goog.log.Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging goog.log.Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * <p>\n * Clients should normally use the predefined goog.log.Level constants such\n * as goog.log.Level.SEVERE.\n * <p>\n * The levels in descending order are:\n * <ul>\n * <li>SEVERE (highest value)\n * <li>WARNING\n * <li>INFO\n * <li>CONFIG\n * <li>FINE\n * <li>FINER\n * <li>FINEST  (lowest value)\n * </ul>\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @final\n */\ngoog.log.Level = class Level {\n  /**\n   * @param {string} name The name of the level.\n   * @param {number} value The numeric value of the level.\n   */\n  constructor(name, value) {\n    /**\n     * The name of the level\n     * @type {string}\n     * @const\n     */\n    this.name = name;\n\n    /**\n     * The numeric value of the level\n     * @type {number}\n     */\n    this.value = value;\n  }\n\n  /**\n   * @return {string} String representation of the logger level.\n   * @override\n   */\n  toString() {\n    return this.name;\n  }\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to <CODE>Infinity</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.OFF = new goog.log.Level('OFF', Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to <CODE>1200</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.SHOUT = new goog.log.Level('SHOUT', 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to <CODE>1000</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.SEVERE = new goog.log.Level('SEVERE', 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to <CODE>900</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.WARNING = new goog.log.Level('WARNING', 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to <CODE>800</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.INFO = new goog.log.Level('INFO', 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to <CODE>700</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.CONFIG = new goog.log.Level('CONFIG', 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to <CODE>500</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.FINE = new goog.log.Level('FINE', 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to <CODE>400</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.FINER = new goog.log.Level('FINER', 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to <CODE>300</CODE>.\n * @type {!goog.log.Level}\n */\n\ngoog.log.Level.FINEST = new goog.log.Level('FINEST', 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to <CODE>0</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.ALL = new goog.log.Level('ALL', 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array<!goog.log.Level>}\n * @final\n */\ngoog.log.Level.PREDEFINED_LEVELS = [\n  goog.log.Level.OFF, goog.log.Level.SHOUT, goog.log.Level.SEVERE,\n  goog.log.Level.WARNING, goog.log.Level.INFO, goog.log.Level.CONFIG,\n  goog.log.Level.FINE, goog.log.Level.FINER, goog.log.Level.FINEST,\n  goog.log.Level.ALL\n];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {?Object}\n * @private\n */\ngoog.log.Level.predefinedLevelsCache_ = null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n * @private\n */\ngoog.log.Level.createPredefinedLevelsCache_ = function() {\n  goog.log.Level.predefinedLevelsCache_ = {};\n  for (let i = 0, level; level = goog.log.Level.PREDEFINED_LEVELS[i]; i++) {\n    goog.log.Level.predefinedLevelsCache_[level.value] = level;\n    goog.log.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {!goog.log.Level|null} The level, or null if none found.\n */\ngoog.log.Level.getPredefinedLevel = function(name) {\n  if (!goog.log.Level.predefinedLevelsCache_) {\n    goog.log.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.log.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level <= #value.\n * @param {number} value goog.log.Level value.\n * @return {!goog.log.Level|null} The level, or null if none found.\n */\ngoog.log.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.log.Level.predefinedLevelsCache_) {\n    goog.log.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in /** @type {!Object} */ (goog.log.Level.predefinedLevelsCache_)) {\n    return goog.log.Level.predefinedLevelsCache_[value];\n  }\n\n  for (let i = 0; i < goog.log.Level.PREDEFINED_LEVELS.length; ++i) {\n    let level = goog.log.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/** @interface */\ngoog.log.Logger = class Logger {\n  /**\n   * Gets the name of the Logger.\n   * @return {string}\n   * @public\n   */\n  getName() {}\n};\n\n\n/**\n * Only for compatibility with goog.debug.Logger.Level, which is how many users\n * access Level.\n * TODO(user): Remove these definitions.\n * @final\n */\ngoog.log.Logger.Level = goog.log.Level;\n\n\n/**\n * A buffer for log records. The purpose of this is to improve\n * logging performance by re-using old objects when the buffer becomes full and\n * to eliminate the need for each app to implement their own log buffer. The\n * disadvantage to doing this is that log handlers cannot maintain references to\n * log records and expect that they are not overwriten at a later point.\n * @final\n */\ngoog.log.LogBuffer = class LogBuffer {\n  /**\n   * @param {number=} capacity The capacity of this LogBuffer instance.\n   */\n  constructor(capacity) {\n    /**\n     * The buffer's capacity.\n     * @type {number}\n     * @private\n     */\n    this.capacity_ =\n        typeof capacity === 'number' ? capacity : goog.log.LogBuffer.CAPACITY;\n\n    /**\n     * The array to store the records.\n     * @type {!Array<!goog.log.LogRecord|undefined>}\n     * @private\n     */\n    this.buffer_;\n\n    /**\n     * The index of the most recently added record, or -1 if there are no\n     * records.\n     * @type {number}\n     * @private\n     */\n    this.curIndex_;\n\n    /**\n     * Whether the buffer is at capacity.\n     * @type {boolean}\n     * @private\n     */\n    this.isFull_;\n\n    this.clear();\n  }\n\n\n  /**\n   * Adds a log record to the buffer, possibly overwriting the oldest record.\n   * @param {!goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {string} loggerName The name of the source logger.\n   * @return {!goog.log.LogRecord} The log record.\n   */\n  addRecord(level, msg, loggerName) {\n    if (!this.isBufferingEnabled()) {\n      return new goog.log.LogRecord(level, msg, loggerName);\n    }\n    const curIndex = (this.curIndex_ + 1) % this.capacity_;\n    this.curIndex_ = curIndex;\n    if (this.isFull_) {\n      const ret = this.buffer_[curIndex];\n      ret.reset(level, msg, loggerName);\n      return ret;\n    }\n    this.isFull_ = curIndex == this.capacity_ - 1;\n    return this.buffer_[curIndex] =\n               new goog.log.LogRecord(level, msg, loggerName);\n  }\n\n  /**\n   * Calls the given function for each buffered log record, starting with the\n   * oldest one.\n   * TODO(user): Make this a [Symbol.iterator] once all usages of\n   * goog.debug.LogBuffer can be deleted.\n   * @param {!goog.log.LogRecordHandler} func The function to call.\n   */\n  forEachRecord(func) {\n    const buffer = this.buffer_;\n    // Corner case: no records.\n    if (!buffer[0]) {\n      return;\n    }\n    const curIndex = this.curIndex_;\n    let i = this.isFull_ ? curIndex : -1;\n    do {\n      i = (i + 1) % this.capacity_;\n      func(/** @type {!goog.log.LogRecord} */ (buffer[i]));\n    } while (i !== curIndex);\n  }\n\n  /**\n   * @return {boolean} Whether the log buffer is enabled.\n   */\n  isBufferingEnabled() {\n    return this.capacity_ > 0;\n  }\n\n  /**\n   * @return {boolean} Return whether the log buffer is full.\n   */\n  isFull() {\n    return this.isFull_;\n  }\n\n  /**\n   * Removes all buffered log records.\n   */\n  clear() {\n    this.buffer_ = new Array(this.capacity_);\n    this.curIndex_ = -1;\n    this.isFull_ = false;\n  }\n};\n\n\n/**\n * @type {!goog.log.LogBuffer|undefined}\n * @private\n */\ngoog.log.LogBuffer.instance_;\n\n\n/**\n * @define {number} The number of log records to buffer. 0 means disable\n * buffering.\n */\ngoog.log.LogBuffer.CAPACITY = goog.define('goog.debug.LogBuffer.CAPACITY', 0);\n\n\n/**\n * A static method that always returns the same instance of goog.log.LogBuffer.\n * @return {!goog.log.LogBuffer} The goog.log.LogBuffer singleton instance.\n */\ngoog.log.LogBuffer.getInstance = function() {\n  if (!goog.log.LogBuffer.instance_) {\n    goog.log.LogBuffer.instance_ =\n        new goog.log.LogBuffer(goog.log.LogBuffer.CAPACITY);\n  }\n  return goog.log.LogBuffer.instance_;\n};\n\n\n/**\n * Whether the log buffer is enabled.\n * @return {boolean}\n */\ngoog.log.LogBuffer.isBufferingEnabled = function() {\n  return goog.log.LogBuffer.getInstance().isBufferingEnabled();\n};\n\n\n/**\n * LogRecord objects are used to pass logging requests between the logging\n * framework and individual log handlers. These objects should not be\n * constructed or reset by application code.\n */\ngoog.log.LogRecord = class LogRecord {\n  /**\n   * @param {?goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {string} loggerName The name of the source logger.\n   * @param {number=} time Time this log record was created if other than\n   *     now. If 0, we use #goog.now.\n   * @param {number=} sequenceNumber Sequence number of this log record.\n   *     This should only be passed in when restoring a log record from\n   *     persistence.\n   */\n  constructor(level, msg, loggerName, time, sequenceNumber) {\n    /**\n     * Level of the LogRecord.\n     * @type {!goog.log.Level}\n     * @private\n     */\n    this.level_;\n\n    /**\n     * Name of the logger that created the record.\n     * @type {string}\n     * @private\n     */\n    this.loggerName_;\n\n    /**\n     * Message associated with the record\n     * @type {string}\n     * @private\n     */\n    this.msg_;\n\n    /**\n     * Time the LogRecord was created.\n     * @type {number}\n     * @private\n     */\n    this.time_;\n\n    /**\n     * Sequence number for the LogRecord. Each record has a unique sequence\n     * number that is greater than all log records created before it.\n     * @type {number}\n     * @private\n     */\n    this.sequenceNumber_;\n\n    /**\n     * Exception associated with the record\n     * @type {*}\n     * @private\n     */\n    this.exception_ = undefined;\n\n    this.reset(\n        level || goog.log.Level.OFF, msg, loggerName, time, sequenceNumber);\n  };\n\n  /**\n   * Sets all fields of the log record.\n   * @param {!goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {string} loggerName The name of the source logger.\n   * @param {number=} time Time this log record was created if other than\n   *     now. If 0, we use #goog.now.\n   * @param {number=} sequenceNumber Sequence number of this log record.\n   *     This should only be passed in when restoring a log record from\n   *     persistence.\n   */\n  reset(level, msg, loggerName, time, sequenceNumber) {\n    this.time_ = time || goog.now();\n    this.level_ = level;\n    this.msg_ = msg;\n    this.loggerName_ = loggerName;\n    this.exception_ = undefined;\n    this.sequenceNumber_ = typeof sequenceNumber === 'number' ?\n        sequenceNumber :\n        goog.log.LogRecord.nextSequenceNumber_;\n  };\n\n\n  /**\n   * Gets the source Logger's name.\n   *\n   * @return {string} source logger name (may be null).\n   */\n  getLoggerName() {\n    return this.loggerName_;\n  };\n\n\n  /**\n   * Sets the source Logger's name.\n   *\n   * @param {string} name The logger name.\n   */\n  setLoggerName(name) {\n    this.loggerName_ = name;\n  };\n\n\n  /**\n   * Gets the exception that is part of the log record.\n   *\n   * @return {*} the exception.\n   */\n  getException() {\n    return this.exception_;\n  };\n\n\n  /**\n   * Sets the exception that is part of the log record.\n   * @param {*} exception the exception.\n   */\n  setException(exception) {\n    this.exception_ = exception;\n  };\n\n\n  /**\n   * Gets the logging message level, for example Level.SEVERE.\n   * @return {!goog.log.Level} the logging message level.\n   */\n  getLevel() {\n    return this.level_;\n  };\n\n\n  /**\n   * Sets the logging message level, for example Level.SEVERE.\n   * @param {!goog.log.Level} level the logging message level.\n   */\n  setLevel(level) {\n    this.level_ = level;\n  };\n\n\n  /**\n   * Gets the \"raw\" log message, before localization or formatting.\n   * @return {string} the raw message string.\n   */\n  getMessage() {\n    return this.msg_;\n  };\n\n\n  /**\n   * Sets the \"raw\" log message, before localization or formatting.\n   *\n   * @param {string} msg the raw message string.\n   */\n  setMessage(msg) {\n    this.msg_ = msg;\n  };\n\n\n  /**\n   * Gets event time in milliseconds since 1970.\n   * @return {number} event time in millis since 1970.\n   */\n  getMillis() {\n    return this.time_;\n  };\n\n\n  /**\n   * Sets event time in milliseconds since 1970.\n   * @param {number} time event time in millis since 1970.\n   */\n  setMillis(time) {\n    this.time_ = time;\n  };\n\n\n  /**\n   * Gets the sequence number. Sequence numbers are normally assigned when a\n   * LogRecord is constructed or reset in incrementally increasing order.\n   * @return {number}\n   */\n  getSequenceNumber() {\n    return this.sequenceNumber_;\n  };\n};\n\n\n/**\n * A sequence counter for assigning increasing sequence numbers to LogRecord\n * objects.\n * @type {number}\n * @private\n */\ngoog.log.LogRecord.nextSequenceNumber_ = 0;\n\n\n/**\n * A type that describes a function that handles logs.\n * @typedef {function(!goog.log.LogRecord): ?}\n */\ngoog.log.LogRecordHandler;\n\n\n/**\n * A LogRegistryEntry_ contains data about a Logger.\n * @final\n */\ngoog.log.LogRegistryEntry_ = class LogRegistryEntry_ {\n  /**\n   * @param {string} name\n   * @param {!goog.log.LogRegistryEntry_|null=} parent\n   */\n  constructor(name, parent = null) {\n    /**\n     * The minimum log level that a message must be for it to be logged by the\n     * Logger corresponding to this LogRegistryEntry_. If null, the parent's\n     * log level is used instead.\n     * @type {?goog.log.Level}\n     */\n    this.level = null;\n\n    /**\n     * A list of functions that will be called when the Logger corresponding to\n     * this LogRegistryEntry_ is used to log a message.\n     * @type {!Array<!goog.log.LogRecordHandler>}\n     */\n    this.handlers = [];\n\n    /**\n     * A reference to LogRegistryEntry_ objects that correspond to the direct\n     * ancestor of the Logger represented by this LogRegistryEntry_ object\n     * (via name, treated as a dot-separated namespace).\n     * @type {!goog.log.LogRegistryEntry_|null}\n     */\n    this.parent = parent || null;\n\n    /**\n     * A list of references to LogRegistryEntry_ objects that correspond to the\n     * direct descendants of the Logger represented by this LogRegistryEntry_\n     * object (via name, treated as a dot-separated namespace).\n     * @type {!Array<!goog.log.LogRegistryEntry_>}\n     */\n    this.children = [];\n\n    /**\n     * A reference to the Logger itself.\n     * @type {!goog.log.Logger}\n     */\n    this.logger = /** @type {!goog.log.Logger} */ ({getName: () => name});\n  }\n\n  /**\n   * Returns the effective level of the logger based on its ancestors' levels.\n   * @return {!goog.log.Level} The level.\n   */\n  getEffectiveLevel() {\n    if (this.level) {\n      return this.level;\n    } else if (this.parent) {\n      return this.parent.getEffectiveLevel();\n    }\n    goog.asserts.fail('Root logger has no level set.');\n    return goog.log.Level.OFF;\n  };\n\n  /**\n   * Calls the log handlers associated with this Logger, followed by those of\n   * its parents, etc. until the root Logger's associated log handlers are\n   * called.\n   * @param {!goog.log.LogRecord} logRecord The log record to pass to each\n   *     handler.\n   */\n  publish(logRecord) {\n    let target = this;\n    while (target) {\n      target.handlers.forEach(handler => {\n        handler(logRecord);\n      });\n      target = target.parent;\n    }\n  }\n};\n\n\n/**\n * A LogRegistry_ owns references to all loggers, and is responsible for storing\n * all the internal state needed for loggers to operate correctly.\n *\n * @final\n */\ngoog.log.LogRegistry_ = class LogRegistry_ {\n  constructor() {\n    /**\n     * Per-log information retained by this LogRegistry_.\n     * @type {!Object<string, !goog.log.LogRegistryEntry_>}\n     */\n    this.entries = {};\n\n    // The root logger.\n    const rootLogRegistryEntry =\n        new goog.log.LogRegistryEntry_(goog.log.ROOT_LOGGER_NAME);\n    rootLogRegistryEntry.level = goog.log.Level.CONFIG;\n    this.entries[goog.log.ROOT_LOGGER_NAME] = rootLogRegistryEntry;\n  }\n\n  /**\n   * Gets the LogRegistry_ entry under the given name, creating the entry if one\n   * doesn't already exist.\n   * @param {string} name The name to look up.\n   * @param {?goog.log.Level=} level If provided, override the default logging\n   *     level of the returned Logger with the provided level.\n   * @return {!goog.log.LogRegistryEntry_}\n   */\n  getLogRegistryEntry(name, level) {\n    const entry = this.entries[name];\n    if (entry) {\n      if (level !== undefined) {\n        entry.level = level;\n      }\n      return entry;\n    } else {\n      // The logger and its associated registry entry needs to be created.\n\n      // Get its parent first.\n      const lastDotIndex = name.lastIndexOf('.');\n      const parentName = name.substr(0, lastDotIndex);\n      const parentLogRegistryEntry = this.getLogRegistryEntry(parentName);\n\n      // Now create the new entry, linking it with its parent.\n      const logRegistryEntry =\n          new goog.log.LogRegistryEntry_(name, parentLogRegistryEntry);\n      this.entries[name] = logRegistryEntry;\n      parentLogRegistryEntry.children.push(logRegistryEntry);\n\n      if (level !== undefined) {\n        logRegistryEntry.level = level;\n      }\n\n      return logRegistryEntry;\n    }\n  }\n\n  /**\n   * Get a list of all loggers.\n   * @return {!Array<!goog.log.Logger>}\n   */\n  getAllLoggers() {\n    return Object.keys(this.entries)\n        .map(loggerName => this.entries[loggerName].logger);\n  }\n};\n\n/**\n * A static method that always returns the same instance of LogRegistry_.\n * @return {!goog.log.LogRegistry_} The LogRegistry_ singleton instance.\n */\ngoog.log.LogRegistry_.getInstance = function() {\n  if (!goog.log.LogRegistry_.instance_) {\n    goog.log.LogRegistry_.instance_ = new goog.log.LogRegistry_();\n  }\n  return /** @type {!goog.log.LogRegistry_} */ (\n      goog.log.LogRegistry_.instance_);\n};\n\n/**\n * @type {!goog.log.LogRegistry_|undefined}\n * @private\n */\ngoog.log.LogRegistry_.instance_;\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise, a new logger is\n * created. If a new logger is created, it will be configured to send logging\n * output to its parent's handlers.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n *     name and should normally be based on the package name or class name of\n *     the subsystem, such as goog.net.BrowserChannel.\n * @param {?goog.log.Level=} level If provided, override the default logging\n *     level with the provided level. This parameter is deprecated; prefer using\n *     goog.log.setLevel to set the logger's level instead.\n *     TODO(user): Delete this parameter.\n * @return {!goog.log.Logger|null} The named logger, or null if logging is\n *     disabled.\n */\ngoog.log.getLogger = function(name, level) {\n  if (goog.log.ENABLED) {\n    const loggerEntry =\n        goog.log.LogRegistry_.getInstance().getLogRegistryEntry(name, level);\n    return loggerEntry.logger;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Returns the root logger.\n *\n * @return {!goog.log.Logger|null} The root logger, or null if logging is\n *     disabled.\n */\ngoog.log.getRootLogger = function() {\n  if (goog.log.ENABLED) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        goog.log.ROOT_LOGGER_NAME);\n    return loggerEntry.logger;\n  } else {\n    return null;\n  }\n};\n\n\n// TODO(johnlenz): try to tighten the types to these functions.\n/**\n * Adds a handler to the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.LogRecordHandler} handler Handler function to\n *     add.\n */\ngoog.log.addHandler = function(logger, handler) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    loggerEntry.handlers.push(handler);\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.LogRecordHandler} handler Handler function to\n *     remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.log.removeHandler = function(logger, handler) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    const indexOfHandler = loggerEntry.handlers.indexOf(handler);\n    if (indexOfHandler !== -1) {\n      loggerEntry.handlers.splice(indexOfHandler, 1);\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value goog.log.Level.OFF can be used to turn off logging. If the\n * new level is null, it means that this node should inherit its level from its\n * nearest ancestor with a specific (non-null) level value.\n *\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Level|null} level The new level.\n */\ngoog.log.setLevel = function(logger, level) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    loggerEntry.level = level;\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value goog.log.Level.OFF can be used to turn off logging. If the\n * level is null, it means that this node should inherit its level from its\n * nearest ancestor with a specific (non-null) level value.\n *\n * @param {?goog.log.Logger} logger\n * @return {!goog.log.Level|null} The level.\n */\ngoog.log.getLevel = function(logger) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    return loggerEntry.level;\n  }\n  return null;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors' levels.\n * @param {?goog.log.Logger} logger\n * @return {!goog.log.Level} The level.\n */\ngoog.log.getEffectiveLevel = function(logger) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    return loggerEntry.getEffectiveLevel();\n  }\n  return goog.log.Level.OFF;\n};\n\n\n/**\n * Checks if a message of the given level would actually be logged by this\n * logger. This check is based on the goog.log.Loggers effective level, which\n * may be inherited from its parent.\n * @param {?goog.log.Logger} logger\n * @param {?goog.log.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.log.isLoggable = function(logger, level) {\n  if (goog.log.ENABLED && logger && level) {\n    return level.value >= goog.log.getEffectiveLevel(logger).value;\n  }\n  return false;\n};\n\n\n/**\n * Gets a list of all loggers.\n * @return {!Array<!goog.log.Logger>}\n */\ngoog.log.getAllLoggers = function() {\n  if (goog.log.ENABLED) {\n    return goog.log.LogRegistry_.getInstance().getAllLoggers();\n  }\n  return [];\n};\n\n\n/**\n * Creates a log record. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * TODO(user): Delete this method from the public API.\n * @param {?goog.log.Logger} logger\n * @param {?goog.log.Level} level One of the level identifiers.\n * @param {string} msg The message to log.\n * @param {*=} exception An exception associated with the message.\n * @return {!goog.log.LogRecord}\n */\ngoog.log.getLogRecord = function(logger, level, msg, exception = undefined) {\n  const logRecord = goog.log.LogBuffer.getInstance().addRecord(\n      level || goog.log.Level.OFF, msg, logger.getName());\n  logRecord.setException(exception);\n  return logRecord;\n};\n\n\n/**\n * Logs a goog.log.LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * TODO(user): Delete this method from the public API.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.LogRecord} logRecord A log record to log.\n */\ngoog.log.publishLogRecord = function(logger, logRecord) {\n  if (goog.log.ENABLED && logger &&\n      goog.log.isLoggable(logger, logRecord.getLevel())) {\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    loggerEntry.publish(logRecord);\n  }\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * TODO(user): The level parameter should be made required.\n * @param {?goog.log.Logger} logger\n * @param {?goog.log.Level} level One of the level identifiers.\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {*=} exception An exception associated with the message.\n */\ngoog.log.log = function(logger, level, msg, exception = undefined) {\n  if (goog.log.ENABLED && logger && goog.log.isLoggable(logger, level)) {\n    level = level || goog.log.Level.OFF;\n    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(\n        logger.getName());\n    // Message callbacks can be useful when a log message is expensive to build.\n    if (typeof msg === 'function') {\n      msg = msg();\n    }\n    const logRecord = goog.log.LogBuffer.getInstance().addRecord(\n        level, msg, logger.getName());\n    logRecord.setException(exception);\n    // Publish logs.\n    loggerEntry.publish(logRecord);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {*=} exception An exception associated with the message.\n */\ngoog.log.error = function(logger, msg, exception = undefined) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.SEVERE, msg, exception);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {*=} exception An exception associated with the message.\n */\ngoog.log.warning = function(logger, msg, exception = undefined) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.WARNING, msg, exception);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {*=} exception An exception associated with the message.\n */\ngoog.log.info = function(logger, msg, exception = undefined) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.INFO, msg, exception);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {*=} exception An exception associated with the message.\n */\ngoog.log.fine = function(logger, msg, exception = undefined) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.FINE, msg, exception);\n  }\n};\n"],
"names":["goog","provide","require","log","Loggable","ENABLED","define","debug","LOGGING_ENABLED","ROOT_LOGGER_NAME","Level","constructor","name","value","toString","OFF","Infinity","SHOUT","SEVERE","WARNING","INFO","CONFIG","FINE","FINER","FINEST","ALL","PREDEFINED_LEVELS","predefinedLevelsCache_","createPredefinedLevelsCache_","goog.log.Level.createPredefinedLevelsCache_","i","level","getPredefinedLevel","goog.log.Level.getPredefinedLevel","getPredefinedLevelByValue","goog.log.Level.getPredefinedLevelByValue","length","Logger","getName","LogBuffer","capacity","capacity_","CAPACITY","buffer_","curIndex_","isFull_","clear","addRecord","msg","loggerName","isBufferingEnabled","LogRecord","curIndex","ret","reset","forEachRecord","func","buffer","isFull","Array","instance_","getInstance","goog.log.LogBuffer.getInstance","goog.log.LogBuffer.isBufferingEnabled","time","sequenceNumber","level_","loggerName_","msg_","time_","sequenceNumber_","exception_","undefined","now","nextSequenceNumber_","getLoggerName","setLoggerName","getException","setException","exception","getLevel","setLevel","getMessage","setMessage","getMillis","setMillis","getSequenceNumber","LogRecordHandler","LogRegistryEntry_","parent","handlers","children","logger","getEffectiveLevel","asserts","fail","publish","logRecord","target","forEach","handler","LogRegistry_","entries","rootLogRegistryEntry","getLogRegistryEntry","entry","lastDotIndex","lastIndexOf","parentName","substr","parentLogRegistryEntry","logRegistryEntry","push","getAllLoggers","Object","keys","map","goog.log.LogRegistry_.getInstance","getLogger","goog.log.getLogger","loggerEntry","getRootLogger","goog.log.getRootLogger","addHandler","goog.log.addHandler","removeHandler","goog.log.removeHandler","indexOfHandler","indexOf","splice","goog.log.setLevel","goog.log.getLevel","goog.log.getEffectiveLevel","isLoggable","goog.log.isLoggable","goog.log.getAllLoggers","getLogRecord","goog.log.getLogRecord","publishLogRecord","goog.log.publishLogRecord","goog.log.log","error","goog.log.error","warning","goog.log.warning","info","goog.log.info","fine","goog.log.fine"]
}
