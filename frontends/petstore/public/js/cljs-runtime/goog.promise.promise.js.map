{
"version":3,
"file":"goog.promise.promise.js",
"lineCount":528,
"mappings":"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",
"sources":["goog/promise/promise.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\ngoog.provide('goog.Promise');\n\ngoog.require('goog.Thenable');\ngoog.require('goog.asserts');\ngoog.require('goog.async.FreeList');\ngoog.require('goog.async.run');\ngoog.require('goog.async.throwException');\ngoog.require('goog.debug.Error');\ngoog.require('goog.promise.Resolver');\n\n\n\n/**\n * NOTE: This class was created in anticipation of the built-in Promise type\n * being standardized and implemented across browsers. Now that Promise is\n * available in modern browsers, and is automatically polyfilled by the Closure\n * Compiler, by default, most new code should use native `Promise`\n * instead of `goog.Promise`. However, `goog.Promise` has the\n * concept of cancellation which native Promises do not yet have. So code\n * needing cancellation may still want to use `goog.Promise`.\n *\n * Promises provide a result that may be resolved asynchronously. A Promise may\n * be resolved by being fulfilled with a fulfillment value, rejected with a\n * rejection reason, or blocked by another Promise. A Promise is said to be\n * settled if it is either fulfilled or rejected. Once settled, the Promise\n * result is immutable.\n *\n * Promises may represent results of any type, including undefined. Rejection\n * reasons are typically Errors, but may also be of any type. Closure Promises\n * allow for optional type annotations that enforce that fulfillment values are\n * of the appropriate types at compile time.\n *\n * The result of a Promise is accessible by calling `then` and registering\n * `onFulfilled` and `onRejected` callbacks. Once the Promise\n * is settled, the relevant callbacks are invoked with the fulfillment value or\n * rejection reason as argument. Callbacks are always invoked in the order they\n * were registered, even when additional `then` calls are made from inside\n * another callback. A callback is always run asynchronously sometime after the\n * scope containing the registering `then` invocation has returned.\n *\n * If a Promise is resolved with another Promise, the first Promise will block\n * until the second is settled, and then assumes the same result as the second\n * Promise. This allows Promises to depend on the results of other Promises,\n * linking together multiple asynchronous operations.\n *\n * This implementation is compatible with the Promises/A+ specification and\n * passes that specification's conformance test suite. A Closure Promise may be\n * resolved with a Promise instance (or sufficiently compatible Promise-like\n * object) created by other Promise implementations. From the specification,\n * Promise-like objects are known as \"Thenables\".\n *\n * @see http://promisesaplus.com/\n *\n * @param {function(\n *             this:RESOLVER_CONTEXT,\n *             function((TYPE|IThenable<TYPE>|Thenable)=),\n *             function(*=)): void} resolver\n *     Initialization function that is invoked immediately with `resolve`\n *     and `reject` functions as arguments. The Promise is resolved or\n *     rejected with the first argument passed to either function.\n * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the\n *     resolver function. If unspecified, the resolver function will be executed\n *     in the default scope.\n * @constructor\n * @struct\n * @final\n * @implements {goog.Thenable<TYPE>}\n * @template TYPE,RESOLVER_CONTEXT\n */\ngoog.Promise = function(resolver, opt_context) {\n  'use strict';\n  /**\n   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n   * BLOCKED.\n   * @private {goog.Promise.State_}\n   */\n  this.state_ = goog.Promise.State_.PENDING;\n\n  /**\n   * The settled result of the Promise. Immutable once set with either a\n   * fulfillment value or rejection reason.\n   * @private {*}\n   */\n  this.result_ = undefined;\n\n  /**\n   * For Promises created by calling `then()`, the originating parent.\n   * @private {?goog.Promise}\n   */\n  this.parent_ = null;\n\n  /**\n   * The linked list of `onFulfilled` and `onRejected` callbacks\n   * added to this Promise by calls to `then()`.\n   * @private {?goog.Promise.CallbackEntry_}\n   */\n  this.callbackEntries_ = null;\n\n  /**\n   * The tail of the linked list of `onFulfilled` and `onRejected`\n   * callbacks added to this Promise by calls to `then()`.\n   * @private {?goog.Promise.CallbackEntry_}\n   */\n  this.callbackEntriesTail_ = null;\n\n  /**\n   * Whether the Promise is in the queue of Promises to execute.\n   * @private {boolean}\n   */\n  this.executing_ = false;\n\n  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {\n    /**\n     * A timeout ID used when the `UNHANDLED_REJECTION_DELAY` is greater\n     * than 0 milliseconds. The ID is set when the Promise is rejected, and\n     * cleared only if an `onRejected` callback is invoked for the\n     * Promise (or one of its descendants) before the delay is exceeded.\n     *\n     * If the rejection is not handled before the timeout completes, the\n     * rejection reason is passed to the unhandled rejection handler.\n     * @private {number}\n     */\n    this.unhandledRejectionId_ = 0;\n  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {\n    /**\n     * When the `UNHANDLED_REJECTION_DELAY` is set to 0 milliseconds, a\n     * boolean that is set if the Promise is rejected, and reset to false if an\n     * `onRejected` callback is invoked for the Promise (or one of its\n     * descendants). If the rejection is not handled before the next timestep,\n     * the rejection reason is passed to the unhandled rejection handler.\n     * @private {boolean}\n     */\n    this.hadUnhandledRejection_ = false;\n  }\n\n  if (goog.Promise.LONG_STACK_TRACES) {\n    /**\n     * A list of stack trace frames pointing to the locations where this Promise\n     * was created or had callbacks added to it. Saved to add additional context\n     * to stack traces when an exception is thrown.\n     * @private {!Array<string>}\n     */\n    this.stack_ = [];\n    this.addStackTrace_(new Error('created'));\n\n    /**\n     * Index of the most recently executed stack frame entry.\n     * @private {number}\n     */\n    this.currentStep_ = 0;\n  }\n\n  // As an optimization, we can skip this if resolver is goog.nullFunction.\n  // This value is passed internally when creating a promise which will be\n  // resolved through a more optimized path.\n  if (resolver != goog.nullFunction) {\n    try {\n      var self = this;\n      resolver.call(\n          opt_context,\n          function(value) {\n            'use strict';\n            self.resolve_(goog.Promise.State_.FULFILLED, value);\n          },\n          function(reason) {\n            'use strict';\n            if (goog.DEBUG &&\n                !(reason instanceof goog.Promise.CancellationError)) {\n              try {\n                // Promise was rejected. Step up one call frame to see why.\n                if (reason instanceof Error) {\n                  throw reason;\n                } else {\n                  throw new Error('Promise rejected.');\n                }\n              } catch (e) {\n                // Only thrown so browser dev tools can catch rejections of\n                // promises when the option to break on caught exceptions is\n                // activated.\n              }\n            }\n            self.resolve_(goog.Promise.State_.REJECTED, reason);\n          });\n    } catch (e) {\n      this.resolve_(goog.Promise.State_.REJECTED, e);\n    }\n  }\n};\n\n\n/**\n * @define {boolean} Whether traces of `then` calls should be included in\n * exceptions thrown\n */\ngoog.Promise.LONG_STACK_TRACES =\n    goog.define('goog.Promise.LONG_STACK_TRACES', false);\n\n\n/**\n * @define {number} The delay in milliseconds before a rejected Promise's reason\n * is passed to the rejection handler. By default, the rejection handler\n * rethrows the rejection reason so that it appears in the developer console or\n * `window.onerror` handler.\n *\n * Rejections are rethrown as quickly as possible by default. A negative value\n * disables rejection handling entirely.\n */\ngoog.Promise.UNHANDLED_REJECTION_DELAY =\n    goog.define('goog.Promise.UNHANDLED_REJECTION_DELAY', 0);\n\n\n/**\n * The possible internal states for a Promise. These states are not directly\n * observable to external callers.\n * @enum {number}\n * @private\n */\ngoog.Promise.State_ = {\n  /** The Promise is waiting for resolution. */\n  PENDING: 0,\n\n  /** The Promise is blocked waiting for the result of another Thenable. */\n  BLOCKED: 1,\n\n  /** The Promise has been resolved with a fulfillment value. */\n  FULFILLED: 2,\n\n  /** The Promise has been resolved with a rejection reason. */\n  REJECTED: 3\n};\n\n\n\n/**\n * Entries in the callback chain. Each call to `then`,\n * `thenCatch`, or `thenAlways` creates an entry containing the\n * functions that may be invoked once the Promise is settled.\n *\n * @private @final @struct @constructor\n */\ngoog.Promise.CallbackEntry_ = function() {\n  'use strict';\n  /** @type {?goog.Promise} */\n  this.child = null;\n  /** @type {?Function} */\n  this.onFulfilled = null;\n  /** @type {?Function} */\n  this.onRejected = null;\n  /** @type {?} */\n  this.context = null;\n  /** @type {?goog.Promise.CallbackEntry_} */\n  this.next = null;\n\n  /**\n   * A boolean value to indicate this is a \"thenAlways\" callback entry.\n   * Unlike a normal \"then/thenVoid\" a \"thenAlways doesn't participate\n   * in \"cancel\" considerations but is simply an observer and requires\n   * special handling.\n   * @type {boolean}\n   */\n  this.always = false;\n};\n\n\n/** clear the object prior to reuse */\ngoog.Promise.CallbackEntry_.prototype.reset = function() {\n  'use strict';\n  this.child = null;\n  this.onFulfilled = null;\n  this.onRejected = null;\n  this.context = null;\n  this.always = false;\n};\n\n\n/**\n * @define {number} The number of currently unused objects to keep around for\n *    reuse.\n */\ngoog.Promise.DEFAULT_MAX_UNUSED =\n    goog.define('goog.Promise.DEFAULT_MAX_UNUSED', 100);\n\n\n/** @const @private {goog.async.FreeList<!goog.Promise.CallbackEntry_>} */\ngoog.Promise.freelist_ = new goog.async.FreeList(\n    function() {\n      'use strict';\n      return new goog.Promise.CallbackEntry_();\n    },\n    function(item) {\n      'use strict';\n      item.reset();\n    },\n    goog.Promise.DEFAULT_MAX_UNUSED);\n\n\n/**\n * @param {Function} onFulfilled\n * @param {Function} onRejected\n * @param {?} context\n * @return {!goog.Promise.CallbackEntry_}\n * @private\n */\ngoog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {\n  'use strict';\n  var entry = goog.Promise.freelist_.get();\n  entry.onFulfilled = onFulfilled;\n  entry.onRejected = onRejected;\n  entry.context = context;\n  return entry;\n};\n\n\n/**\n * @param {!goog.Promise.CallbackEntry_} entry\n * @private\n */\ngoog.Promise.returnEntry_ = function(entry) {\n  'use strict';\n  goog.Promise.freelist_.put(entry);\n};\n\n\n// NOTE: this is the same template expression as is used for\n// goog.IThenable.prototype.then\n\n\n/**\n * @param {VALUE=} opt_value\n * @return {RESULT} A new Promise that is immediately resolved\n *     with the given value. If the input value is already a goog.Promise, it\n *     will be returned immediately without creating a new instance.\n * @template VALUE\n * @template RESULT := type('goog.Promise',\n *     cond(isUnknown(VALUE), unknown(),\n *       mapunion(VALUE, (V) =>\n *         cond(isTemplatized(V) && sub(rawTypeOf(V), 'IThenable'),\n *           templateTypeOf(V, 0),\n *           cond(sub(V, 'Thenable'),\n *              unknown(),\n *              V)))))\n * =:\n */\ngoog.Promise.resolve = function(opt_value) {\n  'use strict';\n  if (opt_value instanceof goog.Promise) {\n    // Avoid creating a new object if we already have a promise object\n    // of the correct type.\n    return opt_value;\n  }\n\n  // Passing goog.nullFunction will cause the constructor to take an optimized\n  // path that skips calling the resolver function.\n  var promise = new goog.Promise(goog.nullFunction);\n  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);\n  return promise;\n};\n\n\n/**\n * @param {*=} opt_reason\n * @return {!goog.Promise} A new Promise that is immediately rejected with the\n *     given reason.\n */\ngoog.Promise.reject = function(opt_reason) {\n  'use strict';\n  return new goog.Promise(function(resolve, reject) {\n    'use strict';\n    reject(opt_reason);\n  });\n};\n\n\n/**\n * This is identical to\n * {@code goog.Promise.resolve(value).then(onFulfilled, onRejected)}, but it\n * avoids creating an unnecessary wrapper Promise when `value` is already\n * thenable.\n *\n * @param {?(goog.Thenable<TYPE>|Thenable|TYPE)} value\n * @param {function(TYPE): ?} onFulfilled\n * @param {function(*): *} onRejected\n * @template TYPE\n * @private\n */\ngoog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {\n  'use strict';\n  var isThenable =\n      goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);\n  if (!isThenable) {\n    goog.async.run(goog.partial(onFulfilled, value));\n  }\n};\n\n\n/**\n * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}\n *     promises\n * @return {!goog.Promise<TYPE>} A Promise that receives the result of the\n *     first Promise (or Promise-like) input to settle immediately after it\n *     settles.\n * @template TYPE\n */\ngoog.Promise.race = function(promises) {\n  'use strict';\n  return new goog.Promise(function(resolve, reject) {\n    'use strict';\n    if (!promises.length) {\n      resolve(undefined);\n    }\n    for (var i = 0, promise; i < promises.length; i++) {\n      promise = promises[i];\n      goog.Promise.resolveThen_(promise, resolve, reject);\n    }\n  });\n};\n\n\n/**\n * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}\n *     promises\n * @return {!goog.Promise<!Array<TYPE>>} A Promise that receives a list of\n *     every fulfilled value once every input Promise (or Promise-like) is\n *     successfully fulfilled, or is rejected with the first rejection reason\n *     immediately after it is rejected.\n * @template TYPE\n */\ngoog.Promise.all = function(promises) {\n  'use strict';\n  return new goog.Promise(function(resolve, reject) {\n    'use strict';\n    var toFulfill = promises.length;\n    var values = [];\n\n    if (!toFulfill) {\n      resolve(values);\n      return;\n    }\n\n    var onFulfill = function(index, value) {\n      'use strict';\n      toFulfill--;\n      values[index] = value;\n      if (toFulfill == 0) {\n        resolve(values);\n      }\n    };\n\n    var onReject = function(reason) {\n      'use strict';\n      reject(reason);\n    };\n\n    for (var i = 0, promise; i < promises.length; i++) {\n      promise = promises[i];\n      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);\n    }\n  });\n};\n\n\n/**\n * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}\n *     promises\n * @return {!goog.Promise<!Array<{\n *     fulfilled: boolean,\n *     value: (TYPE|undefined),\n *     reason: (*|undefined)}>>} A Promise that resolves with a list of\n *         result objects once all input Promises (or Promise-like) have\n *         settled. Each result object contains a 'fulfilled' boolean indicating\n *         whether an input Promise was fulfilled or rejected. For fulfilled\n *         Promises, the resulting value is stored in the 'value' field. For\n *         rejected Promises, the rejection reason is stored in the 'reason'\n *         field.\n * @template TYPE\n */\ngoog.Promise.allSettled = function(promises) {\n  'use strict';\n  return new goog.Promise(function(resolve, reject) {\n    'use strict';\n    var toSettle = promises.length;\n    var results = [];\n\n    if (!toSettle) {\n      resolve(results);\n      return;\n    }\n\n    var onSettled = function(index, fulfilled, result) {\n      'use strict';\n      toSettle--;\n      results[index] = fulfilled ? {fulfilled: true, value: result} :\n                                   {fulfilled: false, reason: result};\n      if (toSettle == 0) {\n        resolve(results);\n      }\n    };\n\n    for (var i = 0, promise; i < promises.length; i++) {\n      promise = promises[i];\n      goog.Promise.resolveThen_(\n          promise, goog.partial(onSettled, i, true /* fulfilled */),\n          goog.partial(onSettled, i, false /* fulfilled */));\n    }\n  });\n};\n\n\n/**\n * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}\n *     promises\n * @return {!goog.Promise<TYPE>} A Promise that receives the value of the first\n *     input to be fulfilled, or is rejected with a list of every rejection\n *     reason if all inputs are rejected.\n * @template TYPE\n */\ngoog.Promise.firstFulfilled = function(promises) {\n  'use strict';\n  return new goog.Promise(function(resolve, reject) {\n    'use strict';\n    var toReject = promises.length;\n    var reasons = [];\n\n    if (!toReject) {\n      resolve(undefined);\n      return;\n    }\n\n    var onFulfill = function(value) {\n      'use strict';\n      resolve(value);\n    };\n\n    var onReject = function(index, reason) {\n      'use strict';\n      toReject--;\n      reasons[index] = reason;\n      if (toReject == 0) {\n        reject(reasons);\n      }\n    };\n\n    for (var i = 0, promise; i < promises.length; i++) {\n      promise = promises[i];\n      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));\n    }\n  });\n};\n\n\n/**\n * @return {!goog.promise.Resolver<TYPE>} Resolver wrapping the promise and its\n *     resolve / reject functions. Resolving or rejecting the resolver\n *     resolves or rejects the promise.\n * @template TYPE\n * @see {@link goog.promise.NativeResolver} for native Promises\n */\ngoog.Promise.withResolver = function() {\n  'use strict';\n  var resolve, reject;\n  var promise = new goog.Promise(function(rs, rj) {\n    'use strict';\n    resolve = rs;\n    reject = rj;\n  });\n  return new goog.Promise.Resolver_(promise, resolve, reject);\n};\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise, returning a\n * new child Promise.\n *\n * If the Promise is fulfilled, the `onFulfilled` callback will be invoked\n * with the fulfillment value as argument, and the child Promise will be\n * fulfilled with the return value of the callback. If the callback throws an\n * exception, the child Promise will be rejected with the thrown value instead.\n *\n * If the Promise is rejected, the `onRejected` callback will be invoked\n * with the rejection reason as argument, and the child Promise will be resolved\n * with the return value or rejected with the thrown value of the callback.\n *\n * @param {?(function(this:THIS, TYPE): VALUE)=} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fulfilled.\n * @param {?(function(this:THIS, *): *)=} opt_onRejected A function that will\n *     be invoked with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n *\n * @return {RESULT} A new Promise that will receive the result\n *     of the fulfillment or rejection callback.\n * @template VALUE\n * @template THIS\n *\n * When a Promise (or thenable) is returned from the fulfilled callback,\n * the result is the payload of that promise, not the promise itself.\n *\n * @template RESULT := type('goog.Promise',\n *     cond(isUnknown(VALUE), unknown(),\n *       mapunion(VALUE, (V) =>\n *         cond(isTemplatized(V) && sub(rawTypeOf(V), 'IThenable'),\n *           templateTypeOf(V, 0),\n *           cond(sub(V, 'Thenable'),\n *              unknown(),\n *              V)))))\n *  =:\n * @override\n */\ngoog.Promise.prototype.then = function(\n    opt_onFulfilled, opt_onRejected, opt_context) {\n  'use strict';\n  if (opt_onFulfilled != null) {\n    goog.asserts.assertFunction(\n        opt_onFulfilled, 'opt_onFulfilled should be a function.');\n  }\n  if (opt_onRejected != null) {\n    goog.asserts.assertFunction(\n        opt_onRejected,\n        'opt_onRejected should be a function. Did you pass opt_context ' +\n            'as the second argument instead of the third?');\n  }\n\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error('then'));\n  }\n\n  return this.addChildPromise_(\n      typeof opt_onFulfilled === 'function' ? opt_onFulfilled : null,\n      typeof opt_onRejected === 'function' ? opt_onRejected : null,\n      opt_context);\n};\ngoog.Thenable.addImplementation(goog.Promise);\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise without\n * returning a child Promise (unlike \"then\").\n *\n * If the Promise is fulfilled, the `onFulfilled` callback will be invoked\n * with the fulfillment value as argument.\n *\n * If the Promise is rejected, the `onRejected` callback will be invoked\n * with the rejection reason as argument.\n *\n * @param {?(function(this:THIS, TYPE):?)=} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fulfilled.\n * @param {?(function(this:THIS, *): *)=} opt_onRejected A function that will\n *     be invoked with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n * @package\n * @template THIS\n */\ngoog.Promise.prototype.thenVoid = function(\n    opt_onFulfilled, opt_onRejected, opt_context) {\n  'use strict';\n  if (opt_onFulfilled != null) {\n    goog.asserts.assertFunction(\n        opt_onFulfilled, 'opt_onFulfilled should be a function.');\n  }\n  if (opt_onRejected != null) {\n    goog.asserts.assertFunction(\n        opt_onRejected,\n        'opt_onRejected should be a function. Did you pass opt_context ' +\n            'as the second argument instead of the third?');\n  }\n\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error('then'));\n  }\n\n  // Note: no default rejection handler is provided here as we need to\n  // distinguish unhandled rejections.\n  this.addCallbackEntry_(\n      goog.Promise.getCallbackEntry_(\n          opt_onFulfilled || goog.nullFunction, opt_onRejected || null,\n          opt_context));\n};\n\n\n/**\n * Adds a callback that will be invoked when the Promise is settled (fulfilled\n * or rejected). The callback receives no argument, and no new child Promise is\n * created. This is useful for ensuring that cleanup takes place after certain\n * asynchronous operations. Callbacks added with `thenAlways` will be\n * executed in the same order with other calls to `then`,\n * `thenAlways`, or `thenCatch`.\n *\n * Since it does not produce a new child Promise, cancellation propagation is\n * not prevented by adding callbacks with `thenAlways`. A Promise that has\n * a cleanup handler added with `thenAlways` will be canceled if all of\n * its children created by `then` (or `thenCatch`) are canceled.\n * Additionally, since any rejections are not passed to the callback, it does\n * not stop the unhandled rejection handler from running.\n *\n * @param {function(this:THIS): void} onSettled A function that will be invoked\n *     when the Promise is settled (fulfilled or rejected).\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!goog.Promise<TYPE>} This Promise, for chaining additional calls.\n * @template THIS\n */\ngoog.Promise.prototype.thenAlways = function(onSettled, opt_context) {\n  'use strict';\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error('thenAlways'));\n  }\n\n  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);\n  entry.always = true;\n  this.addCallbackEntry_(entry);\n  return this;\n};\n\n\n/**\n * Adds a callback that will be invoked only if the Promise is rejected. This\n * is equivalent to `then(null, onRejected)`.\n *\n * @param {function(this:THIS, *): *} onRejected A function that will be\n *     invoked with the rejection reason if this Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!goog.Promise} A new Promise that will resolve either to the\n *     value of this promise, or if this promise is rejected, the result of\n *     `onRejected`. The returned Promise will reject if `onRejected` throws.\n * @template THIS\n */\ngoog.Promise.prototype.thenCatch = function(onRejected, opt_context) {\n  'use strict';\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error('thenCatch'));\n  }\n  return this.addChildPromise_(null, onRejected, opt_context);\n};\n\n\n/**\n * Cancels the Promise if it is still pending by rejecting it with a cancel\n * Error. No action is performed if the Promise is already resolved.\n *\n * All child Promises of the canceled Promise will be rejected with the same\n * cancel error, as with normal Promise rejection. If the Promise to be canceled\n * is the only child of a pending Promise, the parent Promise will also be\n * canceled. Cancellation may propagate upward through multiple generations.\n *\n * @param {string=} opt_message An optional debugging message for describing the\n *     cancellation reason.\n */\ngoog.Promise.prototype.cancel = function(opt_message) {\n  'use strict';\n  if (this.state_ == goog.Promise.State_.PENDING) {\n    // Instantiate Error object synchronously. This ensures Error::stack points\n    // to the cancel() callsite.\n    var err = new goog.Promise.CancellationError(opt_message);\n    goog.async.run(function() {\n      'use strict';\n      this.cancelInternal_(err);\n    }, this);\n  }\n};\n\n\n/**\n * Cancels this Promise with the given error.\n *\n * @param {!Error} err The cancellation error.\n * @private\n */\ngoog.Promise.prototype.cancelInternal_ = function(err) {\n  'use strict';\n  if (this.state_ == goog.Promise.State_.PENDING) {\n    if (this.parent_) {\n      // Cancel the Promise and remove it from the parent's child list.\n      this.parent_.cancelChild_(this, err);\n      this.parent_ = null;\n    } else {\n      this.resolve_(goog.Promise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Cancels a child Promise from the list of callback entries. If the Promise has\n * not already been resolved, reject it with a cancel error. If there are no\n * other children in the list of callback entries, propagate the cancellation\n * by canceling this Promise as well.\n *\n * @param {!goog.Promise} childPromise The Promise to cancel.\n * @param {!Error} err The cancel error to use for rejecting the Promise.\n * @private\n */\ngoog.Promise.prototype.cancelChild_ = function(childPromise, err) {\n  'use strict';\n  if (!this.callbackEntries_) {\n    return;\n  }\n  var childCount = 0;\n  var childEntry = null;\n  var beforeChildEntry = null;\n\n  // Find the callback entry for the childPromise, and count whether there are\n  // additional child Promises.\n  for (var entry = this.callbackEntries_; entry; entry = entry.next) {\n    if (!entry.always) {\n      childCount++;\n      if (entry.child == childPromise) {\n        childEntry = entry;\n      }\n      if (childEntry && childCount > 1) {\n        break;\n      }\n    }\n    if (!childEntry) {\n      beforeChildEntry = entry;\n    }\n  }\n\n  // Can a child entry be missing?\n\n  // If the child Promise was the only child, cancel this Promise as well.\n  // Otherwise, reject only the child Promise with the cancel error.\n  if (childEntry) {\n    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {\n      this.cancelInternal_(err);\n    } else {\n      if (beforeChildEntry) {\n        this.removeEntryAfter_(beforeChildEntry);\n      } else {\n        this.popEntry_();\n      }\n\n      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Adds a callback entry to the current Promise, and schedules callback\n * execution if the Promise has already been settled.\n *\n * @param {goog.Promise.CallbackEntry_} callbackEntry Record containing\n *     `onFulfilled` and `onRejected` callbacks to execute after\n *     the Promise is settled.\n * @private\n */\ngoog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {\n  'use strict';\n  if (!this.hasEntry_() &&\n      (this.state_ == goog.Promise.State_.FULFILLED ||\n       this.state_ == goog.Promise.State_.REJECTED)) {\n    this.scheduleCallbacks_();\n  }\n  this.queueEntry_(callbackEntry);\n};\n\n\n/**\n * Creates a child Promise and adds it to the callback entry list. The result of\n * the child Promise is determined by the state of the parent Promise and the\n * result of the `onFulfilled` or `onRejected` callbacks as\n * specified in the Promise resolution procedure.\n *\n * @see http://promisesaplus.com/#the__method\n *\n * @param {?function(this:THIS, TYPE):\n *          (RESULT|goog.Promise<RESULT>|Thenable)} onFulfilled A callback that\n *     will be invoked if the Promise is fulfilled, or null.\n * @param {?function(this:THIS, *): *} onRejected A callback that will be\n *     invoked if the Promise is rejected, or null.\n * @param {THIS=} opt_context An optional execution context for the callbacks.\n *     in the default calling context.\n * @return {!goog.Promise} The child Promise.\n * @template RESULT,THIS\n * @private\n */\ngoog.Promise.prototype.addChildPromise_ = function(\n    onFulfilled, onRejected, opt_context) {\n  'use strict';\n  /** @type {goog.Promise.CallbackEntry_} */\n  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);\n\n  callbackEntry.child = new goog.Promise(function(resolve, reject) {\n    'use strict';\n    // Invoke onFulfilled, or resolve with the parent's value if absent.\n    callbackEntry.onFulfilled = onFulfilled ? function(value) {\n      'use strict';\n      try {\n        var result = onFulfilled.call(opt_context, value);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    } : resolve;\n\n    // Invoke onRejected, or reject with the parent's reason if absent.\n    callbackEntry.onRejected = onRejected ? function(reason) {\n      'use strict';\n      try {\n        var result = onRejected.call(opt_context, reason);\n        if (result === undefined &&\n            reason instanceof goog.Promise.CancellationError) {\n          // Propagate cancellation to children if no other result is returned.\n          reject(reason);\n        } else {\n          resolve(result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    } : reject;\n  });\n\n  callbackEntry.child.parent_ = this;\n  this.addCallbackEntry_(callbackEntry);\n  return callbackEntry.child;\n};\n\n\n/**\n * Unblocks the Promise and fulfills it with the given value.\n *\n * @param {TYPE} value\n * @private\n */\ngoog.Promise.prototype.unblockAndFulfill_ = function(value) {\n  'use strict';\n  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);\n  this.state_ = goog.Promise.State_.PENDING;\n  this.resolve_(goog.Promise.State_.FULFILLED, value);\n};\n\n\n/**\n * Unblocks the Promise and rejects it with the given rejection reason.\n *\n * @param {*} reason\n * @private\n */\ngoog.Promise.prototype.unblockAndReject_ = function(reason) {\n  'use strict';\n  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);\n  this.state_ = goog.Promise.State_.PENDING;\n  this.resolve_(goog.Promise.State_.REJECTED, reason);\n};\n\n\n/**\n * Attempts to resolve a Promise with a given resolution state and value. This\n * is a no-op if the given Promise has already been resolved.\n *\n * If the given result is a Thenable (such as another Promise), the Promise will\n * be settled with the same state and result as the Thenable once it is itself\n * settled.\n *\n * If the given result is not a Thenable, the Promise will be settled (fulfilled\n * or rejected) with that result based on the given state.\n *\n * @see http://promisesaplus.com/#the_promise_resolution_procedure\n *\n * @param {goog.Promise.State_} state\n * @param {*} x The result to apply to the Promise.\n * @private\n */\ngoog.Promise.prototype.resolve_ = function(state, x) {\n  'use strict';\n  if (this.state_ != goog.Promise.State_.PENDING) {\n    return;\n  }\n\n  if (this === x) {\n    state = goog.Promise.State_.REJECTED;\n    x = new TypeError('Promise cannot resolve to itself');\n  }\n\n  this.state_ = goog.Promise.State_.BLOCKED;\n  var isThenable = goog.Promise.maybeThen_(\n      x, this.unblockAndFulfill_, this.unblockAndReject_, this);\n  if (isThenable) {\n    return;\n  }\n\n  this.result_ = x;\n  this.state_ = state;\n  // Since we can no longer be canceled, remove link to parent, so that the\n  // child promise does not keep the parent promise alive.\n  this.parent_ = null;\n  this.scheduleCallbacks_();\n\n  if (state == goog.Promise.State_.REJECTED &&\n      !(x instanceof goog.Promise.CancellationError)) {\n    goog.Promise.addUnhandledRejection_(this, x);\n  }\n};\n\n\n/**\n * Invokes the \"then\" method of an input value if that value is a Thenable. This\n * is a no-op if the value is not thenable.\n *\n * @param {?} value A potentially thenable value.\n * @param {!Function} onFulfilled\n * @param {!Function} onRejected\n * @param {?} context\n * @return {boolean} Whether the input value was thenable.\n * @private\n */\ngoog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {\n  'use strict';\n  if (value instanceof goog.Promise) {\n    value.thenVoid(onFulfilled, onRejected, context);\n    return true;\n  } else if (goog.Thenable.isImplementedBy(value)) {\n    value = /** @type {!goog.Thenable} */ (value);\n    value.then(onFulfilled, onRejected, context);\n    return true;\n  } else if (goog.isObject(value)) {\n    const thenable = /** @type {!Thenable} */ (value);\n    try {\n      var then = thenable.then;\n      if (typeof then === 'function') {\n        goog.Promise.tryThen_(thenable, then, onFulfilled, onRejected, context);\n        return true;\n      }\n    } catch (e) {\n      onRejected.call(context, e);\n      return true;\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * Attempts to call the `then` method on an object in the hopes that it is\n * a Promise-compatible instance. This allows interoperation between different\n * Promise implementations, however a non-compliant object may cause a Promise\n * to hang indefinitely. If the `then` method throws an exception, the\n * dependent Promise will be rejected with the thrown value.\n *\n * @see http://promisesaplus.com/#point-70\n *\n * @param {Thenable} thenable An object with a `then` method that may be\n *     compatible with the Promise/A+ specification.\n * @param {!Function} then The `then` method of the Thenable object.\n * @param {!Function} onFulfilled\n * @param {!Function} onRejected\n * @param {*} context\n * @private\n */\ngoog.Promise.tryThen_ = function(\n    thenable, then, onFulfilled, onRejected, context) {\n  'use strict';\n  var called = false;\n  var resolve = function(value) {\n    'use strict';\n    if (!called) {\n      called = true;\n      onFulfilled.call(context, value);\n    }\n  };\n\n  var reject = function(reason) {\n    'use strict';\n    if (!called) {\n      called = true;\n      onRejected.call(context, reason);\n    }\n  };\n\n  try {\n    then.call(thenable, resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\n\n/**\n * Executes the pending callbacks of a settled Promise after a timeout.\n *\n * Section 2.2.4 of the Promises/A+ specification requires that Promise\n * callbacks must only be invoked from a call stack that only contains Promise\n * implementation code, which we accomplish by invoking callback execution after\n * a timeout. If `startExecution_` is called multiple times for the same\n * Promise, the callback chain will be evaluated only once. Additional callbacks\n * may be added during the evaluation phase, and will be executed in the same\n * event loop.\n *\n * All Promises added to the waiting list during the same browser event loop\n * will be executed in one batch to avoid using a separate timeout per Promise.\n *\n * @private\n */\ngoog.Promise.prototype.scheduleCallbacks_ = function() {\n  'use strict';\n  if (!this.executing_) {\n    this.executing_ = true;\n    goog.async.run(this.executeCallbacks_, this);\n  }\n};\n\n\n/**\n * @return {boolean} Whether there are any pending callbacks queued.\n * @private\n */\ngoog.Promise.prototype.hasEntry_ = function() {\n  'use strict';\n  return !!this.callbackEntries_;\n};\n\n\n/**\n * @param {goog.Promise.CallbackEntry_} entry\n * @private\n */\ngoog.Promise.prototype.queueEntry_ = function(entry) {\n  'use strict';\n  goog.asserts.assert(entry.onFulfilled != null);\n\n  if (this.callbackEntriesTail_) {\n    this.callbackEntriesTail_.next = entry;\n    this.callbackEntriesTail_ = entry;\n  } else {\n    // It the work queue was empty set the head too.\n    this.callbackEntries_ = entry;\n    this.callbackEntriesTail_ = entry;\n  }\n};\n\n\n/**\n * @return {goog.Promise.CallbackEntry_} entry\n * @private\n */\ngoog.Promise.prototype.popEntry_ = function() {\n  'use strict';\n  var entry = null;\n  if (this.callbackEntries_) {\n    entry = this.callbackEntries_;\n    this.callbackEntries_ = entry.next;\n    entry.next = null;\n  }\n  // It the work queue is empty clear the tail too.\n  if (!this.callbackEntries_) {\n    this.callbackEntriesTail_ = null;\n  }\n\n  if (entry != null) {\n    goog.asserts.assert(entry.onFulfilled != null);\n  }\n  return entry;\n};\n\n\n/**\n * @param {goog.Promise.CallbackEntry_} previous\n * @private\n */\ngoog.Promise.prototype.removeEntryAfter_ = function(previous) {\n  'use strict';\n  goog.asserts.assert(this.callbackEntries_);\n  goog.asserts.assert(previous != null);\n  // If the last entry is being removed, update the tail\n  if (previous.next == this.callbackEntriesTail_) {\n    this.callbackEntriesTail_ = previous;\n  }\n\n  previous.next = previous.next.next;\n};\n\n\n/**\n * Executes all pending callbacks for this Promise.\n *\n * @private\n */\ngoog.Promise.prototype.executeCallbacks_ = function() {\n  'use strict';\n  var entry = null;\n  while (entry = this.popEntry_()) {\n    if (goog.Promise.LONG_STACK_TRACES) {\n      this.currentStep_++;\n    }\n    this.executeCallback_(entry, this.state_, this.result_);\n  }\n  this.executing_ = false;\n};\n\n\n/**\n * Executes a pending callback for this Promise. Invokes an `onFulfilled`\n * or `onRejected` callback based on the settled state of the Promise.\n *\n * @param {!goog.Promise.CallbackEntry_} callbackEntry An entry containing the\n *     onFulfilled and/or onRejected callbacks for this step.\n * @param {goog.Promise.State_} state The resolution status of the Promise,\n *     either FULFILLED or REJECTED.\n * @param {*} result The settled result of the Promise.\n * @private\n */\ngoog.Promise.prototype.executeCallback_ = function(\n    callbackEntry, state, result) {\n  'use strict';\n  // Cancel an unhandled rejection if the then/thenVoid call had an onRejected.\n  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected &&\n      !callbackEntry.always) {\n    this.removeUnhandledRejection_();\n  }\n\n  if (callbackEntry.child) {\n    // When the parent is settled, the child no longer needs to hold on to it,\n    // as the parent can no longer be canceled.\n    callbackEntry.child.parent_ = null;\n    goog.Promise.invokeCallback_(callbackEntry, state, result);\n  } else {\n    // Callbacks created with thenAlways or thenVoid do not have the rejection\n    // handling code normally set up in the child Promise.\n    try {\n      callbackEntry.always ?\n          callbackEntry.onFulfilled.call(callbackEntry.context) :\n          goog.Promise.invokeCallback_(callbackEntry, state, result);\n    } catch (err) {\n      goog.Promise.handleRejection_.call(null, err);\n    }\n  }\n  goog.Promise.returnEntry_(callbackEntry);\n};\n\n\n/**\n * Executes the onFulfilled or onRejected callback for a callbackEntry.\n *\n * @param {!goog.Promise.CallbackEntry_} callbackEntry\n * @param {goog.Promise.State_} state\n * @param {*} result\n * @private\n */\ngoog.Promise.invokeCallback_ = function(callbackEntry, state, result) {\n  'use strict';\n  if (state == goog.Promise.State_.FULFILLED) {\n    callbackEntry.onFulfilled.call(callbackEntry.context, result);\n  } else if (callbackEntry.onRejected) {\n    callbackEntry.onRejected.call(callbackEntry.context, result);\n  }\n};\n\n\n/**\n * Records a stack trace entry for functions that call `then` or the\n * Promise constructor. May be disabled by unsetting `LONG_STACK_TRACES`.\n *\n * @param {!Error} err An Error object created by the calling function for\n *     providing a stack trace.\n * @private\n */\ngoog.Promise.prototype.addStackTrace_ = function(err) {\n  'use strict';\n  if (goog.Promise.LONG_STACK_TRACES && typeof err.stack === 'string') {\n    // Extract the third line of the stack trace, which is the entry for the\n    // user function that called into Promise code.\n    var trace = err.stack.split('\\n', 4)[3];\n    var message = err.message;\n\n    // Pad the message to align the traces.\n    message += Array(11 - message.length).join(' ');\n    this.stack_.push(message + trace);\n  }\n};\n\n\n/**\n * Adds extra stack trace information to an exception for the list of\n * asynchronous `then` calls that have been run for this Promise. Stack\n * trace information is recorded in {@see #addStackTrace_}, and appended to\n * rethrown errors when `LONG_STACK_TRACES` is enabled.\n *\n * @param {?} err An unhandled exception captured during callback execution.\n * @private\n */\ngoog.Promise.prototype.appendLongStack_ = function(err) {\n  'use strict';\n  if (goog.Promise.LONG_STACK_TRACES && err && typeof err.stack === 'string' &&\n      this.stack_.length) {\n    var longTrace = ['Promise trace:'];\n\n    for (var promise = this; promise; promise = promise.parent_) {\n      for (var i = this.currentStep_; i >= 0; i--) {\n        longTrace.push(promise.stack_[i]);\n      }\n      longTrace.push(\n          'Value: ' +\n          '[' + (promise.state_ == goog.Promise.State_.REJECTED ? 'REJECTED' :\n                                                                  'FULFILLED') +\n          '] ' +\n          '<' + String(promise.result_) + '>');\n    }\n    err.stack += '\\n\\n' + longTrace.join('\\n');\n  }\n};\n\n\n/**\n * Marks this rejected Promise as having being handled. Also marks any parent\n * Promises in the rejected state as handled. The rejection handler will no\n * longer be invoked for this Promise (if it has not been called already).\n *\n * @private\n */\ngoog.Promise.prototype.removeUnhandledRejection_ = function() {\n  'use strict';\n  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {\n    for (var p = this; p && p.unhandledRejectionId_; p = p.parent_) {\n      goog.global.clearTimeout(p.unhandledRejectionId_);\n      p.unhandledRejectionId_ = 0;\n    }\n  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {\n    for (var p = this; p && p.hadUnhandledRejection_; p = p.parent_) {\n      p.hadUnhandledRejection_ = false;\n    }\n  }\n};\n\n\n/**\n * Marks this rejected Promise as unhandled. If no `onRejected` callback\n * is called for this Promise before the `UNHANDLED_REJECTION_DELAY`\n * expires, the reason will be passed to the unhandled rejection handler. The\n * handler typically rethrows the rejection reason so that it becomes visible in\n * the developer console.\n *\n * @param {!goog.Promise} promise The rejected Promise.\n * @param {*} reason The Promise rejection reason.\n * @private\n */\ngoog.Promise.addUnhandledRejection_ = function(promise, reason) {\n  'use strict';\n  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {\n    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {\n      'use strict';\n      promise.appendLongStack_(reason);\n      goog.Promise.handleRejection_.call(null, reason);\n    }, goog.Promise.UNHANDLED_REJECTION_DELAY);\n\n  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {\n    promise.hadUnhandledRejection_ = true;\n    goog.async.run(function() {\n      'use strict';\n      if (promise.hadUnhandledRejection_) {\n        promise.appendLongStack_(reason);\n        goog.Promise.handleRejection_.call(null, reason);\n      }\n    });\n  }\n};\n\n\n/**\n * A method that is invoked with the rejection reasons for Promises that are\n * rejected but have no `onRejected` callbacks registered yet.\n * @type {function(*)}\n * @private\n */\ngoog.Promise.handleRejection_ = goog.async.throwException;\n\n\n/**\n * Sets a handler that will be called with reasons from unhandled rejected\n * Promises. If the rejected Promise (or one of its descendants) has an\n * `onRejected` callback registered, the rejection will be considered\n * handled, and the rejection handler will not be called.\n *\n * By default, unhandled rejections are rethrown so that the error may be\n * captured by the developer console or a `window.onerror` handler.\n *\n * @param {function(*)} handler A function that will be called with reasons from\n *     rejected Promises. Defaults to `goog.async.throwException`.\n */\ngoog.Promise.setUnhandledRejectionHandler = function(handler) {\n  'use strict';\n  goog.Promise.handleRejection_ = handler;\n};\n\n\n\n/**\n * Error used as a rejection reason for canceled Promises.  This will still be\n * a rejection, but should generally be ignored by other error handlers (because\n * cancellation should not be a reportable error).\n *\n * @param {string=} opt_message\n * @constructor\n * @extends {goog.debug.Error}\n * @final\n */\ngoog.Promise.CancellationError = function(opt_message) {\n  'use strict';\n  goog.Promise.CancellationError.base(this, 'constructor', opt_message);\n  this.reportErrorToServer = false;\n};\ngoog.inherits(goog.Promise.CancellationError, goog.debug.Error);\n\n\n/** @override */\ngoog.Promise.CancellationError.prototype.name = 'cancel';\n\n\n\n/**\n * Internal implementation of the resolver interface.\n *\n * @param {!goog.Promise<TYPE>} promise\n * @param {function((TYPE|goog.Promise<TYPE>|Thenable)=)} resolve\n * @param {function(*=): void} reject\n * @implements {goog.promise.Resolver<TYPE>}\n * @final @struct\n * @constructor\n * @private\n * @template TYPE\n */\ngoog.Promise.Resolver_ = function(promise, resolve, reject) {\n  'use strict';\n  /** @const */\n  this.promise = promise;\n\n  /** @const */\n  this.resolve = resolve;\n\n  /** @const */\n  this.reject = reject;\n};\n"],
"names":["goog","provide","require","Promise","goog.Promise","resolver","opt_context","state_","State_","PENDING","result_","undefined","parent_","callbackEntries_","callbackEntriesTail_","executing_","UNHANDLED_REJECTION_DELAY","unhandledRejectionId_","hadUnhandledRejection_","LONG_STACK_TRACES","stack_","addStackTrace_","Error","currentStep_","nullFunction","self","call","value","resolve_","FULFILLED","reason","DEBUG","CancellationError","e","REJECTED","define","BLOCKED","CallbackEntry_","goog.Promise.CallbackEntry_","child","onFulfilled","onRejected","context","next","always","prototype","reset","goog.Promise.CallbackEntry_.prototype.reset","DEFAULT_MAX_UNUSED","freelist_","async","FreeList","item","getCallbackEntry_","goog.Promise.getCallbackEntry_","entry","get","returnEntry_","goog.Promise.returnEntry_","put","resolve","goog.Promise.resolve","opt_value","promise","reject","goog.Promise.reject","opt_reason","resolveThen_","goog.Promise.resolveThen_","isThenable","maybeThen_","run","partial","race","goog.Promise.race","promises","length","i","all","goog.Promise.all","toFulfill","values","onFulfill","index","onReject","allSettled","goog.Promise.allSettled","toSettle","results","onSettled","fulfilled","result","firstFulfilled","goog.Promise.firstFulfilled","toReject","reasons","withResolver","goog.Promise.withResolver","rs","rj","Resolver_","then","goog.Promise.prototype.then","opt_onFulfilled","opt_onRejected","asserts","assertFunction","addChildPromise_","Thenable","addImplementation","thenVoid","goog.Promise.prototype.thenVoid","addCallbackEntry_","thenAlways","goog.Promise.prototype.thenAlways","thenCatch","goog.Promise.prototype.thenCatch","cancel","goog.Promise.prototype.cancel","opt_message","err","cancelInternal_","goog.Promise.prototype.cancelInternal_","cancelChild_","goog.Promise.prototype.cancelChild_","childPromise","childCount","childEntry","beforeChildEntry","removeEntryAfter_","popEntry_","executeCallback_","goog.Promise.prototype.addCallbackEntry_","callbackEntry","hasEntry_","scheduleCallbacks_","queueEntry_","goog.Promise.prototype.addChildPromise_","unblockAndFulfill_","goog.Promise.prototype.unblockAndFulfill_","assert","unblockAndReject_","goog.Promise.prototype.unblockAndReject_","goog.Promise.prototype.resolve_","state","x","TypeError","addUnhandledRejection_","goog.Promise.maybeThen_","isImplementedBy","isObject","thenable","tryThen_","goog.Promise.tryThen_","called","goog.Promise.prototype.scheduleCallbacks_","executeCallbacks_","goog.Promise.prototype.hasEntry_","goog.Promise.prototype.queueEntry_","goog.Promise.prototype.popEntry_","goog.Promise.prototype.removeEntryAfter_","previous","goog.Promise.prototype.executeCallbacks_","goog.Promise.prototype.executeCallback_","removeUnhandledRejection_","invokeCallback_","handleRejection_","goog.Promise.invokeCallback_","goog.Promise.prototype.addStackTrace_","stack","trace","split","message","Array","join","push","appendLongStack_","goog.Promise.prototype.appendLongStack_","longTrace","String","goog.Promise.prototype.removeUnhandledRejection_","p","global","clearTimeout","goog.Promise.addUnhandledRejection_","setTimeout","throwException","setUnhandledRejectionHandler","goog.Promise.setUnhandledRejectionHandler","handler","goog.Promise.CancellationError","base","reportErrorToServer","inherits","debug","name","goog.Promise.Resolver_"]
}
