{"version":3,"sources":["shadow/arborist/common.cljs"],"mappings":"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","names":["shadow.arborist.common/ifn1-wrap","x","a","shadow.arborist.common/ifn2-wrap","b","c","shadow.arborist.common/ifn3-wrap","var_args","G__11448","shadow.arborist.common/dom-marker","js/Error","env","js/document.createTextNode","label","js/goog.DEBUG","js/document.createComment","shadow.arborist.common/in-document?","el","goog.dom/isInDocument","shadow.arborist.common/fragment-replace","old-managed","new-managed","first-node","shadow.arborist.protocols/dom-first","_","parent","shadow.arborist.protocols/dom-insert","shadow.arborist.protocols/destroy!","shadow.arborist.common/replace-managed","old","nval","new","shadow.arborist.protocols/as-managed","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.arborist.common/ManagedRoot","shadow.arborist.common/->ManagedRoot","dom-entered?","marker","node","val","this","anchor","next","cljs.core.ex_info","dom-remove?","cljs.core/not","temp__5808__auto__","shadow.arborist.protocols/dom-entered!","shadow.arborist.common/managed-root","shadow.arborist.common.dom_marker","shadow.arborist.common/ManagedText","shadow.arborist.common/->ManagedText","cljs.core.not_EQ_","shadow.arborist.common/managed-text","shadow.arborist.protocols/IConstruct"],"sourcesContent":["(ns shadow.arborist.common\n  (:require\n    [goog.dom :as gdom]\n    [shadow.arborist.protocols :as p]))\n\n;; helper functions that lets us bypass the common CLJS ifn dispatch check\n;; helpful in hot loops or places where the same function (or ifn) is called multiple times\n;; and we just want to avoid the extra generated code\n\n;; in certain places we care about calling instead a function directly\n;;   x(y)\n\n;; instead of the inline check\n;;   x.cljs$core$IFn$_invoke$arity$1 ? x.cljs$core$IFn$_invoke$arity$1(y) : x.call(y)\n\n;; I'm sure JS engines are smart enough to skip the check after a while but best not to rely on it\n;; also generates less code which is always good\n\n;; never call these in a hot loop, better to leave the check for those cases\n\n(defn ifn1-wrap ^function [x]\n  (if ^boolean (.-cljs$core$IFn$_invoke$arity$1 x)\n    (fn [a]\n      (.cljs$core$IFn$_invoke$arity$1 x a))\n    x))\n\n(defn ifn2-wrap ^function [x]\n  (if ^boolean (.-cljs$core$IFn$_invoke$arity$2 x)\n    (fn [a b c]\n      (.cljs$core$IFn$_invoke$arity$2 x a b))\n    x))\n\n(defn ifn3-wrap ^function [x]\n  (if ^boolean (.-cljs$core$IFn$_invoke$arity$3 x)\n    (fn [a b c]\n      (.cljs$core$IFn$_invoke$arity$3 x a b c))\n    x))\n\n(defn dom-marker\n  ([env]\n   (js/document.createTextNode \"\"))\n  ([env label]\n   (if ^boolean js/goog.DEBUG\n     (js/document.createComment label)\n     (js/document.createTextNode \"\"))))\n\n(defn in-document? [el]\n  (gdom/isInDocument el))\n\n(defn fragment-replace [old-managed new-managed]\n  (let [first-node (p/dom-first old-managed)\n        _ (assert (some? first-node) \"fragment replacing a node that isn't in the DOM\")\n        parent (.-parentNode first-node)]\n\n    (p/dom-insert new-managed parent first-node)\n    (p/destroy! old-managed true)\n    new-managed))\n\n(defn replace-managed ^not-native [env old nval]\n  (let [new (p/as-managed nval env)]\n    (fragment-replace old new)))\n\n;; swappable root\n(deftype ManagedRoot\n  [env\n   ^boolean ^:mutable dom-entered?\n   ^:mutable marker\n   ^:mutable\n   ^not-native node\n   ^:mutable val]\n\n  p/IManaged\n  (dom-first [this] marker)\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent marker anchor)\n    (when node\n      (p/dom-insert node parent anchor)\n      ))\n\n  (dom-entered! [this]\n    (set! dom-entered? true)\n    (when node\n      (p/dom-entered! node)))\n\n  (supports? [this next]\n    (throw (ex-info \"invalid use, don't sync roots?\" {:this this :next next})))\n\n  (dom-sync! [this next]\n    (throw (ex-info \"invalid use, don't sync roots?\" {:this this :next next})))\n\n  (destroy! [this ^boolean dom-remove?]\n    (when dom-remove?\n      (.remove marker))\n    (when node\n      (p/destroy! node dom-remove?)))\n\n  p/IDirectUpdate\n  (update! [this next]\n    (set! val next)\n    (cond\n      (not node)\n      (let [el (p/as-managed val env)]\n        (set! node el)\n        ;; root was already inserted to dom but no node was available at the time\n        (when-some [parent (.-parentElement marker)]\n          (p/dom-insert node parent (.-nextSibling marker))\n          ;; root might not be in document yet\n          (when dom-entered?\n            (p/dom-entered! node))))\n\n      (p/supports? node next)\n      (p/dom-sync! node next)\n\n      :else\n      (let [new (replace-managed env node next)]\n        (set! node new)\n        (when dom-entered?\n          (p/dom-entered! new)\n          )))))\n\n(defn managed-root [env]\n  (ManagedRoot. env false (dom-marker env) nil nil))\n\n(deftype ManagedText [env ^:mutable val node]\n  p/IManaged\n  (dom-first [this] node)\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent node anchor))\n\n  (dom-entered! [this])\n\n  (supports? [this next]\n    ;; FIXME: anything else?\n    (or (string? next)\n        (number? next)\n        (nil? next)))\n\n  (dom-sync! [this next]\n    (when (not= val next)\n      (set! val next)\n      ;; https://twitter.com/_developit/status/1129093390883315712\n      (set! node -data (str next)))\n    :synced)\n\n  (destroy! [this ^boolean dom-remove?]\n    (when dom-remove?\n      (.remove node))))\n\n(defn managed-text [env val]\n  (ManagedText. env val (js/document.createTextNode (str val))))\n\n(extend-protocol p/IConstruct\n  string\n  (as-managed [this env]\n    (managed-text env this))\n\n  number\n  (as-managed [this env]\n    (managed-text env this))\n\n  ;; as a placeholder for (when condition (<< [:deep [:tree]]))\n  nil\n  (as-managed [this env]\n    (managed-text env this)))\n"]}