{
"version":3,
"file":"goog.structs.map.js",
"lineCount":222,
"mappings":"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",
"sources":["goog/structs/map.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Datastructure: Hash Map.\n *\n *\n * This file contains an implementation of a Map structure. It implements a lot\n * of the methods used in goog.structs so those functions work on hashes. This\n * is best suited for complex key types. For simple keys such as numbers and\n * strings consider using the lighter-weight utilities in goog.object.\n * @deprecated goog.structs.Map is deprecated in favour of ES6 Maps.\n */\n\n\ngoog.provide('goog.structs.Map');\n\ngoog.require('goog.collections.iters');\ngoog.require('goog.iter.Iterator');\ngoog.require('goog.iter.StopIteration');\ngoog.require('goog.iter.es6');\n\n\n\n/**\n * Class for Hash Map datastructure.\n * @param {*=} opt_map Map or Object to initialize the map with.\n * @param {...*} var_args If 2 or more arguments are present then they\n *     will be used as key-value pairs.\n * @constructor\n * @template K, V\n * @deprecated This type is misleading: use ES6 Map instead.\n */\ngoog.structs.Map = function(opt_map, var_args) {\n  'use strict';\n  /**\n   * Underlying JS object used to implement the map.\n   * @private {!Object}\n   */\n  this.map_ = {};\n\n  /**\n   * An array of keys. This is necessary for two reasons:\n   *   1. Iterating the keys using for (var key in this.map_) allocates an\n   *      object for every key in IE which is really bad for IE6 GC perf.\n   *   2. Without a side data structure, we would need to escape all the keys\n   *      as that would be the only way we could tell during iteration if the\n   *      key was an internal key or a property of the object.\n   *\n   * This array can contain deleted keys so it's necessary to check the map\n   * as well to see if the key is still in the map (this doesn't require a\n   * memory allocation in IE).\n   * @private {!Array<string>}\n   */\n  this.keys_ = [];\n\n  /**\n   * The number of key value pairs in the map.\n   * @const {number}\n   */\n  this.size = 0;\n\n  /**\n   * Version used to detect changes while iterating.\n   * @private {number}\n   */\n  this.version_ = 0;\n\n  var argLength = arguments.length;\n\n  if (argLength > 1) {\n    if (argLength % 2) {\n      throw new Error('Uneven number of arguments');\n    }\n    for (var i = 0; i < argLength; i += 2) {\n      this.set(arguments[i], arguments[i + 1]);\n    }\n  } else if (opt_map) {\n    this.addAll(/** @type {!Object} */ (opt_map));\n  }\n};\n\n\n/**\n * @return {number} The number of key-value pairs in the map.\n * @deprecated Use the `size` property instead, for alignment with ES6 Map.\n */\ngoog.structs.Map.prototype.getCount = function() {\n  'use strict';\n  return this.size;\n};\n\n\n/**\n * Returns the values of the map.\n * @return {!Array<V>} The values in the map.\n * @deprecated Use `Array.from(map.values())` instead, for alignment with ES6\n *     Map.\n */\ngoog.structs.Map.prototype.getValues = function() {\n  'use strict';\n  this.cleanupKeysArray_();\n\n  var rv = [];\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    rv.push(this.map_[key]);\n  }\n  return rv;\n};\n\n\n/**\n * Returns the keys of the map.\n * @return {!Array<string>} Array of string values.\n * @deprecated Use `Array.from(map.keys())` instead, for alignment with ES6 Map.\n */\ngoog.structs.Map.prototype.getKeys = function() {\n  'use strict';\n  this.cleanupKeysArray_();\n  return /** @type {!Array<string>} */ (this.keys_.concat());\n};\n\n\n/**\n * Whether the map contains the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the map contains the key.\n * @deprecated Use `has` instead, for alignment with ES6 Map.\n */\ngoog.structs.Map.prototype.containsKey = function(key) {\n  'use strict';\n  return this.has(key);\n};\n\n/**\n * Whether the map contains the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the map contains the key.\n */\ngoog.structs.Map.prototype.has = function(key) {\n  'use strict';\n  return goog.structs.Map.hasKey_(this.map_, key);\n};\n\n\n/**\n * Whether the map contains the given value. This is O(n).\n * @param {V} val The value to check for.\n * @return {boolean} Whether the map contains the value.\n */\ngoog.structs.Map.prototype.containsValue = function(val) {\n  'use strict';\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Whether this map is equal to the argument map.\n * @param {goog.structs.Map} otherMap The map against which to test equality.\n * @param {function(V, V): boolean=} opt_equalityFn Optional equality function\n *     to test equality of values. If not specified, this will test whether\n *     the values contained in each map are identical objects.\n * @return {boolean} Whether the maps are equal.\n * @deprecated Use goog.collections.maps.equals(thisMap, otherMap,\n *     opt_equalityFn) instead, for alignment with ES6 Map.\n */\ngoog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {\n  'use strict';\n  if (this === otherMap) {\n    return true;\n  }\n\n  if (this.size != otherMap.getCount()) {\n    return false;\n  }\n\n  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;\n\n  this.cleanupKeysArray_();\n  for (var key, i = 0; key = this.keys_[i]; i++) {\n    if (!equalityFn(this.get(key), otherMap.get(key))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Default equality test for values.\n * @param {*} a The first value.\n * @param {*} b The second value.\n * @return {boolean} Whether a and b reference the same object.\n */\ngoog.structs.Map.defaultEquals = function(a, b) {\n  'use strict';\n  return a === b;\n};\n\n\n/**\n * @return {boolean} Whether the map is empty.\n * @deprecated Use the size property and compare against 0, for alignment with\n *     ES6 Map.\n */\ngoog.structs.Map.prototype.isEmpty = function() {\n  'use strict';\n  return this.size == 0;\n};\n\n\n/**\n * Removes all key-value pairs from the map.\n */\ngoog.structs.Map.prototype.clear = function() {\n  'use strict';\n  this.map_ = {};\n  this.keys_.length = 0;\n  this.setSizeInternal_(0);\n  this.version_ = 0;\n};\n\n\n\n/**\n * Removes a key-value pair based on the key. This is O(logN) amortized due to\n * updating the keys array whenever the count becomes half the size of the keys\n * in the keys array.\n * @param {*} key  The key to remove.\n * @return {boolean} Whether object was removed.\n * @deprecated Use `delete` instead, for alignment with ES6 Map.\n */\ngoog.structs.Map.prototype.remove = function(key) {\n  return this.delete(key);\n};\n\n/**\n * Removes a key-value pair based on the key. This is O(logN) amortized due\n * to updating the keys array whenever the count becomes half the size of\n * the keys in the keys array.\n * @param {*} key  The key to remove.\n * @return {boolean} Whether object was removed.\n */\ngoog.structs.Map.prototype.delete = function(key) {\n  'use strict';\n  if (goog.structs.Map.hasKey_(this.map_, key)) {\n    delete this.map_[key];\n    this.setSizeInternal_(this.size - 1);\n    this.version_++;\n\n    // clean up the keys array if the threshold is hit\n    if (this.keys_.length > 2 * this.size) {\n      this.cleanupKeysArray_();\n    }\n\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Cleans up the temp keys array by removing entries that are no longer in the\n * map.\n * @private\n */\ngoog.structs.Map.prototype.cleanupKeysArray_ = function() {\n  'use strict';\n  if (this.size != this.keys_.length) {\n    // First remove keys that are no longer in the map.\n    var srcIndex = 0;\n    var destIndex = 0;\n    while (srcIndex < this.keys_.length) {\n      var key = this.keys_[srcIndex];\n      if (goog.structs.Map.hasKey_(this.map_, key)) {\n        this.keys_[destIndex++] = key;\n      }\n      srcIndex++;\n    }\n    this.keys_.length = destIndex;\n  }\n\n  if (this.size != this.keys_.length) {\n    // If the count still isn't correct, that means we have duplicates. This can\n    // happen when the same key is added and removed multiple times. Now we have\n    // to allocate one extra Object to remove the duplicates. This could have\n    // been done in the first pass, but in the common case, we can avoid\n    // allocating an extra object by only doing this when necessary.\n    var seen = {};\n    var srcIndex = 0;\n    var destIndex = 0;\n    while (srcIndex < this.keys_.length) {\n      var key = this.keys_[srcIndex];\n      if (!(goog.structs.Map.hasKey_(seen, key))) {\n        this.keys_[destIndex++] = key;\n        seen[key] = 1;\n      }\n      srcIndex++;\n    }\n    this.keys_.length = destIndex;\n  }\n};\n\n\n/**\n * Returns the value for the given key.  If the key is not found and the default\n * value is not given this will return `undefined`.\n * @param {*} key The key to get the value for.\n * @param {DEFAULT=} opt_val The value to return if no item is found for the\n *     given key, defaults to undefined.\n * @return {V|DEFAULT} The value for the given key.\n * @template DEFAULT\n */\ngoog.structs.Map.prototype.get = function(key, opt_val) {\n  'use strict';\n  if (goog.structs.Map.hasKey_(this.map_, key)) {\n    return this.map_[key];\n  }\n  return opt_val;\n};\n\n\n/**\n * Adds a key-value pair to the map.\n * @param {*} key The key.\n * @param {V} value The value to add.\n */\ngoog.structs.Map.prototype.set = function(key, value) {\n  'use strict';\n  if (!(goog.structs.Map.hasKey_(this.map_, key))) {\n    this.setSizeInternal_(this.size + 1);\n    // TODO(johnlenz): This class lies, it claims to return an array of string\n    // keys, but instead returns the original object used.\n    this.keys_.push(/** @type {?} */ (key));\n    // Only change the version if we add a new key.\n    this.version_++;\n  }\n  this.map_[key] = value;\n};\n\n\n/**\n * Adds multiple key-value pairs from another goog.structs.Map or Object.\n * @param {?Object} map Object containing the data to add.\n * @deprecated Use goog.collections.maps.setAll(thisMap, map.entries()) if map\n *     is an ES6 or goog.structs Map, or\n *     goog.collections.maps.setAll(thisMap, Object.entries(map)) otherwise.\n */\ngoog.structs.Map.prototype.addAll = function(map) {\n  'use strict';\n  if (map instanceof goog.structs.Map) {\n    var keys = map.getKeys();\n    for (var i = 0; i < keys.length; i++) {\n      this.set(keys[i], map.get(keys[i]));\n    }\n  } else {\n    for (var key in map) {\n      this.set(key, map[key]);\n    }\n  }\n};\n\n\n/**\n * Calls the given function on each entry in the map.\n * @param {function(this:T, V, K, goog.structs.Map<K,V>)} f\n * @param {T=} opt_obj The value of \"this\" inside f.\n * @template T\n * @deprecated Use ES6 Iteration instead.\n */\ngoog.structs.Map.prototype.forEach = function(f, opt_obj) {\n  'use strict';\n  var keys = this.getKeys();\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = this.get(key);\n    f.call(opt_obj, value, key, this);\n  }\n};\n\n\n/**\n * Clones a map and returns a new map.\n * @return {!goog.structs.Map} A new map with the same key-value pairs.\n * @deprecated Use `new Map(thisMap.entries())` instead, for alignment with\n *     ES6 Map.\n */\ngoog.structs.Map.prototype.clone = function() {\n  'use strict';\n  return new goog.structs.Map(this);\n};\n\n\n/**\n * Returns a new map in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n *\n * It acts very similarly to {goog.object.transpose(Object)}.\n *\n * @return {!goog.structs.Map} The transposed map.\n * @deprecated Use goog.collections.maps.transpose instead, for alignment with\n *     ES6 Maps.\n */\ngoog.structs.Map.prototype.transpose = function() {\n  'use strict';\n  var transposed = new goog.structs.Map();\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    var value = this.map_[key];\n    transposed.set(value, key);\n  }\n\n  return transposed;\n};\n\n\n/**\n * @return {!Object} Object representation of the map.\n * @deprecated Use goog.collections.maps.toObject(thisMap) instead, for aligment\n *     with ES6 Maps.\n */\ngoog.structs.Map.prototype.toObject = function() {\n  'use strict';\n  this.cleanupKeysArray_();\n  var obj = {};\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    obj[key] = this.map_[key];\n  }\n  return obj;\n};\n\n\n/**\n * Returns an iterator that iterates over the keys in the map.  Removal of keys\n * while iterating might have undesired side effects.\n * @return {!goog.iter.Iterator} An iterator over the keys in the map.\n * @deprecated Use `keys()` with native iteration protocols, for alignment\n *     with ES6 Map.\n */\ngoog.structs.Map.prototype.getKeyIterator = function() {\n  'use strict';\n  return this.__iterator__(true);\n};\n\n/**\n * @return {!IteratorIterable<K>} An ES6 Iterator that iterates over the maps\n *     keys.\n */\ngoog.structs.Map.prototype.keys = function() {\n  'use strict';\n  return goog.iter.es6.ShimIterable.of(this.getKeyIterator()).toEs6();\n};\n\n\n/**\n * Returns an iterator that iterates over the values in the map.  Removal of\n * keys while iterating might have undesired side effects.\n * @return {!goog.iter.Iterator} An iterator over the values in the map.\n * @deprecated Use `values()` with native iteration protocols, for alignment\n *     with ES6 Map.\n */\ngoog.structs.Map.prototype.getValueIterator = function() {\n  'use strict';\n  return this.__iterator__(false);\n};\n\n/**\n * @return {!IteratorIterable<V>} An ES6 Iterator that iterates over the maps\n *     values.\n */\ngoog.structs.Map.prototype.values = function() {\n  'use strict';\n  return goog.iter.es6.ShimIterable.of(this.getValueIterator()).toEs6();\n};\n\n/**\n * @return {!IteratorIterable<!Array<K|V>>} An iterator of entries in this map.\n *     The type is actually Array<[K,V]> but this is not representable in the\n *     Closure Type System.\n */\ngoog.structs.Map.prototype.entries = function() {\n  const self = this;\n  return goog.collections.iters.map(this.keys(), function(key) {\n    return [key, self.get(key)];\n  });\n};\n\n/**\n * Returns an iterator that iterates over the values or the keys in the map.\n * This throws an exception if the map was mutated since the iterator was\n * created.\n * @param {boolean=} opt_keys True to iterate over the keys. False to iterate\n *     over the values.  The default value is false.\n * @return {!goog.iter.Iterator} An iterator over the values or keys in the map.\n * @deprecated Call either `keys` or `values` and use native iteration, for\n *     alignment with ES6 Map.\n */\ngoog.structs.Map.prototype.__iterator__ = function(opt_keys) {\n  'use strict';\n  // Clean up keys to minimize the risk of iterating over dead keys.\n  this.cleanupKeysArray_();\n\n  var i = 0;\n  var version = this.version_;\n  var selfObj = this;\n\n  var newIter = new goog.iter.Iterator;\n  newIter.nextValueOrThrow = function() {\n    'use strict';\n    if (version != selfObj.version_) {\n      throw new Error('The map has changed since the iterator was created');\n    }\n    if (i >= selfObj.keys_.length) {\n      throw goog.iter.StopIteration;\n    }\n    var key = selfObj.keys_[i++];\n    return opt_keys ? key : selfObj.map_[key];\n  };\n\n  return newIter;\n};\n\n\n/**\n * Assigns to the size property to isolate supressions of const assignment to\n * only where they are needed.\n * @param {number} newSize The size to update to.\n * @private\n */\ngoog.structs.Map.prototype.setSizeInternal_ = function(newSize) {\n  /** @suppress {const} */\n  this.size = newSize;\n};\n\n\n/**\n * Safe way to test for hasOwnProperty.  It even allows testing for\n * 'hasOwnProperty'.\n * @param {!Object} obj The object to test for presence of the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the object has the key.\n * @private\n */\ngoog.structs.Map.hasKey_ = function(obj, key) {\n  'use strict';\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n"],
"names":["goog","provide","require","structs","Map","goog.structs.Map","opt_map","var_args","map_","keys_","size","version_","argLength","arguments","length","Error","i","set","addAll","prototype","getCount","goog.structs.Map.prototype.getCount","getValues","goog.structs.Map.prototype.getValues","cleanupKeysArray_","rv","key","push","getKeys","goog.structs.Map.prototype.getKeys","concat","containsKey","goog.structs.Map.prototype.containsKey","has","goog.structs.Map.prototype.has","hasKey_","containsValue","goog.structs.Map.prototype.containsValue","val","equals","goog.structs.Map.prototype.equals","otherMap","opt_equalityFn","equalityFn","defaultEquals","get","goog.structs.Map.defaultEquals","a","b","isEmpty","goog.structs.Map.prototype.isEmpty","clear","goog.structs.Map.prototype.clear","setSizeInternal_","remove","goog.structs.Map.prototype.remove","delete","goog.structs.Map.prototype.delete","goog.structs.Map.prototype.cleanupKeysArray_","srcIndex","destIndex","seen","goog.structs.Map.prototype.get","opt_val","goog.structs.Map.prototype.set","value","goog.structs.Map.prototype.addAll","map","keys","forEach","goog.structs.Map.prototype.forEach","f","opt_obj","call","clone","goog.structs.Map.prototype.clone","transpose","goog.structs.Map.prototype.transpose","transposed","toObject","goog.structs.Map.prototype.toObject","obj","getKeyIterator","goog.structs.Map.prototype.getKeyIterator","__iterator__","goog.structs.Map.prototype.keys","iter","es6","ShimIterable","of","toEs6","getValueIterator","goog.structs.Map.prototype.getValueIterator","values","goog.structs.Map.prototype.values","entries","goog.structs.Map.prototype.entries","self","collections","iters","goog.structs.Map.prototype.__iterator__","opt_keys","version","selfObj","newIter","Iterator","nextValueOrThrow","newIter.nextValueOrThrow","StopIteration","goog.structs.Map.prototype.setSizeInternal_","newSize","goog.structs.Map.hasKey_","Object","hasOwnProperty"]
}
