{"version":3,"sources":["shadow/grove/components.cljs"],"mappings":"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","names":["shadow.grove.components/DEBUG","js/goog.define","js/goog.DEBUG","js/shadow","js/shadow.grove","js/shadow.grove.components","js/shadow.grove.components.components-ref","shadow.grove.components/components-ref","cljs.core.atom","js/shadow.grove.components.instances-ref","shadow.grove.components/instances-ref","shadow.grove.components/debug-find-roots","cljs.core/deref","cljs.core.reduce","all","instance","cljs.core.conj","var_args","G__12165","shadow.grove.components/debug-component-seq","js/Error","shadow.grove.components.debug_component_seq","cljs.core/first","root","cljs.core/tree-seq","component","shadow.grove.components/debug-find-suspended","p1__12166#","cljs.core.filter","cljs.core/vec","shadow.grove.components/get-component","env","shadow.grove.components/mark-all-dirty!","seq__12179","cljs.core/seq","chunk__12180","count__12181","i__12182","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","comp","shadow.grove.components/make-component-init","args","cljs.core/vector?","shadow.grove.components/ComponentInit","cljs.core/PROTOCOL_SENTINEL","shadow.grove.protocols/ComponentConfig","self__","args12192","args__5260__auto__","cljs.core/aclone","G__12193","this","a1","a2","a3","a4","a5","a6","shadow.grove.components/component-config?","x","shadow.grove.components/safe-inc","shadow.grove.components/sort-fn","a","b","cljs.core/compare","shadow.grove.components/find-first-set-bit-idx","search","idx","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.grove.components/EffectHook","shadow.grove.components/->EffectHook","deps","callback","callback-result","should-call?","component-handle","ch","new","new-deps","cljs.core.not_EQ_","cljs.core/fn?","did-render?","shadow.grove.components/ComponentHookHandle","shadow.grove.components/->ComponentHookHandle","shadow.grove.components/SimpleVal","shadow.grove.components/->SimpleVal","val","next","new-val","updated?","shadow.grove.components/maybe-wrap-val","G__12291","G__12292","G__12293","shadow.grove.components/ManagedComponent","current-idx","hooks-with-effects","dirty-from-args","dirty-hooks","updated-hooks","needs-render?","work-set","js/Set","e","c","parent-env","config","scheduler","temp__5808__auto__","parent","component-env","cljs.core.update","cljs.core.assoc","cljs.core.swap_BANG_","cljs.core/conj","G__12299","js/document.createComment","G__12301","shadow.arborist.common/managed-root","hooks","js/Array","goog/getUid","shadow.arborist.protocols/dom-first","anchor","shadow.arborist.protocols/dom-insert","dom-entered?","error?","shadow.arborist.protocols/dom-entered!","and__5043__auto__","shadow.grove.components/component-init?","other","stable-args","cljs.core.get","or__5045__auto__","old-args","new-args","p1__12281#","cljs.core/every?","cljs.core._EQ_","cljs.core.nth","custom-check","G__12317","G__12318","dom-remove?","cljs.core/disj","destroyed?","hook","shadow.arborist.protocols/destroy!","p__12330","map__12331","cljs.core/--destructure-map","ev-id","ev-map","origin","handler","cljs.core/qualified-keyword?","cljs.core.ex_info","temp__5806__auto__","shadow.grove.protocols/handle-event!","js/console.warn","work-task","trigger","e12336","iter","current","ex","err-fn","shadow.grove.protocols/hook-value","js/Math.min","suspended?","dirty-bits","cljs.core/not","run-fn","handle","shadow.grove.protocols/hook-init!","cljs.core/native-satisfies?","shadow.grove.protocols/IHookDomEffect","shadow.grove.protocols/hook-ready?","hook-config","deps-updated?","run","next-hook","_","cljs.core/type","did-update?","shadow.grove.protocols/hook-deps-update!","shadow.grove.protocols/hook-update!","hook-causing-suspend","frag","rendered-args","shadow.arborist.protocols/update!","item","event","ev-value","cljs.core/Keyword","cljs.core/map?","event-env","dom-event","shadow.grove.protocols/run-now!","shadow.grove.components/component-create","G__12397","shadow.grove.protocols/work!","shadow.grove.components/->ComponentInit","shadow.grove.components/HookConfig","shadow.grove.components/->HookConfig","depends-on","affects","shadow.grove.components/make-hook-config","cljs.core/nat-int?","shadow.grove.components/make-component-config","component-name","opts","check-args-fn","render-deps","render-fn","events","cljs.core/array?","p1__12417#","cfg","cljs.core/assoc","shadow.grove.components/get-arg","shadow.grove.components/check-args!","expected","shadow.grove.components/arg-triggers-hooks!","shadow.grove.components/arg-triggers-render!","shadow.grove.components/get-hook-value","shadow.grove.components/get-events","shadow.grove.components/get-parent","shadow.grove.components/get-component-name"],"sourcesContent":["(ns shadow.grove.components\n  (:require-macros [shadow.grove.components])\n  (:require\n    [goog.object :as gobj]\n    [shadow.cljs.modern :refer (defclass)]\n    [shadow.arborist :as sa]\n    [shadow.arborist.common :as common]\n    [shadow.arborist.protocols :as ap]\n    [shadow.arborist.attributes :as a]\n    [shadow.grove.runtime :as rt]\n    [shadow.grove.protocols :as gp]))\n\n(def ^{:tag boolean\n       :jsdoc [\"@define {boolean}\"]}\n  DEBUG\n  (js/goog.define \"shadow.grove.components.DEBUG\" js/goog.DEBUG))\n\n;; this file is an exercise in writing the least idiomatic clojure code possible\n;; shield your eyes and beware!\n\n(defonce components-ref (atom {}))\n(defonce instances-ref (atom #{}))\n\n(set! *warn-on-infer* false)\n\n(defn debug-find-roots []\n  (reduce\n    (fn [all instance]\n      (if (::parent (.-component-env instance))\n        all\n        (conj all instance)))\n    []\n    @instances-ref))\n\n(defn debug-component-seq\n  ([]\n   (debug-component-seq (first (debug-find-roots))))\n  ([root]\n   (tree-seq\n     (fn [component]\n       true)\n     (fn [component]\n       (.-child-components component))\n     root)))\n\n(defn debug-find-suspended []\n  (->> (debug-component-seq)\n       (filter #(.-suspended? %))\n       (vec)))\n\n(set! *warn-on-infer* true)\n\n(defn get-component [env]\n  (::component env))\n\n;; called on start for hot-reload purposes\n;; otherwise components may decide to skip rendering and preventing nested UI updates\n;; will be stripped in release builds\n(defn mark-all-dirty! []\n  (doseq [^ManagedComponent comp @instances-ref]\n    (.set-render-required! comp)))\n\n(declare ^{:arglists '([x])} component-init?)\n(declare ComponentInit)\n\n(defn- make-component-init [component args]\n  ;; FIXME: maybe use array, never directly accessible anyways\n  {:pre [(vector? args)]}\n  (ComponentInit. component args))\n\n(extend-type gp/ComponentConfig\n  cljs.core/IFn\n  (-invoke\n    ([this]\n     (make-component-init this []))\n    ([this a1]\n     (make-component-init this [a1]))\n    ([this a1 a2]\n     (make-component-init this [a1 a2]))\n    ([this a1 a2 a3]\n     (make-component-init this [a1 a2 a3]))\n    ([this a1 a2 a3 a4]\n     (make-component-init this [a1 a2 a3 a4]))\n    ([this a1 a2 a3 a4 a5]\n     (make-component-init this [a1 a2 a3 a4 a5]))\n    ([this a1 a2 a3 a4 a5 a6]\n     (make-component-init this [a1 a2 a3 a4 a5 a6]))\n    ;; FIXME: add more, user should really use maps at this point\n    ))\n\n(defn component-config? [x]\n  (instance? gp/ComponentConfig x))\n\n(defn safe-inc [x]\n  (if (nil? x)\n    0\n    (inc x)))\n\n(set! *warn-on-infer* false)\n\n(defn sort-fn [^ManagedComponent a ^ManagedComponent b]\n  (compare\n    (-> a (.-component-env) (::depth))\n    (-> b (.-component-env) (::depth))\n    ))\n\n;; FIXME: there are likely faster ways to do this\n(defn find-first-set-bit-idx [search]\n  {:pre [(not (zero? search))]}\n  (loop [search search\n         idx 0]\n    (if (identical? 1 (bit-and search 1))\n      idx\n      (recur (bit-shift-right search 1) (inc idx)))))\n\n(deftype EffectHook\n  [^:mutable deps\n   ^:mutable ^function callback\n   ^:mutable callback-result\n   ^:mutable ^boolean should-call?\n   ^:mutable ^not-native component-handle]\n\n  gp/IHook\n  (hook-init! [this ch]\n    (set! component-handle ch))\n\n  (hook-ready? [this] true)\n  (hook-value [this] ::effect-hook)\n  (hook-update! [this] false)\n\n  (hook-deps-update! [this ^EffectHook new]\n    ;; comp-did-update! will call it\n    ;; FIXME: (sg/effect :mount (fn [] ...)) is only called once ever\n    ;; should it be called in case it uses other hook data?\n    (set! callback (.-callback new))\n\n    ;; run after each render\n    ;; (sg/effect :render (fn [env] ...))\n\n    ;; run once on mount, any constant really works\n    ;; (sg/effect :mount (fn [env] ...))\n\n    ;; when when [a b] changes\n    ;; (sg/effect [a b] (fn [env] ....))\n\n    (let [new-deps (.-deps new)]\n      (when (not= new-deps :render)\n        (set! should-call? (not= deps new-deps))\n        (set! deps new-deps)))\n\n    ;; doesn't have a usable output\n    false)\n\n  (hook-destroy! [this]\n    (when (fn? callback-result)\n      (callback-result)))\n\n  gp/IHookDomEffect\n  (hook-did-update! [this ^boolean did-render?]\n    (when (and did-render? should-call?)\n      (when (fn? callback-result)\n        (callback-result))\n\n      (set! callback-result (callback (gp/get-component-env component-handle)))\n\n      (when (not= deps :render)\n        (set! should-call? false))\n      )))\n\n(deftype ComponentHookHandle [^not-native component idx]\n  gp/IEnvSource\n  (get-component-env [this]\n    (.-component-env component))\n\n  gp/ISchedulerSource\n  (get-scheduler [this]\n    (.-scheduler component))\n\n  gp/IComponentHookHandle\n  (hook-invalidate! [this]\n    (.invalidate-hook! component idx)))\n\n(deftype SimpleVal [^:mutable val]\n  gp/IHook\n  (hook-init! [this ch])\n  (hook-ready? [this] true)\n  (hook-value [this] val)\n  (hook-update! [this])\n  (hook-deps-update! [this ^SimpleVal next]\n    (let [new-val (.-val next)\n          updated? (not= new-val val)]\n      (set! val new-val)\n      updated?))\n  (hook-destroy! [this]))\n\n(defn maybe-wrap-val [val]\n  (if (implements? gp/IHook val)\n    val\n    (SimpleVal. val)))\n\n(defclass ManagedComponent\n  (field ^not-native scheduler)\n  (field ^not-native parent-env)\n  (field ^not-native component-env)\n  (field ^ComponentConfig config)\n  (field root)\n  (field args)\n  (field rendered-args)\n  (field ^number current-idx (int 0))\n  (field ^array hooks)\n  (field ^array hooks-with-effects #js [])\n  (field ^number dirty-from-args (int 0))\n  (field ^number dirty-hooks (int 0))\n  (field ^number updated-hooks (int 0))\n  (field ^boolean needs-render? true) ;; initially needs a render\n  (field ^boolean suspended? false)\n  (field ^boolean destroyed? false)\n  (field ^boolean error? false)\n  (field ^boolean dom-entered? false)\n  (field work-set (js/Set.)) ;; sub-tree pending work\n\n  (constructor [this e c a]\n    (set! parent-env e)\n    (set! config c)\n    (set! args a)\n    (set! scheduler (::scheduler parent-env))\n    (when DEBUG\n      ;; only keeping this info for debugging purposes currently, don't think its needed otherwise\n      ;; use js/Set since it always maintains insertion order which makes debugging easier\n      (set! this -child-components (js/Set.))\n      (when-some [parent (::component parent-env)]\n        (.. parent -child-components (add this))))\n\n    (set! component-env\n      (-> parent-env\n          (update ::depth safe-inc)\n          (assoc ::parent (::component parent-env)\n                 ::ap/dom-event-handler this\n                 ::component this\n                 ::event-target this\n                 ::scheduler this)))\n\n    ;; marks component boundaries in dev mode for easier inspect\n    (when DEBUG\n      (swap! instances-ref conj this)\n      (set! (.-marker-before this)\n        (doto (js/document.createComment (str \"component: \" (.-component-name config)))\n          (set! -shadow$instance this)))\n      (set! (.-marker-after this)\n        (doto (js/document.createComment (str \"/component: \" (.-component-name config)))\n          (set! -shadow$instance this))))\n\n    (set! root (common/managed-root component-env))\n    (set! hooks (js/Array. (alength (.-hooks config)))))\n\n  cljs.core/IHash\n  (-hash [this]\n    (goog/getUid this))\n\n  ap/IManaged\n  (dom-first [this]\n    (if DEBUG\n      (.-marker-before this)\n      (ap/dom-first root)))\n\n  (dom-insert [this parent anchor]\n    (when DEBUG\n      (.insertBefore parent (.-marker-before this) anchor))\n    (ap/dom-insert root parent anchor)\n    (when DEBUG\n      (.insertBefore parent (.-marker-after this) anchor)))\n\n  (dom-entered! [this]\n    (set! dom-entered? true)\n    (when-not error?\n      (ap/dom-entered! root)\n      ;; trigger first on mount\n      (.did-update! this true)))\n\n  (supports? [this next]\n    (and (component-init? next)\n         (let [other (.-component ^ComponentInit next)]\n           (identical? config other))\n         ;; (defc ui-thing [^:stable ident] ...)\n         ;; should cause unmount on changing ident\n         (let [stable-args (-> config .-opts (get ::stable-args))]\n           (or (nil? stable-args)\n               (let [old-args args\n                     new-args (.-args next)]\n                 (every? #(= (nth old-args %) (nth new-args %)) stable-args))))\n         (let [custom-check (-> config .-opts (get :supports?))]\n           (or (nil? custom-check)\n               (custom-check args (.-args next))))))\n\n  (dom-sync! [this ^ComponentInit next]\n    (. config (check-args-fn this args (.-args next)))\n    (set! args (.-args next))\n    (when (.work-pending? this)\n      (.schedule! this ::dom-sync!)))\n\n  (destroy! [this ^boolean dom-remove?]\n    (.unschedule! this)\n    (when DEBUG\n      (swap! instances-ref disj this)\n\n      (when-some [parent (::parent component-env)]\n        (.. parent -child-components (delete this)))\n\n      (when dom-remove?\n        (.remove (.-marker-before this))\n        (.remove (.-marker-after this))))\n\n    (set! destroyed? true)\n\n    (.forEach hooks\n      (fn [^not-native hook]\n        (when hook\n          (gp/hook-destroy! hook))))\n\n    (ap/destroy! root dom-remove?))\n\n  ;; FIXME: figure out default event handler\n  ;; don't want to declare all events all the time\n  gp/IHandleEvents\n  (handle-event! [this {ev-id :e :as ev-map} e origin]\n    (let [handler\n          (cond\n            (qualified-keyword? ev-id)\n            (or (get (.-events config) ev-id)\n                (get (.-opts config) ev-id))\n\n            :else\n            (throw (ex-info \"unknown event\" {:event ev-map})))]\n\n      (if handler\n        (handler component-env ev-map e origin)\n\n        ;; no handler, try parent\n        (if-some [parent (::event-target parent-env)]\n          (gp/handle-event! parent ev-map e origin)\n          (js/console.warn \"event not handled\" ev-id ev-map)))))\n\n  gp/IScheduleWork\n  (did-suspend! [this work-task]\n    (gp/did-suspend! scheduler work-task))\n\n  (did-finish! [this work-task]\n    (gp/did-finish! scheduler work-task))\n\n  (schedule-work! [this work-task trigger]\n    (when (zero? (.-size work-set))\n      (gp/schedule-work! scheduler this trigger))\n\n    (.add work-set work-task))\n\n  (unschedule! [this work-task]\n    (.delete work-set work-task)\n\n    (when (zero? (.-size work-set))\n      (gp/unschedule! scheduler this)))\n\n  (run-now! [this callback trigger]\n    (gp/run-now! scheduler callback trigger))\n\n  ;; parent tells us to work\n  gp/IWork\n  (work! [this]\n    (when-not error?\n      (try\n        ;; always complete our own work first\n        ;; a re-render may cause the child tree to change\n        ;; and maybe some work to disappear\n        (while ^boolean (.work-pending? this)\n          (.run-next! this))\n\n        ;; FIXME: only process children when this is done and not suspended?\n        (let [iter (.values work-set)]\n          (loop []\n            (let [current (.next iter)]\n              (when (not ^boolean (.-done current))\n                (gp/work! ^not-native (.-value current))\n\n                ;; should time slice later and only continue work\n                ;; until a given time budget is consumed\n                (recur)))))\n        (catch :default ex\n          (.handle-error! this ex)))))\n\n  ;; FIXME: should have an easier way to tell shadow-cljs not to create externs for these\n  Object\n  (handle-error! [this ex]\n    (set! error? true)\n    (.unschedule! this)\n\n    (let [err-fn (::error-handler parent-env)]\n      (err-fn this ex)))\n\n  (get-hook-value [this idx]\n    (gp/hook-value (aget hooks idx)))\n\n  (invalidate-hook! [this idx]\n    ;; (js/console.log \"invalidate-hook!\" idx current-idx (.-component-name config) this)\n\n    (set! dirty-hooks (bit-set dirty-hooks idx))\n\n    ;; don't set higher when currently at lower index, would otherwise skip work\n    (set! current-idx (js/Math.min idx current-idx))\n\n    ;; always need to resume so the invalidated hooks can do work\n    ;; could check if actually suspended but no need\n    (set! suspended? false)\n\n    (.schedule! this ::hook-invalidate!))\n\n  (mark-hooks-dirty! [this dirty-bits]\n    (set! dirty-hooks (bit-or dirty-hooks dirty-bits))\n    (set! current-idx (find-first-set-bit-idx dirty-hooks)))\n\n  (mark-dirty-from-args! [this dirty-bits]\n    (set! dirty-from-args (bit-or dirty-from-args dirty-bits))\n    (.mark-hooks-dirty! this dirty-bits))\n\n  (set-render-required! [this]\n    (set! needs-render? true)\n    (set! current-idx (js/Math.min current-idx (alength (.-hooks config)))))\n\n  (run-next! [^not-native this]\n    #_(js/console.log \"Component:run-next!\"\n        (.-component-name config)\n        current-idx\n        (alength (.-hooks config))\n        dirty-hooks\n        (bit-test dirty-hooks current-idx)\n        this)\n    (if (identical? current-idx (alength (.-hooks config)))\n      ;; all hooks done\n      (.component-render! this)\n\n      ;; process hooks in order, starting at the lowest index invalidated\n      (let [hook (aget hooks current-idx)]\n        ;; (js/console.log \"Component:run-next!\" current-idx (:component-name config) (pr-str (type hook)) this)\n\n        (cond\n          ;; doesn't exist, create it\n          (not hook)\n          (let [^function run-fn (-> (.-hooks config) (aget current-idx) (.-run))\n                handle (ComponentHookHandle. this current-idx)\n                val (run-fn this)\n                hook (maybe-wrap-val val)]\n\n            ;; (js/console.log \"Component:init-hook!\" (:component-name config) current-idx val hook)\n\n            (aset hooks current-idx hook)\n\n            (gp/hook-init! hook handle)\n\n            ;; previous hook may have marked hook as dirty since it used data\n            ;; but hook may have not been constructed yet, constructing must clear dirty bit\n            (set! dirty-hooks (bit-clear dirty-hooks current-idx))\n            ;; construction counts as updated since value became available for first time\n            (set! updated-hooks (bit-set updated-hooks current-idx))\n\n            (when (bit-test (.-render-deps config) current-idx)\n              (set! needs-render? true))\n\n            (when (satisfies? gp/IHookDomEffect hook)\n              (.push hooks-with-effects hook))\n\n            (if (gp/hook-ready? hook)\n              (set! current-idx (inc current-idx))\n              (.suspend! this current-idx)))\n\n          ;; marked dirty, update it\n          ;; make others dirty if actually updated\n          (bit-test dirty-hooks current-idx)\n          (let [hook-config (aget (.-hooks config) current-idx)\n\n                deps-updated?\n                ;; dirty hooks this depends-on should trigger an update\n                ;; or changed args used by this should trigger\n                (or (pos? (bit-and (.-depends-on hook-config) updated-hooks))\n                    (bit-test dirty-from-args current-idx))\n\n                ^function run (.-run hook-config)\n\n                next-hook\n                (maybe-wrap-val (run this))\n\n                _ (when-not (identical? (type hook) (type next-hook))\n                    (throw (ex-info \"illegal hook value, type cannot change\" {:old hook :new next-hook})))\n\n                did-update? ;; checks if hook deps changed as well, calling init again\n                (if deps-updated?\n                  (gp/hook-deps-update! hook next-hook)\n                  (gp/hook-update! hook))]\n\n            #_(js/console.log \"Component:hook-update!\"\n                (:component-name config)\n                current-idx\n                deps-updated?\n                did-update?\n                hook)\n\n            (set! dirty-hooks (bit-clear dirty-hooks current-idx))\n\n            (when did-update?\n              (set! updated-hooks (bit-set updated-hooks current-idx))\n              (set! dirty-hooks (bit-or dirty-hooks (.-affects hook-config)))\n\n              (when (bit-test (.-render-deps config) current-idx)\n                (set! needs-render? true)))\n\n            (if (gp/hook-ready? hook)\n              (set! current-idx (inc current-idx))\n              (.suspend! this current-idx)))\n\n          :else\n          (set! current-idx (inc current-idx))))))\n\n  (work-pending? [this]\n    (and (not destroyed?)\n         (not suspended?)\n         (not error?)\n         (or (pos? dirty-hooks)\n             needs-render?\n             (>= (alength (.-hooks config)) current-idx))))\n\n  (suspend! [this hook-causing-suspend]\n    ;; (js/console.log \"suspending\" hook-causing-suspend this)\n\n    ;; just in case we were already scheduled. should really track this more efficiently\n    (.unschedule! this)\n    (gp/did-suspend! scheduler this)\n    (set! suspended? true))\n\n  (schedule! [this trigger]\n    (when-not destroyed?\n      (gp/schedule-work! scheduler this trigger)))\n\n  (unschedule! [this]\n    (gp/unschedule! scheduler this))\n\n  (component-render! [^ManagedComponent this]\n    (assert (zero? dirty-hooks) \"Got to render while hooks are dirty\")\n    ;; (js/console.log \"Component:render!\" (.-component-name config) updated-hooks needs-render? suspended? destroyed? this)\n    (set! updated-hooks (int 0))\n    (set! dirty-from-args (int 0))\n\n    (let [did-render? needs-render?]\n      (when needs-render?\n        (let [frag (. config (render-fn this))]\n\n          (set! rendered-args args)\n          (set! needs-render? false)\n\n          (ap/update! root frag)))\n\n      ;; only trigger dom effects when mounted\n      (when dom-entered?\n        (.did-update! this did-render?)))\n\n    ;; must keep this for work scheduling so it knows its done\n    (set! current-idx (inc current-idx))\n\n    (gp/did-finish! scheduler this)\n    (.unschedule! this))\n\n  (did-update! [this did-render?]\n    (.forEach hooks-with-effects\n      (fn [^not-native item]\n        (gp/hook-did-update! item did-render?)))))\n\n;; FIXME: no clue why I can't put this in ManagedComponent directly\n;; compiler complains with undeclared var ManagedComponent\n;; probably something in defclass I missed\n\n(extend-type ManagedComponent\n  ap/IHandleDOMEvents\n  (validate-dom-event-value! [this env event ev-value]\n    (when-not (or (keyword? ev-value) (map? ev-value))\n      (throw\n        (ex-info\n          (str \"event: \" event \" expects a map or keyword value\")\n          {:event event :value ev-value}))))\n\n  ;; event is \"click\" for :on-click etc which we just drop\n  (handle-dom-event! [this event-env event ev-value dom-event]\n    (let [ev-map\n          (if (map? ev-value)\n            ev-value\n            {:e ev-value})]\n\n      ;; (js/console.log \"dom-event\" this event-env event ev-map dom-event)\n      (gp/run-now! (.-scheduler this)\n        #(gp/handle-event! this ev-map dom-event event-env)\n        ::handle-dom-event!))))\n\n(set! *warn-on-infer* true)\n\n(defn component-create [env ^gp/ComponentConfig config args]\n  (when ^boolean js/goog.DEBUG\n    (when-not (instance? gp/ComponentConfig config)\n      (throw (ex-info \"not a component definition\" {:config config :props args}))))\n\n  (doto (ManagedComponent. env config args)\n    ;; do as much work as possible now\n    ;; only go async when suspended\n    (gp/work!)))\n\n(deftype ComponentInit [component args]\n  ap/IConstruct\n  (as-managed [this env]\n    (component-create env component args))\n\n  IEquiv\n  (-equiv [this ^ComponentInit other]\n    (and (instance? ComponentInit other)\n         (identical? component (.-component other))\n         (= args (.-args other)))))\n\n(defn component-init? [x]\n  (instance? ComponentInit x))\n\n(deftype HookConfig [depends-on affects run])\n\n(defn make-hook-config\n  \"used by defc macro, do not use directly\"\n  [depends-on affects run]\n  {:pre [(nat-int? depends-on)\n         (nat-int? affects)\n         (fn? run)]}\n  (HookConfig. depends-on affects run))\n\n(defn make-component-config\n  \"used by defc macro, do not use directly\"\n  [component-name\n   hooks\n   opts\n   check-args-fn\n   render-deps\n   render-fn\n   events]\n  {:pre [(string? component-name)\n         (array? hooks)\n         (every? #(instance? HookConfig %) hooks)\n         (map? opts)\n         (fn? check-args-fn)\n         (nat-int? render-deps)\n         (fn? render-fn)\n         (map? events)]}\n\n  (let [cfg\n        (gp/ComponentConfig.\n          component-name\n          hooks\n          opts\n          check-args-fn\n          render-deps\n          render-fn\n          events)]\n\n    (when ^boolean js/goog.DEBUG\n      (swap! components-ref assoc component-name cfg))\n\n    cfg))\n\n;; these are called by defc macro, do not delete!\n;; cursive marks these as unused\n\n(defn get-arg ^not-native [^ManagedComponent comp idx]\n  (-nth ^not-native (.-args comp) idx))\n\n(defn check-args! [^ManagedComponent comp new-args expected]\n  (assert (>= (count new-args) expected) (str \"component \" (. ^ComponentConfig (. comp -config) -component-name) \" expected at least \" expected \" arguments\")))\n\n(defn arg-triggers-hooks! [^ManagedComponent comp idx dirty-bits]\n  (.mark-dirty-from-args! comp dirty-bits))\n\n(defn arg-triggers-render! [^ManagedComponent comp idx]\n  (.set-render-required! comp))\n\n(defn get-hook-value [^ManagedComponent comp idx]\n  (.get-hook-value comp idx))\n\n(defn get-events [^ManagedComponent comp]\n  ;; FIXME: ... loses typehints?\n  (. ^clj (. comp -config) -events))\n\n(defn get-parent [^ManagedComponent comp]\n  (get-component (. comp -parent-env)))\n\n(defn get-component-name [^ManagedComponent comp]\n  (. ^clj (. comp -config) -component-name))\n\n"]}