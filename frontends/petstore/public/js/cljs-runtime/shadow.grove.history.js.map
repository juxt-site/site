{"version":3,"sources":["shadow/grove/history.cljs"],"mappings":"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","names":["p__21775","map__21776","cljs.core/--destructure-map","cljs.core.get","js/Error","shadow.grove.history/init!","rt-ref","start-token","path-prefix","use-fragment","root-el","config","cljs.core._EQ_","clojure.string/starts-with?","clojure.string/ends-with?","get-token","cljs.core/not","path","js/window.location.pathname","cljs.core.subs","cljs.core/count","cljs.core.ex_info","hash","js/window.location.hash","trigger-route!","token","tokens","clojure.string.split","shadow.grove/run-tx!","first-token","shadow.arborist.attributes/add-attr","env","node","oval","nval","shadow.grove.events/reg-fx","p__21782","p__21783","map__21784","map__21785","transact!","title","js/window.history.pushState","or__5045__auto__","js/document.title","js/setTimeout","G__21786","cljs.core.swap_BANG_","rt","cljs.core.assoc","cljs.core.update","cljs.core/conj","js/document.body","e","temp__5804__auto__","a","G__21787","href","a-target","and__5043__auto__","cljs.core/seq","js/window.history.replaceState","js/window.addEventListener"],"sourcesContent":["(ns shadow.grove.history\n  (:require\n    [clojure.string :as str]\n    [shadow.grove :as sg]\n    [shadow.grove.runtime :as rt]\n    [shadow.grove.events :as ev]\n    [shadow.arborist.attributes :as attr]))\n\n(defn init!\n  [rt-ref\n   {:keys [start-token path-prefix use-fragment root-el]\n    :or {start-token \"/\"\n         path-prefix \"\"\n         use-fragment false}\n    :as config}]\n\n  {:pre [(or (= \"\" path-prefix)\n             (and (string? path-prefix)\n                  (str/starts-with? path-prefix \"/\")\n                  (not (str/ends-with? path-prefix \"/\"))))\n\n         (or (= \"/\" start-token)\n             (and (str/starts-with? start-token \"/\")\n                  (not (str/ends-with? start-token \"/\"))))\n         ]}\n\n  (let [get-token\n        (fn []\n          (if-not use-fragment\n            (let [path js/window.location.pathname]\n              (cond\n                (= path path-prefix)\n                \"/\"\n\n                (str/starts-with? path path-prefix)\n                (subs path (count path-prefix))\n\n                :else\n                (throw (ex-info \"path did not match path prefix\" {:path path :path-prefix path-prefix}))\n                ))\n            (let [hash js/window.location.hash]\n              ;; always start everything with a / even when using hash\n              ;; is \"\" when url doesn't have a hash, otherwise #foo\n              (if (= hash \"\")\n                \"/\"\n                (subs js/window.location.hash (+ 1 (count path-prefix)))))))\n\n        trigger-route!\n        (fn []\n          ;; token must start with /, strip it to get tokens vector\n          (let [token (get-token)\n                tokens (str/split (subs token 1) #\"/\")]\n\n            (sg/run-tx! rt-ref {:e :ui/route! :token token :tokens tokens})))\n\n        first-token\n        (get-token)]\n\n    (attr/add-attr :ui/href\n      (fn [env node oval nval]\n        (when nval\n          (when-not (str/starts-with? nval \"/\")\n            (throw (ex-info (str \":ui/href must start with / got \" nval)\n                     {:val nval})))\n\n          (set! node -href\n            (if use-fragment\n              (str \"#\" path-prefix nval)\n              (str path-prefix\n                   (if-not (str/ends-with? path-prefix \"/\")\n                     nval\n                     (subs nval 1))))))))\n\n    (ev/reg-fx rt-ref :ui/redirect!\n      (fn [{:keys [transact!] :as env} {:keys [token title]}]\n        {:pre [(str/starts-with? token \"/\")]}\n\n        (js/window.history.pushState\n          nil\n          (or title js/document.title)\n          (str path-prefix token))\n\n        (let [tokens (str/split (subs token 1) #\"/\")]\n          ;; FIXME: there needs to be cleaner way to start another tx from fx\n          ;; currently forcing them to be async so the initial tx can conclude\n          (js/setTimeout #(transact! {:e :ui/route! :token token :tokens tokens}) 0)\n          )))\n\n    ;; immediately trigger initial route when this is initialized\n    ;; don't wait for first env-init, thats problematic with multiple roots\n    (trigger-route!)\n\n    (swap! rt-ref\n      (fn [rt]\n        (-> rt\n            (assoc ::config config)\n            (update ::rt/env-init conj\n              (fn [env]\n                ;; fragment uses hashchange event so we can skip checking clicks\n                (when-not use-fragment\n                  (.addEventListener (or root-el js/document.body) \"click\"\n                    (fn [^js e]\n                      (when (and (zero? (.-button e))\n                                 (not (or (.-shiftKey e) (.-metaKey e) (.-ctrlKey e) (.-altKey e))))\n                        (when-let [a (some-> e .-target (.closest \"a\"))]\n\n                          (let [href (.getAttribute a \"href\")\n                                a-target (.getAttribute a \"target\")]\n\n                            (when (and href (seq href) (str/starts-with? href path-prefix) (nil? a-target))\n                              (.preventDefault e)\n\n                              (js/window.history.pushState nil js/document.title href)\n\n                              (trigger-route!)\n                              )))))))\n\n                (when (and (= \"/\" first-token) (seq start-token))\n                  (js/window.history.replaceState\n                    nil\n                    js/document.title\n                    (str (when use-fragment \"#\") path-prefix start-token)))\n\n                (js/window.addEventListener \"popstate\"\n                  (fn [e]\n                    (trigger-route!)))\n\n                (when use-fragment\n                  (js/window.addEventListener \"hashchange\"\n                    (fn [e]\n                      (trigger-route!))))\n\n                env)))))))"]}