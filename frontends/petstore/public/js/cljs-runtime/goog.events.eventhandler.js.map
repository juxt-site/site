{
"version":3,
"file":"goog.events.eventhandler.js",
"lineCount":124,
"mappings":"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",
"sources":["goog/events/eventhandler.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Class to create objects which want to handle multiple events\n * and have their listeners easily cleaned up via a dispose method.\n *\n * Example:\n * <pre>\n * function Something() {\n *   Something.base(this);\n *\n *   ... set up object ...\n *\n *   // Add event listeners\n *   this.listen(this.starEl, goog.events.EventType.CLICK, this.handleStar);\n *   this.listen(this.headerEl, goog.events.EventType.CLICK, this.expand);\n *   this.listen(this.collapseEl, goog.events.EventType.CLICK, this.collapse);\n *   this.listen(this.infoEl, goog.events.EventType.MOUSEOVER, this.showHover);\n *   this.listen(this.infoEl, goog.events.EventType.MOUSEOUT, this.hideHover);\n * }\n * goog.inherits(Something, goog.events.EventHandler);\n *\n * Something.prototype.disposeInternal = function() {\n *   Something.base(this, 'disposeInternal');\n *   goog.dom.removeNode(this.container);\n * };\n *\n *\n * // Then elsewhere:\n *\n * var activeSomething = null;\n * function openSomething() {\n *   activeSomething = new Something();\n * }\n *\n * function closeSomething() {\n *   if (activeSomething) {\n *     activeSomething.dispose();  // Remove event listeners\n *     activeSomething = null;\n *   }\n * }\n * </pre>\n */\n\ngoog.provide('goog.events.EventHandler');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.events');\ngoog.require('goog.object');\ngoog.requireType('goog.events.Event');\ngoog.requireType('goog.events.EventId');\ngoog.requireType('goog.events.EventTarget');\ngoog.requireType('goog.events.EventWrapper');\n\n\n\n/**\n * Super class for objects that want to easily manage a number of event\n * listeners.  It allows a short cut to listen and also provides a quick way\n * to remove all events listeners belonging to this object.\n * @param {SCOPE=} opt_scope Object in whose scope to call the listeners.\n * @constructor\n * @extends {goog.Disposable}\n * @template SCOPE\n */\ngoog.events.EventHandler = function(opt_scope) {\n  'use strict';\n  goog.Disposable.call(this);\n  // TODO(mknichel): Rename this to this.scope_ and fix the classes in google3\n  // that access this private variable. :(\n  this.handler_ = opt_scope;\n\n  /**\n   * Keys for events that are being listened to.\n   * @type {!Object<!goog.events.Key>}\n   * @private\n   */\n  this.keys_ = {};\n};\ngoog.inherits(goog.events.EventHandler, goog.Disposable);\n\n\n/**\n * Utility array used to unify the cases of listening for an array of types\n * and listening for a single event, without using recursion or allocating\n * an array each time.\n * @type {!Array<string>}\n * @const\n * @private\n */\ngoog.events.EventHandler.typeArray_ = [];\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler's handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null=}\n *     opt_fn Optional callback function to be used as the listener or an object\n *     with handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listen = function(\n    src, type, opt_fn, opt_options) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  return self.listen_(src, type, opt_fn, opt_options);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler's handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|\n *     null|undefined} fn Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|!AddEventListenerOptions|undefined} options\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenWithScope = function(\n    src, type, fn, options, scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listen_(src, type, fn, options, scope);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler's handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn\n *     Optional callback function to be used as the listener or an object with\n *     handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @param {Object=} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listen_ = function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  if (!Array.isArray(type)) {\n    if (type) {\n      goog.events.EventHandler.typeArray_[0] = type.toString();\n    }\n    type = goog.events.EventHandler.typeArray_;\n  }\n  for (var i = 0; i < type.length; i++) {\n    var listenerObj = goog.events.listen(\n        src, type[i], opt_fn || self.handleEvent, opt_options || false,\n        opt_scope || self.handler_ || self);\n\n    if (!listenerObj) {\n      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT\n      // (goog.events.CaptureSimulationMode) in IE8-, it will return null\n      // value.\n      return self;\n    }\n\n    var key = listenerObj.key;\n    self.keys_[key] = listenerObj;\n  }\n\n  return self;\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler's handleEvent method will be used. After the event has fired the\n * event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null=}\n * opt_fn\n *    Optional callback function to be used as the listener or an object with\n *    handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenOnce = function(\n    src, type, opt_fn, opt_options) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  return self.listenOnce_(src, type, opt_fn, opt_options);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler's handleEvent method will be used. After the event has fired the\n * event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|\n *     null|undefined} fn Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|undefined} capture Optional whether to use capture phase.\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenOnceWithScope = function(\n    src, type, fn, capture, scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listenOnce_(src, type, fn, capture, scope);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler's handleEvent method will be used. After the event has fired\n * the event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn\n *    Optional callback function to be used as the listener or an object with\n *    handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @param {Object=} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listenOnce_ = function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  if (Array.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      self.listenOnce_(src, type[i], opt_fn, opt_options, opt_scope);\n    }\n  } else {\n    var listenerObj = goog.events.listenOnce(\n        src, type, opt_fn || self.handleEvent, opt_options,\n        opt_scope || self.handler_ || self);\n    if (!listenerObj) {\n      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT\n      // (goog.events.CaptureSimulationMode) in IE8-, it will return null\n      // value.\n      return self;\n    }\n\n    var key = listenerObj.key;\n    self.keys_[key] = listenerObj;\n  }\n\n  return self;\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:SCOPE, ?):?|{handleEvent:function(?):?}|null} listener\n *     Callback method, or an object with a handleEvent function.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n */\ngoog.events.EventHandler.prototype.listenWithWrapper = function(\n    src, wrapper, listener, opt_capt) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Remove the opt_scope from this function and then\n  // templatize it.\n  return self.listenWithWrapper_(src, wrapper, listener, opt_capt);\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:T, ?):?|{handleEvent:function(this:T, ?):?}|null}\n *     listener Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|undefined} capture Optional whether to use capture phase.\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, THIS\n */\ngoog.events.EventHandler.prototype.listenWithWrapperAndScope = function(\n    src, wrapper, listener, capture, scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listenWithWrapper_(src, wrapper, listener, capture, scope);\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener Callback\n *     method, or an object with a handleEvent function.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {Object=} opt_scope Element in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listenWithWrapper_ = function(\n    src, wrapper, listener, opt_capt, opt_scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  wrapper.listen(\n      src, listener, opt_capt, opt_scope || self.handler_ || self, self);\n  return self;\n};\n\n\n/**\n * @return {number} Number of listeners registered by this handler.\n */\ngoog.events.EventHandler.prototype.getListenerCount = function() {\n  'use strict';\n  var count = 0;\n  for (var key in this.keys_) {\n    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n\n/**\n * Unlistens on an event.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type or array of event types to unlisten to.\n * @param {function(this:?, EVENTOBJ):?|{handleEvent:function(?):?}|null=}\n *     opt_fn Optional callback function to be used as the listener or an object\n *     with handleEvent function.\n * @param {(boolean|!EventListenerOptions)=} opt_options\n * @param {Object=} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.unlisten = function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  if (Array.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      self.unlisten(src, type[i], opt_fn, opt_options, opt_scope);\n    }\n  } else {\n    var capture =\n        goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n    var listener = goog.events.getListener(\n        src, type, opt_fn || self.handleEvent, capture,\n        opt_scope || self.handler_ || self);\n\n    if (listener) {\n      goog.events.unlistenByKey(listener);\n      delete self.keys_[listener.key];\n    }\n  }\n\n  return self;\n};\n\n\n/**\n * Removes an event listener which was added with listenWithWrapper().\n *\n * @param {EventTarget|goog.events.EventTarget} src The target to stop\n *     listening to events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener The\n *     listener function to remove.\n * @param {boolean=} opt_capt In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object=} opt_scope Element in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n */\ngoog.events.EventHandler.prototype.unlistenWithWrapper = function(\n    src, wrapper, listener, opt_capt, opt_scope) {\n  'use strict';\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  wrapper.unlisten(\n      src, listener, opt_capt, opt_scope || self.handler_ || self, self);\n  return self;\n};\n\n\n/**\n * Unlistens to all events.\n */\ngoog.events.EventHandler.prototype.removeAll = function() {\n  'use strict';\n  goog.object.forEach(this.keys_, function(listenerObj, key) {\n    'use strict';\n    if (this.keys_.hasOwnProperty(key)) {\n      goog.events.unlistenByKey(listenerObj);\n    }\n  }, this);\n\n  this.keys_ = {};\n};\n\n\n/**\n * Disposes of this EventHandler and removes all listeners that it registered.\n * @override\n * @protected\n */\ngoog.events.EventHandler.prototype.disposeInternal = function() {\n  'use strict';\n  goog.events.EventHandler.superClass_.disposeInternal.call(this);\n  this.removeAll();\n};\n\n\n/**\n * Default event handler\n * @param {goog.events.Event} e Event object.\n */\ngoog.events.EventHandler.prototype.handleEvent = function(e) {\n  'use strict';\n  throw new Error('EventHandler.handleEvent not implemented');\n};\n"],
"names":["goog","provide","require","requireType","events","EventHandler","goog.events.EventHandler","opt_scope","Disposable","call","handler_","keys_","inherits","typeArray_","prototype","listen","goog.events.EventHandler.prototype.listen","src","type","opt_fn","opt_options","self","listen_","listenWithScope","goog.events.EventHandler.prototype.listenWithScope","fn","options","scope","goog.events.EventHandler.prototype.listen_","Array","isArray","toString","i","length","listenerObj","handleEvent","key","listenOnce","goog.events.EventHandler.prototype.listenOnce","listenOnce_","listenOnceWithScope","goog.events.EventHandler.prototype.listenOnceWithScope","capture","goog.events.EventHandler.prototype.listenOnce_","listenWithWrapper","goog.events.EventHandler.prototype.listenWithWrapper","wrapper","listener","opt_capt","listenWithWrapper_","listenWithWrapperAndScope","goog.events.EventHandler.prototype.listenWithWrapperAndScope","goog.events.EventHandler.prototype.listenWithWrapper_","getListenerCount","goog.events.EventHandler.prototype.getListenerCount","count","Object","hasOwnProperty","unlisten","goog.events.EventHandler.prototype.unlisten","isObject","getListener","unlistenByKey","unlistenWithWrapper","goog.events.EventHandler.prototype.unlistenWithWrapper","removeAll","goog.events.EventHandler.prototype.removeAll","object","forEach","disposeInternal","goog.events.EventHandler.prototype.disposeInternal","superClass_","goog.events.EventHandler.prototype.handleEvent","e","Error"]
}
