{
"version":3,
"file":"goog.json.json.js",
"lineCount":133,
"mappings":"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",
"sources":["goog/json/json.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview JSON utility functions.\n */\n\n\ngoog.provide('goog.json');\ngoog.provide('goog.json.Replacer');\ngoog.provide('goog.json.Reviver');\ngoog.provide('goog.json.Serializer');\n\n\n/**\n * @define {boolean} If true, use the native JSON parsing API.\n * NOTE: The default `goog.json.parse` implementation is able to handle\n * invalid JSON. JSPB used to produce invalid JSON which is not the case\n * anymore so this is safe to enable for parsing JSPB. Using native JSON is\n * faster and safer than the default implementation using `eval`.\n */\ngoog.json.USE_NATIVE_JSON = goog.define('goog.json.USE_NATIVE_JSON', false);\n\n/**\n * @define {boolean} If true, try the native JSON parsing API first. If it\n * fails, log an error and use `eval` instead. This is useful when\n * transitioning to `goog.json.USE_NATIVE_JSON`. The error logger needs to\n * be set by `goog.json.setErrorLogger`. If it is not set then the error\n * is ignored.\n */\ngoog.json.TRY_NATIVE_JSON = goog.define('goog.json.TRY_NATIVE_JSON', true);\n\n\n/**\n * Tests if a string is an invalid JSON string. This only ensures that we are\n * not using any invalid characters\n * @param {string} s The string to test.\n * @return {boolean} True if the input is a valid JSON string.\n */\ngoog.json.isValid = function(s) {\n  'use strict';\n  // All empty whitespace is not valid.\n  if (/^\\s*$/.test(s)) {\n    return false;\n  }\n\n  // This is taken from http://www.json.org/json2.js which is released to the\n  // public domain.\n  // Changes: We dissallow \\u2028 Line separator and \\u2029 Paragraph separator\n  // inside strings.  We also treat \\u2028 and \\u2029 as whitespace which they\n  // are in the RFC but IE and Safari does not match \\s to these so we need to\n  // include them in the reg exps in all places where whitespace is allowed.\n  // We allowed \\x7f inside strings because some tools don't escape it,\n  // e.g. http://www.json.org/java/org/json/JSONObject.java\n\n  // Parsing happens in three stages. In the first stage, we run the text\n  // against regular expressions that look for non-JSON patterns. We are\n  // especially concerned with '()' and 'new' because they can cause invocation,\n  // and '=' because it can cause mutation. But just to be safe, we want to\n  // reject all unexpected forms.\n\n  // We split the first stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace all backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters, but only when followed\n  // by a colon, comma, closing bracket or end of string. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n  // Don't make these static since they have the global flag.\n  const backslashesRe = /\\\\[\"\\\\\\/bfnrtu]/g;\n  const simpleValuesRe =\n      /(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g;\n  const openBracketsRe = /(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g;\n  const remainderRe = /^[\\],:{}\\s\\u2028\\u2029]*$/;\n\n  return remainderRe.test(\n      s.replace(backslashesRe, '@')\n          .replace(simpleValuesRe, ']')\n          .replace(openBracketsRe, ''));\n};\n\n/**\n * Logs a parsing error in `JSON.parse` solvable by using `eval`\n * if `goog.json.TRY_NATIVE_JSON` is enabled.\n * @private {function(string, !Error)} The first parameter is the error message,\n *     the second is the exception thrown by `JSON.parse`.\n */\ngoog.json.errorLogger_ = goog.nullFunction;\n\n\n/**\n * Sets an error logger to use if there's a recoverable parsing error and\n * `goog.json.TRY_NATIVE_JSON` is enabled.\n * @param {function(string, !Error)} errorLogger The first parameter is the\n *     error message, the second is the exception thrown by `JSON.parse`.\n */\ngoog.json.setErrorLogger = function(errorLogger) {\n  'use strict';\n  goog.json.errorLogger_ = errorLogger;\n};\n\n\n/**\n * Parses a JSON string and returns the result. This throws an exception if\n * the string is an invalid JSON string.\n *\n * Note that this is very slow on large strings. Use JSON.parse if possible.\n *\n * @param {*} s The JSON string to parse.\n * @throws Error if s is invalid JSON.\n * @return {Object} The object generated from the JSON string, or null.\n * @deprecated Use JSON.parse.\n */\ngoog.json.parse = goog.json.USE_NATIVE_JSON ?\n    /** @type {function(*):Object} */ (goog.global['JSON']['parse']) :\n    function(s) {\n      'use strict';\n      let error;\n      if (goog.json.TRY_NATIVE_JSON) {\n        try {\n          return goog.global['JSON']['parse'](s);\n        } catch (ex) {\n          error = ex;\n        }\n      }\n      const o = String(s);\n      if (goog.json.isValid(o)) {\n\n        try {\n          const result = /** @type {?Object} */ (eval('(' + o + ')'));\n          if (error) {\n            goog.json.errorLogger_('Invalid JSON: ' + o, error);\n          }\n          return result;\n        } catch (ex) {\n        }\n      }\n      throw new Error('Invalid JSON string: ' + o);\n    };\n\n\n/**\n * JSON replacer, as defined in Section 15.12.3 of the ES5 spec.\n * @see http://ecma-international.org/ecma-262/5.1/#sec-15.12.3\n *\n * TODO(nicksantos): Array should also be a valid replacer.\n *\n * @typedef {function(this:Object, string, *): *}\n */\ngoog.json.Replacer;\n\n\n/**\n * JSON reviver, as defined in Section 15.12.2 of the ES5 spec.\n * @see http://ecma-international.org/ecma-262/5.1/#sec-15.12.3\n *\n * @typedef {function(this:Object, string, *): *}\n */\ngoog.json.Reviver;\n\n\n/**\n * Serializes an object or a value to a JSON string.\n *\n * @param {*} object The object to serialize.\n * @param {?goog.json.Replacer=} opt_replacer A replacer function\n *     called for each (key, value) pair that determines how the value\n *     should be serialized. By defult, this just returns the value\n *     and allows default serialization to kick in.\n * @throws Error if there are loops in the object graph.\n * @return {string} A JSON string representation of the input.\n */\ngoog.json.serialize = goog.json.USE_NATIVE_JSON ?\n    /** @type {function(*, ?goog.json.Replacer=):string} */\n    (goog.global['JSON']['stringify']) :\n    function(object, opt_replacer) {\n      'use strict';\n      // NOTE(nicksantos): Currently, we never use JSON.stringify.\n      //\n      // The last time I evaluated this, JSON.stringify had subtle bugs and\n      // behavior differences on all browsers, and the performance win was not\n      // large enough to justify all the issues. This may change in the future\n      // as browser implementations get better.\n      //\n      // assertSerialize in json_test contains if branches for the cases\n      // that fail.\n      return new goog.json.Serializer(opt_replacer).serialize(object);\n    };\n\n\n\n/**\n * Class that is used to serialize JSON objects to a string.\n * @param {?goog.json.Replacer=} opt_replacer Replacer.\n * @constructor\n */\ngoog.json.Serializer = function(opt_replacer) {\n  'use strict';\n  /**\n   * @type {goog.json.Replacer|null|undefined}\n   * @private\n   */\n  this.replacer_ = opt_replacer;\n};\n\n\n/**\n * Serializes an object or a value to a JSON string.\n *\n * @param {*} object The object to serialize.\n * @throws Error if there are loops in the object graph.\n * @return {string} A JSON string representation of the input.\n */\ngoog.json.Serializer.prototype.serialize = function(object) {\n  'use strict';\n  const sb = [];\n  this.serializeInternal(object, sb);\n  return sb.join('');\n};\n\n\n/**\n * Serializes a generic value to a JSON string\n * @protected\n * @param {*} object The object to serialize.\n * @param {Array<string>} sb Array used as a string builder.\n * @throws Error if there are loops in the object graph.\n */\ngoog.json.Serializer.prototype.serializeInternal = function(object, sb) {\n  'use strict';\n  if (object == null) {\n    // undefined == null so this branch covers undefined as well as null\n    sb.push('null');\n    return;\n  }\n\n  if (typeof object == 'object') {\n    if (Array.isArray(object)) {\n      this.serializeArray(object, sb);\n      return;\n    } else if (\n        object instanceof String || object instanceof Number ||\n        object instanceof Boolean) {\n      object = object.valueOf();\n      // Fall through to switch below.\n    } else {\n      this.serializeObject_(/** @type {!Object} */ (object), sb);\n      return;\n    }\n  }\n\n  switch (typeof object) {\n    case 'string':\n      this.serializeString_(object, sb);\n      break;\n    case 'number':\n      this.serializeNumber_(object, sb);\n      break;\n    case 'boolean':\n      sb.push(String(object));\n      break;\n    case 'function':\n      sb.push('null');\n      break;\n    default:\n      throw new Error('Unknown type: ' + typeof object);\n  }\n};\n\n\n/**\n * Character mappings used internally for goog.string.quote\n * @private\n * @type {!Object}\n */\ngoog.json.Serializer.charToJsonCharCache_ = {\n  '\\\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '/': '\\\\/',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n\n  '\\x0B': '\\\\u000b'  // '\\v' is not supported in JScript\n};\n\n\n/**\n * Regular expression used to match characters that need to be replaced.\n * The S60 browser has a bug where unicode characters are not matched by\n * regular expressions. The condition below detects such behaviour and\n * adjusts the regular expression accordingly.\n * @private\n * @type {!RegExp}\n */\ngoog.json.Serializer.charsToReplace_ = /\\uffff/.test('\\uffff') ?\n    /[\\\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g :\n    /[\\\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\n\n\n/**\n * Serializes a string to a JSON string\n * @private\n * @param {string} s The string to serialize.\n * @param {Array<string>} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeString_ = function(s, sb) {\n  'use strict';\n  // The official JSON implementation does not work with international\n  // characters.\n  sb.push('\"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {\n    'use strict';\n    // caching the result improves performance by a factor 2-3\n    let rv = goog.json.Serializer.charToJsonCharCache_[c];\n    if (!rv) {\n      rv = '\\\\u' + (c.charCodeAt(0) | 0x10000).toString(16).substr(1);\n      goog.json.Serializer.charToJsonCharCache_[c] = rv;\n    }\n    return rv;\n  }), '\"');\n};\n\n\n/**\n * Serializes a number to a JSON string\n * @private\n * @param {number} n The number to serialize.\n * @param {Array<string>} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {\n  'use strict';\n  sb.push(isFinite(n) && !isNaN(n) ? String(n) : 'null');\n};\n\n\n/**\n * Serializes an array to a JSON string\n * @param {Array<string>} arr The array to serialize.\n * @param {Array<string>} sb Array used as a string builder.\n * @protected\n */\ngoog.json.Serializer.prototype.serializeArray = function(arr, sb) {\n  'use strict';\n  const l = arr.length;\n  sb.push('[');\n  let sep = '';\n  for (let i = 0; i < l; i++) {\n    sb.push(sep);\n\n    const value = arr[i];\n    this.serializeInternal(\n        this.replacer_ ? this.replacer_.call(arr, String(i), value) : value,\n        sb);\n\n    sep = ',';\n  }\n  sb.push(']');\n};\n\n\n/**\n * Serializes an object to a JSON string\n * @private\n * @param {!Object} obj The object to serialize.\n * @param {Array<string>} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {\n  'use strict';\n  sb.push('{');\n  let sep = '';\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const value = obj[key];\n      // Skip functions.\n      if (typeof value != 'function') {\n        sb.push(sep);\n        this.serializeString_(key, sb);\n        sb.push(':');\n\n        this.serializeInternal(\n            this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);\n\n        sep = ',';\n      }\n    }\n  }\n  sb.push('}');\n};\n"],
"names":["goog","provide","json","USE_NATIVE_JSON","define","TRY_NATIVE_JSON","isValid","goog.json.isValid","s","test","backslashesRe","simpleValuesRe","openBracketsRe","remainderRe","replace","errorLogger_","nullFunction","setErrorLogger","goog.json.setErrorLogger","errorLogger","parse","global","error","ex","o","String","result","eval","Error","Replacer","Reviver","serialize","object","opt_replacer","Serializer","goog.json.Serializer","replacer_","prototype","goog.json.Serializer.prototype.serialize","sb","serializeInternal","join","goog.json.Serializer.prototype.serializeInternal","push","Array","isArray","serializeArray","Number","Boolean","valueOf","serializeObject_","serializeString_","serializeNumber_","charToJsonCharCache_","charsToReplace_","goog.json.Serializer.prototype.serializeString_","c","rv","toString","charCodeAt","substr","goog.json.Serializer.prototype.serializeNumber_","n","isFinite","isNaN","goog.json.Serializer.prototype.serializeArray","arr","l","length","sep","i","value","call","goog.json.Serializer.prototype.serializeObject_","obj","key","Object","hasOwnProperty"]
}
