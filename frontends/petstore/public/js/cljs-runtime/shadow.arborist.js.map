{"version":3,"sources":["shadow/arborist.cljs"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.arborist/TreeRoot","shadow.arborist/->TreeRoot","container","env","root","this","next","shadow.arborist.protocols/update!","new-root","shadow.arborist.common/managed-root","shadow.arborist.protocols/dom-insert","shadow.arborist.protocols/dom-entered!","dom-remove?","shadow.arborist.protocols/destroy!","var_args","G__11871","shadow.arborist/dom-root","js/Error","shadow.arborist.common/in-document?","root-env","cljs.core.assoc","shadow.arborist.fragments/dom-element-fn","init","G__11880","shadow.arborist.dom_root","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","shadow.arborist/<<","seq11881","self__5755__auto__","cljs.core/seq","body","cljs.core.ex_info","shadow.arborist/<>","seq11884","shadow.arborist/fragment","seq11885","shadow.arborist/simple-seq","coll","render-fn","shadow.arborist.collections/simple-seq","shadow.arborist/render-seq","key-fn","shadow.arborist.collections/keyed-seq","shadow.arborist/keyed-seq","shadow.arborist/update!","x","shadow.arborist/destroy!"],"sourcesContent":["(ns shadow.arborist\n  {:doc \"Arborists generally focus on the health and safety of individual plants and trees.\"\n   :definition \"https://en.wikipedia.org/wiki/Arborist\"}\n  (:require-macros\n    [shadow.arborist])\n  (:require\n    [shadow.arborist.protocols :as p]\n    [shadow.arborist.fragments :as frag]\n    [shadow.arborist.attributes :as attr]\n    [shadow.arborist.common :as common]\n    [shadow.arborist.collections :as coll]\n    [goog.async.nextTick]))\n\n(set! *warn-on-infer* false)\n\n(deftype TreeRoot [container ^:mutable env ^:mutable root]\n  p/IDirectUpdate\n  (update! [this next]\n    (if root\n      (p/update! root next)\n      (let [new-root (common/managed-root env)]\n        (set! root new-root)\n        (p/update! root next)\n        (p/dom-insert root container nil)\n        (p/dom-entered! root)\n        )))\n\n  Object\n  (destroy! [this ^boolean dom-remove?]\n    (when root\n      (p/destroy! root dom-remove?))))\n\n(defn dom-root\n  ([container env]\n   {:pre [(common/in-document? container)]}\n   (let [root (TreeRoot. container nil nil)\n         root-env (assoc env ::root root :dom/element-fn frag/dom-element-fn)]\n     (set! (.-env root) root-env)\n     root))\n  ([container env init]\n   (doto (dom-root container env)\n     (p/update! init))))\n\n(defn << [& body]\n  (throw (ex-info \"<< can only be used a macro\" {})))\n\n(defn <> [& body]\n  (throw (ex-info \"<> can only be used a macro\" {})))\n\n(defn fragment [& body]\n  (throw (ex-info \"fragment can only be used a macro\" {})))\n\n(defn simple-seq [coll render-fn]\n  (coll/simple-seq coll render-fn))\n\n(defn render-seq [coll key-fn render-fn]\n  (coll/keyed-seq coll key-fn render-fn))\n\n(defn keyed-seq [coll key-fn render-fn]\n  (coll/keyed-seq coll key-fn render-fn))\n\n(defn update! [x next]\n  (p/update! x next))\n\n(defn destroy! [root]\n  (p/destroy! root true))\n"]}