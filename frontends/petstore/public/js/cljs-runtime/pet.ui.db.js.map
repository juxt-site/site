{"version":3,"sources":["pet/ui/db.cljs"],"mappings":"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","names":["shadow.grove.eql-query/attr","env","db","current","_","params","shadow.grove.db/all-of","cljs.core.remove","cljs.core/count","cljs.core.filter","cljs.core._EQ_","p__40661","map__40662","cljs.core/--destructure-map","cljs.core.get","current-filter","cljs.core.map","cljs.core.sort","cljs.core/vec","pet.ui.db/without","items","del","cljs.core.into","pet.ui.db/r->","init","rfn","coll","cljs.core.reduce","shadow.grove/reg-event","pet.ui.env/rt-ref","p__40663","map__40664","token","e","filter","G__40665","cljs.core/assoc-in","p__40666","map__40667","pet-name","pet-status","cljs.core.update","map__40668","id-seq","new-pet","cljs.core/inc","shadow.grove.db.add","p__40669","map__40670","pet","cljs.core.dissoc","p__40671","map__40672","cljs.core.update_in","cljs.core/not","p__40673","map__40674","p__40675","map__40676","text","cljs.core.assoc","p__40677","map__40678","whoami","js/console.log","cljs.core.get_in","response","js/module$node_modules$$juxt$pass$dist$juxt_pass_cjs.authorize","cljs.core/clj->js","pet.config/authorize-payload","ajax.core.GET","pet.config/config","h","shadow.grove/run-tx!","p__40679","map__40680","route","p__40682","map__40683","completed?","shadow.grove.db/remove","p1__40681#","p__40684","map__40685","ident","shadow.grove.db/all-idents-of"],"sourcesContent":["(ns pet.ui.db\n  (:require\n   [shadow.grove.eql-query :as eql]\n   [shadow.grove.db :as db]\n   [shadow.grove :as sg]\n   [pet.ui.env :as env]\n   [pet.model :as-alias m]\n   [ajax.core :as ajax]\n   [pet.config :as config])\n  (:require [\"@juxt/pass\" :refer [authorize]]))\n\n(defmethod eql/attr ::m/num-active\n  [env db current _ params]\n  (->> (db/all-of db ::m/pet)\n       (remove ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-completed\n  [env db current _ params]\n  (->> (db/all-of db ::m/pet)\n       (filter ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-total\n  [env db current _ params]\n  (count (db/all-of db ::m/pet)))\n\n(defmethod eql/attr ::m/editing?\n  [env db current _ params]\n  (= (::m/editing db) (:db/ident current)))\n\n(defmethod eql/attr ::m/logged-in?\n  [env db current _ params]\n  (= (::m/logged-in db) (:db/ident current)))\n\n(defmethod eql/attr ::m/filtered-pets\n  [env {::m/keys [current-filter] :as db} current _ params]\n  (->> (db/all-of db ::m/pet)\n       (map :db/ident)\n       (sort)\n       (vec)))\n\n(defn without [items del]\n  (into [] (remove #{del}) items))\n\n(defn r-> [init rfn coll]\n  (reduce rfn init coll))\n\n(sg/reg-event env/rt-ref :ui/route!\n  (fn [env {:keys [token] :as e}]\n\n    ;; not much routing in this app, this will suffice\n    (let [filter\n          (case token\n            \"/completed\" :completed\n            \"/active\" :active\n            :all)]\n\n      (assoc-in env [:db ::m/current-filter] filter))))\n\n(sg/reg-event env/rt-ref ::m/create-new!\n  (fn [env {::m/keys [pet-name pet-status]}]\n    (update env :db\n      (fn [db]\n        (let [{::m/keys [id-seq]} db]\n          (let [new-pet {::m/pet-id id-seq ::m/pet-name pet-name ::m/pet-status pet-status}]\n            (-> db\n                (update ::m/id-seq inc)\n                (db/add ::m/pet new-pet [::m/pets]))))))))\n\n(sg/reg-event env/rt-ref ::m/delete!\n  (fn [env {:keys [pet]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (dissoc pet)\n            (update ::m/pets without pet))))))\n\n(sg/reg-event env/rt-ref ::m/toggle-completed!\n  (fn [env {:keys [pet]}]\n    (update-in env [:db pet ::m/completed?] not)))\n\n(sg/reg-event env/rt-ref ::m/edit-start!\n  (fn [env {:keys [pet]}]\n    (assoc-in env [:db ::m/editing] pet)))\n\n(sg/reg-event env/rt-ref ::m/edit-save!\n  (fn [env {:keys [pet text]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (assoc-in [pet ::m/pet-text] text)\n            (assoc ::m/editing nil))))))\n\n(sg/reg-event env/rt-ref ::m/edit-cancel!\n  (fn [env _]\n    (assoc-in env [:db ::m/editing] nil)))\n\n(sg/reg-event env/rt-ref ::m/refresh-whoami!\n              (fn [env {:keys [whoami]}]\n                (js/console.log (str \"WHOAMI REFRESH HANDLER\"))\n                (assoc-in env [:db ::m/whoami] whoami)))\n\n;; (sg/reg-event env/rt-ref ::m/refresh-pets!\n;;               (fn [env {:keys [pets]}]\n;;                 (js/console.log (str \"PETS REFRESH\"))\n;;                 (js/console.log (str pets))\n;;                 (reduce\n;;                  (fn [db pet]\n;;                    (let [{::m/keys [id-seq]} db]\n;;                      (let [new-pet {::m/pet-id id-seq ::m/pet-name (:pet-name pet) ::m/pet-status (:pet-status pet)}]\n;;                        (-> db\n;;                            (update ::m/id-seq inc)\n;;                            (db/add ::m/pet new-pet [::m/pets])))))\n;;                  pets\n;;                  (:db env))))\n\n;; (sg/reg-event env/rt-ref ::m/refresh-pets-handler!\n;;               (fn [env {:keys [whoami]}]\n;;                 (js/console.log (str \"PETS REFRESH HANDLER\"))\n;;                 (ajax/GET (str (get config/config \"resource-server\") \"/_site/pets\")\n;;                           {:response-format :json\n;;                            :keywords? true\n;;                            :handler (fn [h]\n;;                                       (sg/run-tx! env/rt-ref\n;;                                                   {:e ::m/refresh-pets!\n;;                                                    :pets h}))\n;;                            :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n;;                 (assoc-in env [:db ::m/whoami] whoami)))\n\n(sg/reg-event env/rt-ref ::m/login-toggle!\n              (fn [env _]\n                (if (get-in env [:db ::m/logged-in])\n                  (do (js/console.log \"LOGGING OUT\"))\n                  (do (js/console.log \"LOGGING IN\")\n                      (let [response (authorize (clj->js config/authorize-payload))]\n                        (.then response\n                               #(do\n                                  (js/console.log (str \"Authorization Response Received\"))\n                                  (ajax/GET (str (get config/config \"resource-server\") \"/_site/whoami\")\n                                            {:response-format :json\n                                             :keywords? true\n                                             :handler (fn [h]\n                                                        (sg/run-tx! env/rt-ref\n                                                                    {:e ::m/refresh-whoami!\n                                                                     :whoami h}))\n                                             :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n                                  )))))\n                (update-in env [:db ::m/logged-in] #'not)))\n\n(sg/reg-event env/rt-ref ::m/change-route!\n              (fn [env {:keys [route]}]\n                (assoc-in env [:db ::m/route] route)))\n\n(sg/reg-event env/rt-ref ::m/clear-completed!\n              (fn [env _]\n                (update env :db\n                        (fn [db]\n                          (-> db\n                              (r->\n                               (fn [db {::m/keys [completed?] :as pet}]\n                                 (if-not completed?\n                                   db\n                                   (db/remove db pet)))\n                               (db/all-of db ::m/pet))\n                              (update ::m/pets (fn [current]\n                                                 (into [] (remove #(get-in db [% ::m/completed?])) current))))\n                          ))))\n\n(sg/reg-event env/rt-ref ::m/toggle-all!\n  (fn [env {:keys [completed?]}]\n    (update env :db\n      (fn [db]\n        (reduce\n          (fn [db ident]\n            (assoc-in db [ident ::m/completed?] completed?))\n          db\n          (db/all-idents-of db ::m/pet))))))\n\n"]}