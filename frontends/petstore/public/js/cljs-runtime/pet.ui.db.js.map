{"version":3,"sources":["pet/ui/db.cljs"],"mappings":"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","names":["shadow.grove.eql-query/attr","env","db","current","_","params","shadow.grove.db/all-of","cljs.core.remove","cljs.core/count","cljs.core.filter","cljs.core._EQ_","p__25351","map__25352","cljs.core/--destructure-map","cljs.core.get","current-filter","cljs.core.map","cljs.core.sort","cljs.core/vec","pet.ui.db/without","items","del","cljs.core.into","pet.ui.db/r->","init","rfn","coll","cljs.core.reduce","shadow.grove/reg-event","pet.ui.env/rt-ref","p__25353","map__25354","token","e","filter","G__25355","cljs.core/assoc-in","p__25356","map__25357","pet-name","pet-status","js/console.log","ajax.core.POST","pet.config/config","cljs.core.get_in","resp","cljs.core.update","map__25358","id-seq","next-id","new-pet","cljs.core/inc","shadow.grove.db.add","p__25359","map__25360","pet","cljs.core.dissoc","p__25361","map__25362","cljs.core.update_in","cljs.core/not","p__25363","map__25364","p__25365","map__25366","text","cljs.core.assoc","p__25367","map__25368","whoami","p__25369","map__25370","read","write","response","js/module$node_modules$$juxt$pass$dist$juxt_pass_cjs.authorize","cljs.core/clj->js","pet.config/authorize-payload","ajax.core.GET","h","shadow.grove/run-tx!","p__25371","map__25372","route","p__25374","map__25375","completed?","shadow.grove.db/remove","p1__25373#","p__25376","map__25377","ident","shadow.grove.db/all-idents-of"],"sourcesContent":["(ns pet.ui.db\n  (:require\n   [shadow.grove.eql-query :as eql]\n   [shadow.grove.db :as db]\n   [shadow.grove :as sg]\n   [pet.ui.env :as env]\n   [pet.model :as-alias m]\n   [ajax.core :as ajax]\n   [pet.config :as config])\n  (:require [\"@juxt/pass\" :refer [authorize]]))\n\n(defmethod eql/attr ::m/num-active\n  [env db current _ params]\n  (->> (db/all-of db ::m/pet)\n       (remove ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-completed\n  [env db current _ params]\n  (->> (db/all-of db ::m/pet)\n       (filter ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-total\n  [env db current _ params]\n  (count (db/all-of db ::m/pet)))\n\n(defmethod eql/attr ::m/editing?\n  [env db current _ params]\n  (= (::m/editing db) (:db/ident current)))\n\n(defmethod eql/attr ::m/logged-in?\n  [env db current _ params]\n  (= (::m/logged-in db) (:db/ident current)))\n\n(defmethod eql/attr ::m/filtered-pets\n  [env {::m/keys [current-filter] :as db} current _ params]\n  (->> (db/all-of db ::m/pet)\n       (map :db/ident)\n       (sort)\n       (vec)))\n\n(defn without [items del]\n  (into [] (remove #{del}) items))\n\n(defn r-> [init rfn coll]\n  (reduce rfn init coll))\n\n(sg/reg-event env/rt-ref :ui/route!\n  (fn [env {:keys [token] :as e}]\n\n    ;; not much routing in this app, this will suffice\n    (let [filter\n          (case token\n            \"/completed\" :completed\n            \"/active\" :active\n            :all)]\n\n      (assoc-in env [:db ::m/current-filter] filter))))\n\n(sg/reg-event env/rt-ref ::m/create-new!\n              (fn [env {::m/keys [pet-name pet-status]}]\n                (js/console.log (str \"POSTING PET\" pet-name pet-status))\n                (ajax/POST (str (get config/config \"resource-server\") \"/petstore/pet\")\n                           {:format :json\n                            :params {:name pet-name :status pet-status :id (inc (get-in env [:db ::m/id-seq]))}\n                            :response-format :json\n                            :timeout 5000\n                            :keywords? true\n                            :handler (fn [resp]\n                                       (js/console.log \"posted\"))\n                            :error-handler (fn [e]\n                                             (if (= (:status e) 200)\n                                               \"\"\n                                               (js/console.log (str \"ERROR:\" e))))})\n                (update env :db\n                        (fn [db]\n                          (let [{::m/keys [id-seq]} db\n                                next-id (inc id-seq)\n                                new-pet {::m/pet-id next-id ::m/pet-name pet-name ::m/pet-status pet-status}]\n                            (-> db\n                                (update ::m/id-seq inc)\n                                (db/add ::m/pet new-pet [::m/pets])))))))\n\n(sg/reg-event env/rt-ref ::m/delete!\n  (fn [env {:keys [pet]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (dissoc pet)\n            (update ::m/pets without pet))))))\n\n(sg/reg-event env/rt-ref ::m/toggle-completed!\n  (fn [env {:keys [pet]}]\n    (update-in env [:db pet ::m/completed?] not)))\n\n(sg/reg-event env/rt-ref ::m/edit-start!\n  (fn [env {:keys [pet]}]\n    (assoc-in env [:db ::m/editing] pet)))\n\n(sg/reg-event env/rt-ref ::m/edit-save!\n  (fn [env {:keys [pet text]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (assoc-in [pet ::m/pet-text] text)\n            (assoc ::m/editing nil))))))\n\n(sg/reg-event env/rt-ref ::m/edit-cancel!\n  (fn [env _]\n    (assoc-in env [:db ::m/editing] nil)))\n\n(sg/reg-event env/rt-ref ::m/refresh-whoami!\n              (fn [env {:keys [whoami]}]\n                (js/console.log (str \"WHOAMI REFRESH HANDLER\"))\n                (assoc-in env [:db ::m/whoami] whoami)))\n\n;; (sg/reg-event env/rt-ref ::m/refresh-pets!\n;;               (fn [env {:keys [pets]}]\n;;                 (js/console.log (str \"PETS REFRESH\"))\n;;                 (js/console.log (str pets))\n;;                 (reduce\n;;                  (fn [db pet]\n;;                    (let [{::m/keys [id-seq]} db]\n;;                      (let [new-pet {::m/pet-id id-seq ::m/pet-name (:pet-name pet) ::m/pet-status (:pet-status pet)}]\n;;                        (-> db\n;;                            (update ::m/id-seq inc)\n;;                            (db/add ::m/pet new-pet [::m/pets])))))\n;;                  pets\n;;                  (:db env))))\n\n;; (sg/reg-event env/rt-ref ::m/refresh-pets-handler!\n;;               (fn [env {:keys [whoami]}]\n;;                 (js/console.log (str \"PETS REFRESH HANDLER\"))\n;;                 (ajax/GET (str (get config/config \"resource-server\") \"/_site/pets\")\n;;                           {:response-format :json\n;;                            :keywords? true\n;;                            :handler (fn [h]\n;;                                       (sg/run-tx! env/rt-ref\n;;                                                   {:e ::m/refresh-pets!\n;;                                                    :pets h}))\n;;                            :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n;;                 (assoc-in env [:db ::m/whoami] whoami)))\n\n(sg/reg-event env/rt-ref ::m/login-toggle!\n              (fn [env {::m/keys [read write]}]\n                (if (get-in env [:db ::m/logged-in])\n                  (do (js/console.log \"LOGGING OUT\"))\n                  (do (js/console.log \"LOGGING IN\")\n                      (let [response (authorize (clj->js (config/authorize-payload\n                                                          [(str (get config/config \"authorization-server\") \"/scopes/system/self-identification\")]\n                                                          )))]\n                        (.then response\n                               #(do\n                                  (js/console.log (str \"Authorization Response Received\"))\n                                  (ajax/GET (str (get config/config \"resource-server\") \"/_site/whoami\")\n                                            {:response-format :json\n                                             :keywords? true\n                                             :timeout 5000\n                                             :handler (fn [h]\n                                                        (sg/run-tx! env/rt-ref\n                                                                    {:e ::m/refresh-whoami!\n                                                                     :whoami h}))\n                                             :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n                                  )))))\n                (update-in env [:db ::m/logged-in] #'not)))\n\n(sg/reg-event env/rt-ref ::m/change-route!\n              (fn [env {:keys [route]}]\n                (assoc-in env [:db ::m/route] route)))\n\n(sg/reg-event env/rt-ref ::m/clear-completed!\n              (fn [env _]\n                (update env :db\n                        (fn [db]\n                          (-> db\n                              (r->\n                               (fn [db {::m/keys [completed?] :as pet}]\n                                 (if-not completed?\n                                   db\n                                   (db/remove db pet)))\n                               (db/all-of db ::m/pet))\n                              (update ::m/pets (fn [current]\n                                                 (into [] (remove #(get-in db [% ::m/completed?])) current))))\n                          ))))\n\n(sg/reg-event env/rt-ref ::m/toggle-all!\n  (fn [env {:keys [completed?]}]\n    (update env :db\n      (fn [db]\n        (reduce\n          (fn [db ident]\n            (assoc-in db [ident ::m/completed?] completed?))\n          db\n          (db/all-idents-of db ::m/pet))))))\n\n"]}