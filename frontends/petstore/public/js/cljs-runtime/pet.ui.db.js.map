{"version":3,"sources":["pet/ui/db.cljs"],"mappings":"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","names":["shadow.grove.eql-query/attr","env","db","current","_","params","shadow.grove.db/all-of","cljs.core.remove","cljs.core/count","cljs.core.filter","cljs.core._EQ_","p__13870","map__13871","cljs.core/--destructure-map","cljs.core.get","current-filter","cljs.core.map","cljs.core.sort","cljs.core/vec","pet.ui.db/without","items","del","cljs.core.into","pet.ui.db/r->","init","rfn","coll","cljs.core.reduce","shadow.grove/reg-event","pet.ui.env/rt-ref","p__13872","map__13873","token","e","filter","G__13874","cljs.core/assoc-in","p__13875","map__13876","pet-name","pet-status","js/console.log","ajax.core.POST","pet.config/config","cljs.core/random-uuid","resp","cljs.core.update","new-pet","cljs.core/inc","shadow.grove.db.add","p__13877","map__13878","pet","cljs.core.dissoc","p__13879","map__13880","shadow.grove.db/ident-val","ajax.core.DELETE","h","shadow.grove/run-tx!","p__13881","map__13882","cljs.core.update_in","cljs.core/not","p__13883","map__13884","p__13885","map__13886","text","cljs.core.assoc","p__13887","map__13888","whoami","p__13889","map__13890","pets","shadow.grove.db/remove","shadow.grove.db.merge_seq","p__13891","map__13892","ajax.core.GET","p__13895","map__13896","read","write","cljs.core.get_in","response","js/module$node_modules$$juxt$pass$dist$juxt_pass_cjs.authorize","cljs.core/clj->js","pet.config/authorize-payload","p1__13893#","cljs.core.conj","p1__13894#","p__13897","map__13898","route","p__13900","map__13901","completed?","p1__13899#","p__13902","map__13903","ident","shadow.grove.db/all-idents-of"],"sourcesContent":["(ns pet.ui.db\n  (:require\n   [shadow.grove.eql-query :as eql]\n   [shadow.grove.db :as db]\n   [shadow.grove :as sg]\n   [pet.ui.env :as env]\n   [pet.model :as-alias m]\n   [ajax.core :as ajax]\n   [pet.config :as config])\n  (:require [\"@juxt/pass\" :refer [authorize]]))\n\n(defmethod eql/attr ::m/num-active\n  [env db current _ params]\n  (->> (db/all-of db ::m/pet)\n       (remove ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-completed\n  [env db current _ params]\n  (->> (db/all-of db ::m/pet)\n       (filter ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-total\n  [env db current _ params]\n  (count (db/all-of db ::m/pet)))\n\n(defmethod eql/attr ::m/editing?\n  [env db current _ params]\n  (= (::m/editing db) (:db/ident current)))\n\n(defmethod eql/attr ::m/logged-in?\n  [env db current _ params]\n  (= (::m/logged-in db) (:db/ident current)))\n\n(defmethod eql/attr ::m/filtered-pets\n  [env {::m/keys [current-filter] :as db} current _ params]\n  (->> (db/all-of db ::m/pet)\n       (map :db/ident)\n       (sort)\n       (vec)))\n\n(defn without [items del]\n  (into [] (remove #{del}) items))\n\n(defn r-> [init rfn coll]\n  (reduce rfn init coll))\n\n(sg/reg-event env/rt-ref :ui/route!\n  (fn [env {:keys [token] :as e}]\n\n    ;; not much routing in this app, this will suffice\n    (let [filter\n          (case token\n            \"/completed\" :completed\n            \"/active\" :active\n            :all)]\n\n      (assoc-in env [:db ::m/current-filter] filter))))\n\n(sg/reg-event env/rt-ref ::m/create-new!\n              (fn [env {::m/keys [pet-name pet-status]}]\n                (js/console.log (str \"POSTING PET\" pet-name pet-status))\n                (ajax/POST (str (get config/config \"resource-server\") \"/petstore/pet\")\n                           {:format :json\n                            :params {:name pet-name :status pet-status :id (str (random-uuid))}\n                            :response-format :json\n                            :timeout 5000\n                            :keywords? true\n                            :handler (fn [resp]\n                                       (js/console.log \"posted\"))\n                            :error-handler (fn [e]\n                                             (if (= (:status e) 200)\n                                               \"\"\n                                               (js/console.log (str \"ERROR:\" e))))})\n                (update env :db\n                        (fn [db]\n                          (let [new-pet {::m/pet-id (str (random-uuid)) ::m/pet-name pet-name ::m/pet-status pet-status}]\n                            (-> db\n                                (update ::m/id-seq inc)\n                                (db/add ::m/pet new-pet [::m/pets])))))))\n\n(sg/reg-event env/rt-ref ::m/delete!\n  (fn [env {:keys [pet]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (dissoc pet)\n            (update ::m/pets without pet))))))\n\n(sg/reg-event env/rt-ref ::m/delete-handler!\n  (fn [env {:keys [pet]}]\n    (js/console.log (str \"a: \" (db/ident-val pet)))\n    (ajax/DELETE (str (get config/config \"resource-server\") \"/petstore/pet/\" (db/ident-val pet))\n                 {:response-format :json\n                  :format :json\n                  :keywords? true\n                  :handler (fn [h]\n                             (js/console.log (str h))\n                             (sg/run-tx! env/rt-ref\n                                         {:e ::m/delete!\n                                          :pet pet}))\n                  :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n    env))\n\n(sg/reg-event env/rt-ref ::m/toggle-completed!\n              (fn [env {:keys [pet]}]\n                (update-in env [:db pet ::m/completed?] not)))\n\n(sg/reg-event env/rt-ref ::m/edit-start!\n  (fn [env {:keys [pet]}]\n    (assoc-in env [:db ::m/editing] pet)))\n\n(sg/reg-event env/rt-ref ::m/edit-save!\n  (fn [env {:keys [pet text]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (assoc-in [pet ::m/pet-text] text)\n            (assoc ::m/editing nil))))))\n\n(sg/reg-event env/rt-ref ::m/edit-cancel!\n  (fn [env _]\n    (assoc-in env [:db ::m/editing] nil)))\n\n(sg/reg-event env/rt-ref ::m/refresh-whoami!\n              (fn [env {:keys [whoami]}]\n                (js/console.log (str \"WHOAMI REFRESH HANDLER\"))\n                (assoc-in env [:db ::m/whoami] whoami)))\n\n(sg/reg-event env/rt-ref ::m/refresh-pets!\n              (fn [env {:keys [pets]}]\n                (js/console.log (str \"PETS REFRESH\"))\n                (update env :db\n                        (fn [db]\n                          (-> db\n                              (r->\n                               (fn [db pet]\n                                 (db/remove db pet))\n                               (db/all-of db ::m/pet))\n                              (db/merge-seq ::m/pet\n                                            (map\n                                             (fn [pet]\n                                               {::m/pet-id (:id pet)\n                                                ::m/pet-name (:name pet)\n                                                ::m/pet-status (:status pet)})\n                                             pets)\n                                            [::m/pets]))))\n                ))\n\n(sg/reg-event env/rt-ref ::m/refresh-pets-handler!\n              (fn [env {:keys [whoami]}]\n                (js/console.log (str \"PETS REFRESH HANDLER\"))\n                (ajax/GET (str (get config/config \"resource-server\") \"/petstore/pets\")\n                          {:response-format :json\n                           :keywords? true\n                           :handler (fn [h]\n                                      (js/console.log (str h))\n                                      (sg/run-tx! env/rt-ref\n                                                  {:e ::m/refresh-pets!\n                                                   :pets h}))\n                           :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n                env))\n\n(sg/reg-event env/rt-ref ::m/login-toggle!\n              (fn [env {::m/keys [read write]}]\n                (if (get-in env [:db ::m/logged-in])\n                  (do (js/console.log \"LOGGING OUT\"))\n                  (do (js/console.log \"LOGGING IN\")\n                      (let [response (authorize (clj->js (config/authorize-payload\n                                                          (-> [(str (get config/config \"authorization-server\") \"/scopes/system/self-identification\")]\n                                                              (#(if read\n                                                                  (conj % (str (get config/config \"authorization-server\") \"/scopes/petstore/read\"))\n                                                                  %))\n                                                              (#(if write\n                                                                  (conj % (str (get config/config \"authorization-server\") \"/scopes/petstore/write\"))\n                                                                  %)))\n                                                          )))]\n                        (.then response\n                               #(do\n                                  (js/console.log (str \"Authorization Response Received\"))\n                                  (ajax/GET (str (get config/config \"resource-server\") \"/_site/whoami\")\n                                            {:response-format :json\n                                             :keywords? true\n                                             :timeout 5000\n                                             :handler (fn [h]\n                                                        (sg/run-tx! env/rt-ref\n                                                                    {:e ::m/refresh-whoami!\n                                                                     :whoami h}))\n                                             :error-handler (fn [e] (js/console.log (str \"ERROR:\" e)))})\n                                  )))))\n                (update-in env [:db ::m/logged-in] #'not)))\n\n(sg/reg-event env/rt-ref ::m/change-route!\n              (fn [env {:keys [route]}]\n                (assoc-in env [:db ::m/route] route)))\n\n(sg/reg-event env/rt-ref ::m/clear-completed!\n              (fn [env _]\n                (update env :db\n                        (fn [db]\n                          (-> db\n                              (r->\n                               (fn [db {::m/keys [completed?] :as pet}]\n                                 (if-not completed?\n                                   db\n                                   (db/remove db pet)))\n                               (db/all-of db ::m/pet))\n                              (update ::m/pets (fn [current]\n                                                 (into [] (remove #(get-in db [% ::m/completed?])) current))))\n                          ))))\n\n(sg/reg-event env/rt-ref ::m/toggle-all!\n  (fn [env {:keys [completed?]}]\n    (update env :db\n      (fn [db]\n        (reduce\n          (fn [db ident]\n            (assoc-in db [ident ::m/completed?] completed?))\n          db\n          (db/all-idents-of db ::m/pet))))))\n\n"]}