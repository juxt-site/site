{
"version":3,
"file":"goog.net.xhrmanager.js",
"lineCount":226,
"mappings":"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",
"sources":["goog/net/xhrmanager.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Manages a pool of XhrIo's. This handles all the details of\n * dealing with the XhrPool and provides a simple interface for sending requests\n * and managing events.\n *\n * This class supports queueing & prioritization of requests (XhrIoPool\n * handles this) and retrying of requests.\n *\n * The events fired by the XhrManager are an aggregation of the events of\n * each of its XhrIo objects (with some filtering, i.e., ERROR only called\n * when there are no more retries left). For this reason, all send requests have\n * to have an id, so that the user of this object can know which event is for\n * which request.\n */\n\ngoog.provide('goog.net.XhrManager');\ngoog.provide('goog.net.XhrManager.Event');\ngoog.provide('goog.net.XhrManager.Request');\n\ngoog.require('goog.events');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventHandler');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.net.ErrorCode');\ngoog.require('goog.net.EventType');\ngoog.require('goog.net.XhrIo');\ngoog.require('goog.net.XhrIoPool');\ngoog.require('goog.structs.Map');\n\n// TODO(user): Add some time in between retries.\n\n\n\n/**\n * A manager of an XhrIoPool.\n * @param {number=} opt_maxRetries Max. number of retries (Default: 1).\n * @param {goog.structs.Map=} opt_headers Map of default headers to add to every\n *     request.\n * @param {number=} opt_minCount Min. number of objects (Default: 0).\n * @param {number=} opt_maxCount Max. number of objects (Default: 10).\n * @param {number=} opt_timeoutInterval Timeout (in ms) before aborting an\n *     attempt (Default: 0ms).\n * @param {boolean=} opt_withCredentials Add credentials to every request\n *     (Default: false).\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.net.XhrManager = function(\n    opt_maxRetries, opt_headers, opt_minCount, opt_maxCount,\n    opt_timeoutInterval, opt_withCredentials) {\n  'use strict';\n  goog.net.XhrManager.base(this, 'constructor');\n\n  /**\n   * Maximum number of retries for a given request\n   * @type {number}\n   * @private\n   */\n  this.maxRetries_ = (opt_maxRetries !== undefined) ? opt_maxRetries : 1;\n\n  /**\n   * Timeout interval for an attempt of a given request.\n   * @type {number}\n   * @private\n   */\n  this.timeoutInterval_ = (opt_timeoutInterval !== undefined) ?\n      Math.max(0, opt_timeoutInterval) :\n      0;\n\n  /**\n   * Add credentials to every request.\n   * @private {boolean}\n   */\n  this.withCredentials_ = !!opt_withCredentials;\n\n  /**\n   * The pool of XhrIo's to use.\n   * @type {goog.net.XhrIoPool}\n   * @private\n   */\n  this.xhrPool_ = new goog.net.XhrIoPool(\n      opt_headers, opt_minCount, opt_maxCount, opt_withCredentials);\n\n  /**\n   * Map of ID's to requests.\n   * @type {goog.structs.Map<string, !goog.net.XhrManager.Request>}\n   * @private\n   */\n  this.requests_ = new goog.structs.Map();\n\n  /**\n   * The event handler.\n   * @type {goog.events.EventHandler<!goog.net.XhrManager>}\n   * @private\n   */\n  this.eventHandler_ = new goog.events.EventHandler(this);\n};\ngoog.inherits(goog.net.XhrManager, goog.events.EventTarget);\n\n\n/**\n * Error to throw when a send is attempted with an ID that the manager already\n * has registered for another request.\n * @type {string}\n * @private\n */\ngoog.net.XhrManager.ERROR_ID_IN_USE_ = '[goog.net.XhrManager] ID in use';\n\n\n/**\n * The goog.net.EventType's to listen/unlisten for on the XhrIo object.\n * @type {Array<goog.net.EventType>}\n * @private\n */\ngoog.net.XhrManager.XHR_EVENT_TYPES_ = [\n  goog.net.EventType.READY,\n  goog.net.EventType.COMPLETE,\n  goog.net.EventType.SUCCESS,\n  goog.net.EventType.ERROR,\n  goog.net.EventType.ABORT,\n  goog.net.EventType.TIMEOUT,\n];\n\n\n/**\n * Sets the number of milliseconds after which an incomplete request will be\n * aborted. Zero means no timeout is set.\n * @param {number} ms Timeout interval in milliseconds; 0 means none.\n */\ngoog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {\n  'use strict';\n  this.timeoutInterval_ = Math.max(0, ms);\n};\n\n\n/**\n * Returns the number of requests either in flight, or waiting to be sent.\n * The count will include the current request if used within a COMPLETE event\n * handler or callback.\n * @return {number} The number of requests in flight or pending send.\n */\ngoog.net.XhrManager.prototype.getOutstandingCount = function() {\n  'use strict';\n  return this.requests_.getCount();\n};\n\n\n/**\n * Returns an array of request ids that are either in flight, or waiting to\n * be sent. The id of the current request will be included if used within a\n * COMPLETE event handler or callback.\n * @return {!Array<string>} Request ids in flight or pending send.\n */\ngoog.net.XhrManager.prototype.getOutstandingRequestIds = function() {\n  'use strict';\n  return this.requests_.getKeys();\n};\n\n\n/**\n * Registers the given request to be sent. Throws an error if a request\n * already exists with the given ID.\n * NOTE: It is not sent immediately. It is buffered and will be sent when an\n * XhrIo object becomes available, taking into account the request's\n * priority. Note also that requests of equal priority are sent in an\n * implementation specific order - to get FIFO queue semantics use a\n * monotonically increasing priority for successive requests.\n * @param {string} id The id of the request.\n * @param {string} url Uri to make the request to.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}\n *     opt_content Post data.\n * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the\n *     request.\n * @param {number=} opt_priority The priority of the request. A smaller value\n *     means a higher priority.\n * @param {Function=} opt_callback Callback function for when request is\n *     complete. The only param is the event object from the COMPLETE event.\n * @param {number=} opt_maxRetries The maximum number of times the request\n *     should be retried.\n * @param {goog.net.XhrIo.ResponseType=} opt_responseType The response type of\n *     this request; defaults to goog.net.XhrIo.ResponseType.DEFAULT.\n * @param {boolean=} opt_withCredentials Add credentials to this request,\n *     default: false.\n * @return {!goog.net.XhrManager.Request} The queued request object.\n */\ngoog.net.XhrManager.prototype.send = function(\n    id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback,\n    opt_maxRetries, opt_responseType, opt_withCredentials) {\n  'use strict';\n  const requests = this.requests_;\n  // Check if there is already a request with the given id.\n  if (requests.get(id)) {\n    throw new Error(goog.net.XhrManager.ERROR_ID_IN_USE_);\n  }\n\n  // Make the Request object.\n  const request = new goog.net.XhrManager.Request(\n      url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content,\n      opt_headers, opt_callback,\n      opt_maxRetries !== undefined ? opt_maxRetries : this.maxRetries_,\n      opt_responseType,\n      opt_withCredentials !== undefined ? opt_withCredentials :\n                                          this.withCredentials_);\n  this.requests_.set(id, request);\n\n  // Setup the callback for the pool.\n  const callback = goog.bind(this.handleAvailableXhr_, this, id);\n  this.xhrPool_.getObject(callback, opt_priority);\n\n  return request;\n};\n\n\n/**\n * Aborts the request associated with id.\n * @param {string} id The id of the request to abort.\n * @param {boolean=} opt_force If true, remove the id now so it can be reused.\n *     No events are fired and the callback is not called when forced.\n */\ngoog.net.XhrManager.prototype.abort = function(id, opt_force) {\n  'use strict';\n  const request = this.requests_.get(id);\n  if (request) {\n    const xhrIo = request.xhrIo;\n    request.setAborted(true);\n    if (opt_force) {\n      if (xhrIo) {\n        // We remove listeners to make sure nothing gets called if a new request\n        // with the same id is made.\n        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());\n        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {\n          'use strict';\n          this.xhrPool_.releaseObject(xhrIo);\n        }, false, this);\n      }\n      this.requests_.remove(id);\n    }\n    if (xhrIo) {\n      xhrIo.abort();\n    }\n  }\n};\n\n\n/**\n * Handles when an XhrIo object becomes available. Sets up the events, fires\n * the READY event, and starts the process to send the request.\n * @param {string} id The id of the request the XhrIo is for.\n * @param {goog.net.XhrIo} xhrIo The available XhrIo object.\n * @private\n */\ngoog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {\n  'use strict';\n  const request = this.requests_.get(id);\n  // Make sure the request doesn't already have an XhrIo attached. This can\n  // happen if a forced abort occurs before an XhrIo is available, and a new\n  // request with the same id is made.\n  if (request && !request.xhrIo) {\n    this.addXhrListener_(xhrIo, request.getXhrEventCallback());\n\n    // Set properties for the XhrIo.\n    xhrIo.setTimeoutInterval(this.timeoutInterval_);\n    xhrIo.setResponseType(request.getResponseType());\n    xhrIo.setWithCredentials(request.getWithCredentials());\n\n    // Add a reference to the XhrIo object to the request.\n    request.xhrIo = xhrIo;\n\n    // Notify the listeners.\n    this.dispatchEvent(\n        new goog.net.XhrManager.Event(\n            goog.net.EventType.READY, this, id, xhrIo));\n\n    // Send the request.\n    this.retry_(id, xhrIo);\n\n    // If the request was aborted before it got an XhrIo object, abort it now.\n    if (request.getAborted()) {\n      xhrIo.abort();\n    }\n  } else {\n    // If the request has an XhrIo object already, or no request exists, just\n    // return the XhrIo back to the pool.\n    this.xhrPool_.releaseObject(xhrIo);\n  }\n};\n\n\n/**\n * Handles all events fired by the XhrIo object for a given request.\n * @param {string} id The id of the request.\n * @param {goog.events.Event} e The event.\n * @return {Object} The return value from the handler, if any.\n * @private\n */\ngoog.net.XhrManager.prototype.handleEvent_ = function(id, e) {\n  'use strict';\n  const xhrIo = /** @type {goog.net.XhrIo} */ (e.target);\n  switch (e.type) {\n    case goog.net.EventType.READY:\n      this.retry_(id, xhrIo);\n      break;\n\n    case goog.net.EventType.COMPLETE:\n      return this.handleComplete_(id, xhrIo, e);\n\n    case goog.net.EventType.SUCCESS:\n      this.handleSuccess_(id, xhrIo);\n      break;\n\n    // A timeout is handled like an error.\n    case goog.net.EventType.TIMEOUT:\n    case goog.net.EventType.ERROR:\n      this.handleError_(id, xhrIo);\n      break;\n\n    case goog.net.EventType.ABORT:\n      this.handleAbort_(id, xhrIo);\n      break;\n  }\n  return null;\n};\n\n\n/**\n * Attempts to retry the given request. If the request has already attempted\n * the maximum number of retries, then it removes the request and releases\n * the XhrIo object back into the pool.\n * @param {string} id The id of the request.\n * @param {goog.net.XhrIo} xhrIo The XhrIo object.\n * @private\n */\ngoog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {\n  'use strict';\n  const request = this.requests_.get(id);\n\n  // If the request has not completed and it is below its max. retries.\n  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {\n    request.increaseAttemptCount();\n    xhrIo.send(\n        request.getUrl(), request.getMethod(), request.getContent(),\n        request.getHeaders());\n  } else {\n    if (request) {\n      // Remove the events on the XhrIo objects.\n      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());\n\n      // Remove the request.\n      this.requests_.remove(id);\n    }\n    // Release the XhrIo object back into the pool.\n    this.xhrPool_.releaseObject(xhrIo);\n  }\n};\n\n\n/**\n * Handles the complete of a request. Dispatches the COMPLETE event and sets the\n * the request as completed if the request has succeeded, or is done retrying.\n * @param {string} id The id of the request.\n * @param {goog.net.XhrIo} xhrIo The XhrIo object.\n * @param {goog.events.Event} e The original event.\n * @return {Object} The return value from the callback, if any.\n * @private\n */\ngoog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {\n  'use strict';\n  // Only if the request is done processing should a COMPLETE event be fired.\n  const request = this.requests_.get(id);\n  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT ||\n      xhrIo.isSuccess() || request.hasReachedMaxRetries()) {\n    this.dispatchEvent(\n        new goog.net.XhrManager.Event(\n            goog.net.EventType.COMPLETE, this, id, xhrIo));\n\n    // If the request exists, we mark it as completed and call the callback\n    if (request) {\n      request.setCompleted(true);\n      // Call the complete callback as if it was set as a COMPLETE event on the\n      // XhrIo directly.\n      if (request.getCompleteCallback()) {\n        return request.getCompleteCallback().call(xhrIo, e);\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Handles the abort of an underlying XhrIo object.\n * @param {string} id The id of the request.\n * @param {goog.net.XhrIo} xhrIo The XhrIo object.\n * @private\n */\ngoog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {\n  'use strict';\n  // Fire event.\n  // NOTE: The complete event should always be fired before the abort event, so\n  // the bulk of the work is done in handleComplete.\n  this.dispatchEvent(\n      new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));\n};\n\n\n/**\n * Handles the success of a request. Dispatches the SUCCESS event and sets the\n * the request as completed.\n * @param {string} id The id of the request.\n * @param {goog.net.XhrIo} xhrIo The XhrIo object.\n * @private\n */\ngoog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {\n  'use strict';\n  // Fire event.\n  // NOTE: We don't release the XhrIo object from the pool here.\n  // It is released in the retry method, when we know it is back in the\n  // ready state.\n  this.dispatchEvent(\n      new goog.net.XhrManager.Event(\n          goog.net.EventType.SUCCESS, this, id, xhrIo));\n};\n\n\n/**\n * Handles the error of a request. If the request has not reach its maximum\n * number of retries, then it lets the request retry naturally (will let the\n * request hit the READY state). Else, it dispatches the ERROR event.\n * @param {string} id The id of the request.\n * @param {goog.net.XhrIo} xhrIo The XhrIo object.\n * @private\n */\ngoog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {\n  'use strict';\n  const request = this.requests_.get(id);\n\n  // If the maximum number of retries has been reached.\n  if (request.hasReachedMaxRetries()) {\n    // Fire event.\n    // NOTE: We don't release the XhrIo object from the pool here.\n    // It is released in the retry method, when we know it is back in the\n    // ready state.\n    this.dispatchEvent(\n        new goog.net.XhrManager.Event(\n            goog.net.EventType.ERROR, this, id, xhrIo));\n  }\n};\n\n\n/**\n * Remove listeners for XHR events on an XhrIo object.\n * @param {goog.net.XhrIo} xhrIo The object to stop listenening to events on.\n * @param {Function} func The callback to remove from event handling.\n * @param {string|Array<string>=} opt_types Event types to remove listeners\n *     for. Defaults to XHR_EVENT_TYPES_.\n * @private\n */\ngoog.net.XhrManager.prototype.removeXhrListener_ = function(\n    xhrIo, func, opt_types) {\n  'use strict';\n  const types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;\n  this.eventHandler_.unlisten(xhrIo, types, func);\n};\n\n\n/**\n * Adds a listener for XHR events on an XhrIo object.\n * @param {goog.net.XhrIo} xhrIo The object listen to events on.\n * @param {Function} func The callback when the event occurs.\n * @param {string|Array<string>=} opt_types Event types to attach listeners to.\n *     Defaults to XHR_EVENT_TYPES_.\n * @private\n */\ngoog.net.XhrManager.prototype.addXhrListener_ = function(\n    xhrIo, func, opt_types) {\n  'use strict';\n  const types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;\n  this.eventHandler_.listen(xhrIo, types, func);\n};\n\n\n/** @override */\ngoog.net.XhrManager.prototype.disposeInternal = function() {\n  'use strict';\n  goog.net.XhrManager.superClass_.disposeInternal.call(this);\n\n  this.xhrPool_.dispose();\n  this.xhrPool_ = null;\n\n  this.eventHandler_.dispose();\n  this.eventHandler_ = null;\n\n  this.requests_.clear();\n  this.requests_ = null;\n};\n\n\n\n/**\n * An event dispatched by XhrManager.\n *\n * @param {goog.net.EventType} type Event Type.\n * @param {goog.net.XhrManager} target Reference to the object that is the\n *     target of this event.\n * @param {string} id The id of the request this event is for.\n * @param {goog.net.XhrIo} xhrIo The XhrIo object of the request.\n * @constructor\n * @extends {goog.events.Event}\n * @final\n */\ngoog.net.XhrManager.Event = function(type, target, id, xhrIo) {\n  'use strict';\n  goog.events.Event.call(this, type, target);\n\n  /**\n   * The id of the request this event is for.\n   * @type {string}\n   */\n  this.id = id;\n\n  /**\n   * The XhrIo object of the request.\n   * @type {goog.net.XhrIo}\n   */\n  this.xhrIo = xhrIo;\n};\ngoog.inherits(goog.net.XhrManager.Event, goog.events.Event);\n\n\n\n/**\n * An encapsulation of everything needed to make a Xhr request.\n * NOTE: This is used internal to the XhrManager.\n *\n * @param {string} url Uri to make the request too.\n * @param {Function} xhrEventCallback Callback attached to the events of the\n *     XhrIo object of the request.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}\n *     opt_content Post data.\n * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the\n *     request.\n * @param {Function=} opt_callback Callback function for when request is\n *     complete. NOTE: Only 1 callback supported across all events.\n * @param {number=} opt_maxRetries The maximum number of times the request\n *     should be retried (Default: 1).\n * @param {goog.net.XhrIo.ResponseType=} opt_responseType The response type of\n *     this request; defaults to goog.net.XhrIo.ResponseType.DEFAULT.\n * @param {boolean=} opt_withCredentials Add credentials to this request,\n *     default: false.\n *\n * @constructor\n * @final\n */\ngoog.net.XhrManager.Request = function(\n    url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback,\n    opt_maxRetries, opt_responseType, opt_withCredentials) {\n  'use strict';\n  /**\n   * Uri to make the request too.\n   * @type {string}\n   * @private\n   */\n  this.url_ = url;\n\n  /**\n   * Send method.\n   * @type {string}\n   * @private\n   */\n  this.method_ = opt_method || 'GET';\n\n  /**\n   * Post data.\n   * @type {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string|undefined}\n   * @private\n   */\n  this.content_ = opt_content;\n\n  /**\n   *  Map of headers\n   * @type {Object|goog.structs.Map|null}\n   * @private\n   */\n  this.headers_ = opt_headers || null;\n\n  /**\n   * The maximum number of times the request should be retried.\n   * @type {number}\n   * @private\n   */\n  this.maxRetries_ = (opt_maxRetries !== undefined) ? opt_maxRetries : 1;\n\n  /**\n   * The number of attempts  so far.\n   * @type {number}\n   * @private\n   */\n  this.attemptCount_ = 0;\n\n  /**\n   * Whether the request has been completed.\n   * @type {boolean}\n   * @private\n   */\n  this.completed_ = false;\n\n  /**\n   * Whether the request has been aborted.\n   * @type {boolean}\n   * @private\n   */\n  this.aborted_ = false;\n\n  /**\n   * Callback attached to the events of the XhrIo object.\n   * @type {Function}\n   * @private\n   */\n  this.xhrEventCallback_ = xhrEventCallback;\n\n  /**\n   * Callback function called when request is complete.\n   * @type {Function|undefined}\n   * @private\n   */\n  this.completeCallback_ = opt_callback;\n\n  /**\n   * A response type to set on this.xhrIo when it's populated.\n   * @type {!goog.net.XhrIo.ResponseType}\n   * @private\n   */\n  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;\n\n  /**\n   * Send credentials with this request, or not.\n   * @private {boolean}\n   */\n  this.withCredentials_ = !!opt_withCredentials;\n\n  /**\n   * The XhrIo instance handling this request. Set in handleAvailableXhr.\n   * @type {?goog.net.XhrIo}\n   */\n  this.xhrIo = null;\n};\n\n\n/**\n * Gets the uri.\n * @return {string} The uri to make the request to.\n */\ngoog.net.XhrManager.Request.prototype.getUrl = function() {\n  'use strict';\n  return this.url_;\n};\n\n\n/**\n * Gets the send method.\n * @return {string} The send method.\n */\ngoog.net.XhrManager.Request.prototype.getMethod = function() {\n  'use strict';\n  return this.method_;\n};\n\n\n/**\n * Gets the post data.\n * @return {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string|undefined}\n *     The post data.\n */\ngoog.net.XhrManager.Request.prototype.getContent = function() {\n  'use strict';\n  return this.content_;\n};\n\n\n/**\n * Gets the map of headers.\n * @return {Object|goog.structs.Map} The map of headers.\n */\ngoog.net.XhrManager.Request.prototype.getHeaders = function() {\n  'use strict';\n  return this.headers_;\n};\n\n\n/**\n * Gets the withCredentials flag.\n * @return {boolean} Add credentials, or not.\n */\ngoog.net.XhrManager.Request.prototype.getWithCredentials = function() {\n  'use strict';\n  return this.withCredentials_;\n};\n\n\n/**\n * Gets the maximum number of times the request should be retried.\n * @return {number} The maximum number of times the request should be retried.\n */\ngoog.net.XhrManager.Request.prototype.getMaxRetries = function() {\n  'use strict';\n  return this.maxRetries_;\n};\n\n\n/**\n * Gets the number of attempts so far.\n * @return {number} The number of attempts so far.\n */\ngoog.net.XhrManager.Request.prototype.getAttemptCount = function() {\n  'use strict';\n  return this.attemptCount_;\n};\n\n\n/**\n * Increases the number of attempts so far.\n */\ngoog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {\n  'use strict';\n  this.attemptCount_++;\n};\n\n\n/**\n * Returns whether the request has reached the maximum number of retries.\n * @return {boolean} Whether the request has reached the maximum number of\n *     retries.\n */\ngoog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {\n  'use strict';\n  return this.attemptCount_ > this.maxRetries_;\n};\n\n\n/**\n * Sets the completed status.\n * @param {boolean} complete The completed status.\n */\ngoog.net.XhrManager.Request.prototype.setCompleted = function(complete) {\n  'use strict';\n  this.completed_ = complete;\n};\n\n\n/**\n * Gets the completed status.\n * @return {boolean} The completed status.\n */\ngoog.net.XhrManager.Request.prototype.getCompleted = function() {\n  'use strict';\n  return this.completed_;\n};\n\n\n/**\n * Sets the aborted status.\n * @param {boolean} aborted True if the request was aborted, otherwise False.\n */\ngoog.net.XhrManager.Request.prototype.setAborted = function(aborted) {\n  'use strict';\n  this.aborted_ = aborted;\n};\n\n\n/**\n * Gets the aborted status.\n * @return {boolean} True if request was aborted, otherwise False.\n */\ngoog.net.XhrManager.Request.prototype.getAborted = function() {\n  'use strict';\n  return this.aborted_;\n};\n\n\n/**\n * Gets the callback attached to the events of the XhrIo object.\n * @return {Function} The callback attached to the events of the\n *     XhrIo object.\n */\ngoog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {\n  'use strict';\n  return this.xhrEventCallback_;\n};\n\n\n/**\n * Gets the callback for when the request is complete.\n * @return {Function|undefined} The callback for when the request is complete.\n */\ngoog.net.XhrManager.Request.prototype.getCompleteCallback = function() {\n  'use strict';\n  return this.completeCallback_;\n};\n\n\n/**\n * Gets the response type that will be set on this request's XhrIo when it's\n * available.\n * @return {!goog.net.XhrIo.ResponseType} The response type to be set\n *     when an XhrIo becomes available to this request.\n */\ngoog.net.XhrManager.Request.prototype.getResponseType = function() {\n  'use strict';\n  return this.responseType_;\n};\n"],
"names":["goog","provide","require","net","XhrManager","goog.net.XhrManager","opt_maxRetries","opt_headers","opt_minCount","opt_maxCount","opt_timeoutInterval","opt_withCredentials","base","maxRetries_","undefined","timeoutInterval_","Math","max","withCredentials_","xhrPool_","XhrIoPool","requests_","structs","Map","eventHandler_","events","EventHandler","inherits","EventTarget","ERROR_ID_IN_USE_","XHR_EVENT_TYPES_","EventType","READY","COMPLETE","SUCCESS","ERROR","ABORT","TIMEOUT","prototype","setTimeoutInterval","goog.net.XhrManager.prototype.setTimeoutInterval","ms","getOutstandingCount","goog.net.XhrManager.prototype.getOutstandingCount","getCount","getOutstandingRequestIds","goog.net.XhrManager.prototype.getOutstandingRequestIds","getKeys","send","goog.net.XhrManager.prototype.send","id","url","opt_method","opt_content","opt_priority","opt_callback","opt_responseType","requests","get","Error","request","Request","bind","handleEvent_","set","callback","handleAvailableXhr_","getObject","abort","goog.net.XhrManager.prototype.abort","opt_force","xhrIo","setAborted","removeXhrListener_","getXhrEventCallback","listenOnce","releaseObject","remove","goog.net.XhrManager.prototype.handleAvailableXhr_","addXhrListener_","setResponseType","getResponseType","setWithCredentials","getWithCredentials","dispatchEvent","Event","retry_","getAborted","goog.net.XhrManager.prototype.handleEvent_","e","target","type","handleComplete_","handleSuccess_","handleError_","handleAbort_","goog.net.XhrManager.prototype.retry_","getCompleted","hasReachedMaxRetries","increaseAttemptCount","getUrl","getMethod","getContent","getHeaders","goog.net.XhrManager.prototype.handleComplete_","getLastErrorCode","ErrorCode","isSuccess","setCompleted","getCompleteCallback","call","goog.net.XhrManager.prototype.handleAbort_","goog.net.XhrManager.prototype.handleSuccess_","goog.net.XhrManager.prototype.handleError_","goog.net.XhrManager.prototype.removeXhrListener_","func","opt_types","types","unlisten","goog.net.XhrManager.prototype.addXhrListener_","listen","disposeInternal","goog.net.XhrManager.prototype.disposeInternal","superClass_","dispose","clear","goog.net.XhrManager.Event","goog.net.XhrManager.Request","xhrEventCallback","url_","method_","content_","headers_","attemptCount_","completed_","aborted_","xhrEventCallback_","completeCallback_","responseType_","XhrIo","ResponseType","DEFAULT","goog.net.XhrManager.Request.prototype.getUrl","goog.net.XhrManager.Request.prototype.getMethod","goog.net.XhrManager.Request.prototype.getContent","goog.net.XhrManager.Request.prototype.getHeaders","goog.net.XhrManager.Request.prototype.getWithCredentials","getMaxRetries","goog.net.XhrManager.Request.prototype.getMaxRetries","getAttemptCount","goog.net.XhrManager.Request.prototype.getAttemptCount","goog.net.XhrManager.Request.prototype.increaseAttemptCount","goog.net.XhrManager.Request.prototype.hasReachedMaxRetries","goog.net.XhrManager.Request.prototype.setCompleted","complete","goog.net.XhrManager.Request.prototype.getCompleted","goog.net.XhrManager.Request.prototype.setAborted","aborted","goog.net.XhrManager.Request.prototype.getAborted","goog.net.XhrManager.Request.prototype.getXhrEventCallback","goog.net.XhrManager.Request.prototype.getCompleteCallback","goog.net.XhrManager.Request.prototype.getResponseType"]
}
