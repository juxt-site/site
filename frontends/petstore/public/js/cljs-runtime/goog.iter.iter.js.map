{
"version":3,
"file":"goog.iter.iter.js",
"lineCount":540,
"mappings":"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",
"sources":["goog/iter/iter.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Python style iteration utilities.\n */\n\n\ngoog.provide('goog.iter');\ngoog.provide('goog.iter.Iterable');\ngoog.provide('goog.iter.Iterator');\ngoog.provide('goog.iter.StopIteration');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.functions');\ngoog.require('goog.math');\n\n\n/**\n * @typedef {{length:number}|{__iterator__}}\n */\ngoog.iter.Iterable;\n\n\n/**\n * Singleton Error object that is used to terminate iterations.\n * @const {!Error}\n */\ngoog.iter.StopIteration = ('StopIteration' in goog.global) ?\n    // For script engines that support legacy iterators.\n    goog.global['StopIteration'] :\n    {message: 'StopIteration', stack: ''};\n\n\n\n/**\n * Class/interface for iterators.  An iterator needs to implement a `next`\n * method and it needs to throw a `goog.iter.StopIteration` when the\n * iteration passes beyond the end.  Iterators have no `hasNext` method.\n * It is recommended to always use the helper functions to iterate over the\n * iterator or in case you are only targeting JavaScript 1.7 for in loops.\n * @constructor\n * @template VALUE\n * @implements {Iterator<VALUE>}\n * @deprecated Use objects implementing JavaScript iterable protocol introduced\n *     in ES6.\n *     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\ngoog.iter.Iterator = function() {};\n\n\n/**\n * Returns the next value of the iteration.  This will throw the object\n * {@see goog.iter.StopIteration} when the iteration passes the end.\n * @return {VALUE} Any object or value\n */\ngoog.iter.Iterator.prototype.nextValueOrThrow = function() {\n  throw goog.iter.StopIteration;\n};\n\n\n/**\n * Returns the next value of the iteration as an an ES6 IIterableResult.\n * @return {!IIterableResult<VALUE>}\n * @override\n */\ngoog.iter.Iterator.prototype.next = function() {\n  'use strict';\n  return goog.iter.ES6_ITERATOR_DONE;\n};\n\n\n/**\n * An ES6 Iteration protocol result indicating iteration has completed for an\n *     iterator.\n * @const {!IIterableResult<?>}\n */\ngoog.iter.ES6_ITERATOR_DONE = goog.debug.freeze({done: true, value: undefined});\n\n\n/**\n * Wraps a VALUE in the ES6 Iterator protocol's IIterableResult container,\n * including the compiler-mandated 'done' key, set to false.\n * @param {VALUE} value\n * @return {!IIterableResult<VALUE>} An ES6 Iteration Protocol compatible result\n *     object, indicating iteration is not done.\n * @template VALUE\n */\ngoog.iter.createEs6IteratorYield = function(value) {\n  return {value, done: false};\n};\n\n\n/**\n * Converts an ES6 IIterableResult into ES4 iteration semantics. If the result\n * indicates it is finished iterating, will throw `goog.iter.StopIteration`.\n * Otherwise, will unwrap the IIterableResult's value and return that.\n * @param {!IIterableResult<VALUE>} es6NextValue\n * @return {VALUE}\n * @template VALUE\n */\ngoog.iter.toEs4IteratorNext = function(es6NextValue) {\n  if (es6NextValue.done) {\n    throw goog.iter.StopIteration;\n  }\n  return es6NextValue.value;\n};\n\n\n/**\n * Checks whether an error is the `goog.iter.StopIteration` error, and if so\n * throws a different error that warns that using goog.iter.StopIteration is\n * problematic. ES4 iteration allows `StopIteration` to propagate up the\n * callstack and terminate iteration far from where it started, but ES6\n * iteration requires explicit passing and handling of termination signals.\n * @param {!Error} ex The error to check.\n */\ngoog.iter.checkNoImplicitStopIterationInEs6 = function(ex) {\n  // ONLY use this where StopIteration is thrown from callback functions -\n  // places where there is no way for the ES6 Iteration protocol to use the done\n  // value to signal iterator exhaustion / early termination of iteration.\n  if (ex === goog.iter.StopIteration) {\n    throw new Error(\n        'ES6 Iteration protocol does NOT adjust control flow when ' +\n        'StopIteration is thrown from callback helper functions. If your code' +\n        ' relies on this behavior, consider throwing a different error and ' +\n        'catching it to terminate iteration.');\n  }\n  throw ex;\n};\n\n\n/**\n * Returns the `Iterator` object itself.  This is used to implement\n * the iterator protocol in JavaScript 1.7\n * @param {boolean=} opt_keys  Whether to return the keys or values. Default is\n *     to only return the values.  This is being used by the for-in loop (true)\n *     and the for-each-in loop (false).  Even though the param gives a hint\n *     about what the iterator will return there is no guarantee that it will\n *     return the keys when true is passed.\n * @return {!goog.iter.Iterator<VALUE>} The object itself.\n */\ngoog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {\n  'use strict';\n  return this;\n};\n\n\n/**\n * Returns an iterator that knows how to iterate over the values in the object.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable  If the\n *     object is an iterator it will be returned as is.  If the object has an\n *     `__iterator__` method that will be called to get the value\n *     iterator.  If the object is an array-like object we create an iterator\n *     for that.\n * @return {!goog.iter.Iterator<VALUE>} An iterator that knows how to iterate\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.toIterator = function(iterable) {\n  'use strict';\n  if (iterable instanceof goog.iter.Iterator) {\n    return iterable;\n  }\n  if (typeof iterable.__iterator__ == 'function') {\n    return /** @type {{__iterator__:function(this:?, boolean=)}} */ (iterable)\n        .__iterator__(false);\n  }\n  if (goog.isArrayLike(iterable)) {\n    var like = /** @type {!IArrayLike<number|string>} */ (iterable);\n    var i = 0;\n    var newIter = new goog.iter.Iterator;\n    newIter.nextValueOrThrow = function() {\n      'use strict';\n      while (true) {\n        if (i >= like.length) {\n          throw goog.iter.StopIteration;\n        }\n        // Don't include deleted elements.\n        if (!(i in like)) {\n          i++;\n          continue;\n        }\n        return like[i++];\n      }\n    };\n\n    return newIter;\n  }\n\n\n  // TODO(arv): Should we fall back on goog.structs.getValues()?\n  throw new Error('Not implemented');\n};\n\n\n/**\n * Calls a function for each element in the iterator with the element of the\n * iterator passed as argument.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable  The iterator\n *     to iterate over. If the iterable is an object `toIterator` will be\n *     called on it.\n * @param {function(this:THIS,VALUE,?,!goog.iter.Iterator<VALUE>)} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and the return value is\n *     irrelevant.  The reason for passing undefined as the second argument is\n *     so that the same function can be used in {@see goog.array.forEach} as\n *     well as others.  The third parameter is of type \"number\" for\n *     arraylike objects, undefined, otherwise.\n * @param {THIS=} opt_obj  The object to be used as the value of 'this' within\n *     `f`.\n * @template THIS, VALUE\n */\ngoog.iter.forEach = function(iterable, f, opt_obj) {\n  'use strict';\n  if (goog.isArrayLike(iterable)) {\n    try {\n      // NOTES: this passes the index number to the second parameter\n      // of the callback contrary to the documentation above.\n      goog.array.forEach(\n          /** @type {IArrayLike<?>} */ (iterable), f, opt_obj);\n    } catch (ex) {\n      if (ex !== goog.iter.StopIteration) {\n        throw ex;\n      }\n    }\n  } else {\n    iterable = goog.iter.toIterator(iterable);\n\n    try {\n      while (true) {\n        f.call(opt_obj, iterable.nextValueOrThrow(), undefined, iterable);\n      }\n    } catch (ex) {\n      if (ex !== goog.iter.StopIteration) {\n        throw ex;\n      }\n    }\n  }\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns true adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is true the element will be included in the returned\n *     iterator.  If it is false the element is not included.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator in which only elements\n *     that passed the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filter = function(iterable, f, opt_obj) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var newIter = new goog.iter.Iterator;\n  newIter.nextValueOrThrow = function() {\n    'use strict';\n    while (true) {\n      var val = iterator.nextValueOrThrow();\n      if (f.call(opt_obj, val, undefined, iterator)) {\n        return val;\n      }\n    }\n  };\n\n  return newIter;\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns false adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is false the element will be included in the returned\n *     iterator.  If it is true the element is not included.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator in which only elements\n *     that did not pass the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filterFalse = function(iterable, f, opt_obj) {\n  'use strict';\n  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);\n};\n\n\n/**\n * Creates a new iterator that returns the values in a range.  This function\n * can take 1, 2 or 3 arguments:\n * <pre>\n * range(5) same as range(0, 5, 1)\n * range(2, 5) same as range(2, 5, 1)\n * </pre>\n *\n * @param {number} startOrStop  The stop value if only one argument is provided.\n *     The start value if 2 or more arguments are provided.  If only one\n *     argument is used the start value is 0.\n * @param {number=} opt_stop  The stop value.  If left out then the first\n *     argument is used as the stop value.\n * @param {number=} opt_step  The number to increment with between each call to\n *     next.  This can be negative.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the values\n *     in the range.\n */\ngoog.iter.range = function(startOrStop, opt_stop, opt_step) {\n  'use strict';\n  var start = 0;\n  var stop = startOrStop;\n  var step = opt_step || 1;\n  if (arguments.length > 1) {\n    start = startOrStop;\n    stop = +opt_stop;\n  }\n  if (step == 0) {\n    throw new Error('Range step argument must not be zero');\n  }\n\n  var newIter = new goog.iter.Iterator;\n  newIter.nextValueOrThrow = function() {\n    'use strict';\n    if (step > 0 && start >= stop || step < 0 && start <= stop) {\n      throw goog.iter.StopIteration;\n    }\n    var rv = start;\n    start += step;\n    return rv;\n  };\n\n  return newIter;\n};\n\n\n/**\n * Joins the values in a iterator with a delimiter.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to get the values from.\n * @param {string} deliminator  The text to put between the values.\n * @return {string} The joined value string.\n * @template VALUE\n */\ngoog.iter.join = function(iterable, deliminator) {\n  'use strict';\n  return goog.iter.toArray(iterable).join(deliminator);\n};\n\n\n/**\n * For every element in the iterator call a function and return a new iterator\n * with that value.\n *\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterator to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):RESULT} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a new value.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<RESULT>} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, VALUE, RESULT\n */\ngoog.iter.map = function(iterable, f, opt_obj) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var newIter = new goog.iter.Iterator;\n  newIter.nextValueOrThrow = function() {\n    'use strict';\n    var val = iterator.nextValueOrThrow();\n    return f.call(opt_obj, val, undefined, iterator);\n  };\n\n  return newIter;\n};\n\n\n/**\n * Passes every element of an iterator into a function and accumulates the\n * result.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {function(this:THIS,VALUE,VALUE):VALUE} f The function to call for\n *     every element. This function takes 2 arguments (the function's previous\n *     result or the initial value, and the value of the current element).\n *     function(previousValue, currentElement) : newValue.\n * @param {VALUE} val The initial value to pass into the function on the first\n *     call.\n * @param {THIS=} opt_obj  The object to be used as the value of 'this' within\n *     f.\n * @return {VALUE} Result of evaluating f repeatedly across the values of\n *     the iterator.\n * @template THIS, VALUE\n */\ngoog.iter.reduce = function(iterable, f, val, opt_obj) {\n  'use strict';\n  var rval = val;\n  goog.iter.forEach(iterable, function(val) {\n    'use strict';\n    rval = f.call(opt_obj, rval, val);\n  });\n  return rval;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these, and if\n * any of them returns true, this returns true (without checking the rest). If\n * all return false this will return false.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {boolean} true if any value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.some = function(iterable, f, opt_obj) {\n  'use strict';\n  iterable = goog.iter.toIterator(iterable);\n\n  try {\n    while (true) {\n      if (f.call(opt_obj, iterable.nextValueOrThrow(), undefined, iterable)) {\n        return true;\n      }\n    }\n  } catch (ex) {\n    if (ex !== goog.iter.StopIteration) {\n      throw ex;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these and if any\n * of them returns false this returns false (without checking the rest). If all\n * return true this will return true.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {boolean} true if every value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.every = function(iterable, f, opt_obj) {\n  'use strict';\n  iterable = goog.iter.toIterator(iterable);\n\n  try {\n    while (true) {\n      if (!f.call(opt_obj, iterable.nextValueOrThrow(), undefined, iterable)) {\n        return false;\n      }\n    }\n  } catch (ex) {\n    if (ex !== goog.iter.StopIteration) {\n      throw ex;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Takes zero or more iterables and returns one iterator that will iterate over\n * them in the order chained.\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<VALUE>} Returns a new iterator that will\n *     iterate over all the given iterables' contents.\n * @template VALUE\n */\ngoog.iter.chain = function(var_args) {\n  'use strict';\n  return goog.iter.chainFromIterable(arguments);\n};\n\n\n/**\n * Takes a single iterable containing zero or more iterables and returns one\n * iterator that will iterate over each one in the order given.\n * @see https://goo.gl/5NRp5d\n * @param {goog.iter.Iterator<?>|goog.iter.Iterable} iterable The iterable of\n *     iterables to chain.\n * @return {!goog.iter.Iterator<VALUE>} Returns a new iterator that will\n *     iterate over all the contents of the iterables contained within\n *     `iterable`.\n * @template VALUE\n */\ngoog.iter.chainFromIterable = function(iterable) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var iter = new goog.iter.Iterator();\n  var current = null;\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    while (true) {\n      if (current == null) {\n        var it = iterator.nextValueOrThrow();\n        current = goog.iter.toIterator(it);\n      }\n      try {\n        return current.nextValueOrThrow();\n      } catch (ex) {\n        if (ex !== goog.iter.StopIteration) {\n          throw ex;\n        }\n        current = null;\n      }\n    }\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but skips elements as\n * long as a supplied function returns true.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that drops elements from\n *     the original iterator as long as `f` is true.\n * @template THIS, VALUE\n */\ngoog.iter.dropWhile = function(iterable, f, opt_obj) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var newIter = new goog.iter.Iterator;\n  var dropping = true;\n  newIter.nextValueOrThrow = function() {\n    'use strict';\n    while (true) {\n      var val = iterator.nextValueOrThrow();\n      if (dropping && f.call(opt_obj, val, undefined, iterator)) {\n        continue;\n      } else {\n        dropping = false;\n      }\n      return val;\n    }\n  };\n\n  return newIter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but only as long as a\n * supplied function returns true.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj This is used as the 'this' object in f when called.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that keeps elements in\n *     the original iterator as long as the function is true.\n * @template THIS, VALUE\n */\ngoog.iter.takeWhile = function(iterable, f, opt_obj) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var iter = new goog.iter.Iterator();\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    var val = iterator.nextValueOrThrow();\n    if (f.call(opt_obj, val, undefined, iterator)) {\n      return val;\n    }\n    throw goog.iter.StopIteration;\n  };\n\n  return iter;\n};\n\n\n/**\n * Converts the iterator to an array\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to convert to an array.\n * @return {!Array<VALUE>} An array of the elements the iterator iterates over.\n * @template VALUE\n */\ngoog.iter.toArray = function(iterable) {\n  'use strict';\n  // Fast path for array-like.\n  if (goog.isArrayLike(iterable)) {\n    return goog.array.toArray(/** @type {!IArrayLike<?>} */ (iterable));\n  }\n  iterable = goog.iter.toIterator(iterable);\n  var array = [];\n  goog.iter.forEach(iterable, function(val) {\n    'use strict';\n    array.push(val);\n  });\n  return array;\n};\n\n\n/**\n * Iterates over two iterables and returns true if they contain the same\n * sequence of elements and have the same length.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable1 The first\n *     iterable object.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable2 The second\n *     iterable object.\n * @param {function(VALUE,VALUE):boolean=} opt_equalsFn Optional comparison\n *     function.\n *     Should take two arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} true if the iterables contain the same sequence of elements\n *     and have the same length.\n * @template VALUE\n */\ngoog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {\n  'use strict';\n  var fillValue = {};\n  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);\n  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;\n  return goog.iter.every(pairs, function(pair) {\n    'use strict';\n    return equalsFn(pair[0], pair[1]);\n  });\n};\n\n\n/**\n * Advances the iterator to the next position, returning the given default value\n * instead of throwing an exception if the iterator has no more entries.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterable\n *     object.\n * @param {VALUE} defaultValue The value to return if the iterator is empty.\n * @return {VALUE} The next item in the iteration, or defaultValue if the\n *     iterator was empty.\n * @template VALUE\n */\ngoog.iter.nextOrValue = function(iterable, defaultValue) {\n  'use strict';\n  try {\n    return goog.iter.toIterator(iterable).nextValueOrThrow();\n  } catch (e) {\n    if (e != goog.iter.StopIteration) {\n      throw e;\n    }\n    return defaultValue;\n  }\n};\n\n\n/**\n * Cartesian product of zero or more sets.  Gives an iterator that gives every\n * combination of one element chosen from each set.  For example,\n * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).\n * @see http://docs.python.org/library/itertools.html#itertools.product\n * @param {...!IArrayLike<VALUE>} var_args Zero or more sets, as\n *     arrays.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} An iterator that gives each\n *     n-tuple (as an array).\n * @template VALUE\n */\ngoog.iter.product = function(var_args) {\n  'use strict';\n  var someArrayEmpty = Array.prototype.some.call(arguments, function(arr) {\n    'use strict';\n    return !arr.length;\n  });\n\n  // An empty set in a cartesian product gives an empty set.\n  if (someArrayEmpty || !arguments.length) {\n    return new goog.iter.Iterator();\n  }\n\n  var iter = new goog.iter.Iterator();\n  var arrays = arguments;\n\n  // The first indices are [0, 0, ...]\n  /** @type {?Array<number>} */\n  var indicies = goog.array.repeat(0, arrays.length);\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    if (indicies) {\n      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {\n        'use strict';\n        return arrays[arrayIndex][valueIndex];\n      });\n\n      // Generate the next-largest indices for the next call.\n      // Increase the rightmost index. If it goes over, increase the next\n      // rightmost (like carry-over addition).\n      for (var i = indicies.length - 1; i >= 0; i--) {\n        // Assertion prevents compiler warning below.\n        goog.asserts.assert(indicies);\n        if (indicies[i] < arrays[i].length - 1) {\n          indicies[i]++;\n          break;\n        }\n\n        // We're at the last indices (the last element of every array), so\n        // the iteration is over on the next call.\n        if (i == 0) {\n          indicies = null;\n          break;\n        }\n        // Reset the index in this column and loop back to increment the\n        // next one.\n        indicies[i] = 0;\n      }\n      return retVal;\n    }\n\n    throw goog.iter.StopIteration;\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Create an iterator to cycle over the iterable's elements indefinitely.\n * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...\n * @see: http://docs.python.org/library/itertools.html#itertools.cycle.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable object.\n * @return {!goog.iter.Iterator<VALUE>} An iterator that iterates indefinitely\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.cycle = function(iterable) {\n  'use strict';\n  var baseIterator = goog.iter.toIterator(iterable);\n\n  // We maintain a cache to store the iterable elements as we iterate\n  // over them. The cache is used to return elements once we have\n  // iterated over the iterable once.\n  var cache = [];\n  var cacheIndex = 0;\n\n  var iter = new goog.iter.Iterator();\n\n  // This flag is set after the iterable is iterated over once\n  var useCache = false;\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    var returnElement = null;\n\n    // Pull elements off the original iterator if not using cache\n    if (!useCache) {\n      try {\n        // Return the element from the iterable\n        returnElement = baseIterator.nextValueOrThrow();\n        cache.push(returnElement);\n        return returnElement;\n      } catch (e) {\n        // If an exception other than StopIteration is thrown\n        // or if there are no elements to iterate over (the iterable was empty)\n        // throw an exception\n        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {\n          throw e;\n        }\n        // set useCache to true after we know that a 'StopIteration' exception\n        // was thrown and the cache is not empty (to handle the 'empty iterable'\n        // use case)\n        useCache = true;\n      }\n    }\n\n    returnElement = cache[cacheIndex];\n    cacheIndex = (cacheIndex + 1) % cache.length;\n\n    return returnElement;\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that counts indefinitely from a starting value.\n * @see http://docs.python.org/2/library/itertools.html#itertools.count\n * @param {number=} opt_start The starting value. Default is 0.\n * @param {number=} opt_step The number to increment with between each call to\n *     next. Negative and floating point numbers are allowed. Default is 1.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the values\n *     in the series.\n */\ngoog.iter.count = function(opt_start, opt_step) {\n  'use strict';\n  var counter = opt_start || 0;\n  var step = (opt_step !== undefined) ? opt_step : 1;\n  var iter = new goog.iter.Iterator();\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    var returnValue = counter;\n    counter += step;\n    return returnValue;\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns the same object or value repeatedly.\n * @param {VALUE} value Any object or value to repeat.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that returns the\n *     repeated value.\n * @template VALUE\n */\ngoog.iter.repeat = function(value) {\n  'use strict';\n  var iter = new goog.iter.Iterator();\n\n  iter.nextValueOrThrow = goog.functions.constant(value);\n\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns running totals from the numbers in\n * `iterable`. For example, the array {@code [1, 2, 3, 4, 5]} yields\n * {@code 1 -> 3 -> 6 -> 10 -> 15}.\n * @see http://docs.python.org/3.2/library/itertools.html#itertools.accumulate\n * @param {!goog.iter.Iterator<number>|!goog.iter.Iterable} iterable The\n *     iterable of numbers to accumulate.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the\n *     numbers in the series.\n */\ngoog.iter.accumulate = function(iterable) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var total = 0;\n  var iter = new goog.iter.Iterator();\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    total += iterator.nextValueOrThrow();\n    return total;\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Once the shortest iterable is\n * exhausted, subsequent calls to `nextValueOrThrow()` will throw\n * `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zip = function(var_args) {\n  'use strict';\n  var args = arguments;\n  var iter = new goog.iter.Iterator();\n\n  if (args.length > 0) {\n    var iterators = goog.array.map(args, goog.iter.toIterator);\n    iter.nextValueOrThrow = function() {\n      'use strict';\n      var arr = goog.array.map(iterators, function(it) {\n        'use strict';\n        return it.nextValueOrThrow();\n      });\n      return arr;\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Shorter iterables will be extended\n * with `fillValue`. Once the longest iterable is exhausted, subsequent\n * calls to `nextValueOrThrow()` will throw `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip_longest\n * @param {VALUE} fillValue The object or value used to fill shorter iterables.\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zipLongest = function(fillValue, var_args) {\n  'use strict';\n  var args = Array.prototype.slice.call(arguments, 1);\n  var iter = new goog.iter.Iterator();\n\n  if (args.length > 0) {\n    var iterators = goog.array.map(args, goog.iter.toIterator);\n\n    iter.nextValueOrThrow = function() {\n      'use strict';\n      var iteratorsHaveValues = false;  // false when all iterators are empty.\n      var arr = goog.array.map(iterators, function(it) {\n        'use strict';\n        var returnValue;\n        try {\n          returnValue = it.nextValueOrThrow();\n          // Iterator had a value, so we've not exhausted the iterators.\n          // Set flag accordingly.\n          iteratorsHaveValues = true;\n        } catch (ex) {\n          if (ex !== goog.iter.StopIteration) {\n            throw ex;\n          }\n          returnValue = fillValue;\n        }\n        return returnValue;\n      });\n\n      if (!iteratorsHaveValues) {\n        throw goog.iter.StopIteration;\n      }\n      return arr;\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that filters `iterable` based on a series of\n * `selectors`. On each call to `nextValueOrThrow()`, one item is taken from\n * both the `iterable` and `selectors` iterators. If the item from\n * `selectors` evaluates to true, the item from `iterable` is given.\n * Otherwise, it is skipped. Once either `iterable` or `selectors`\n * is exhausted, subsequent calls to `nextValueOrThrow()` will throw\n * `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.compress\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to filter.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} selectors An\n *     iterable of items to be evaluated in a boolean context to determine if\n *     the corresponding element in `iterable` should be included in the\n *     result.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that returns the\n *     filtered values.\n * @template VALUE\n */\ngoog.iter.compress = function(iterable, selectors) {\n  'use strict';\n  var selectorIterator = goog.iter.toIterator(selectors);\n\n  return goog.iter.filter(iterable, function() {\n    'use strict';\n    return !!selectorIterator.nextValueOrThrow();\n  });\n};\n\n\n\n/**\n * Implements the `goog.iter.groupBy` iterator.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY=} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @constructor\n * @extends {goog.iter.Iterator<!Array<?>>}\n * @template KEY, VALUE\n * @private\n */\ngoog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {\n  'use strict';\n  /**\n   * The iterable to group, coerced to an iterator.\n   * @type {!goog.iter.Iterator}\n   */\n  this.iterator = goog.iter.toIterator(iterable);\n\n  /**\n   * A function for determining the key value for each element in the iterable.\n   * If no function is provided, the identity function is used and returns the\n   * element unchanged.\n   * @type {function(VALUE): KEY}\n   */\n  this.keyFunc = opt_keyFunc || goog.functions.identity;\n\n  /**\n   * The target key for determining the start of a group.\n   * @type {KEY}\n   */\n  this.targetKey;\n\n  /**\n   * The current key visited during iteration.\n   * @type {KEY}\n   */\n  this.currentKey;\n\n  /**\n   * The current value being added to the group.\n   * @type {VALUE}\n   */\n  this.currentValue;\n};\ngoog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);\n\n\n/** @override */\ngoog.iter.GroupByIterator_.prototype.nextValueOrThrow = function() {\n  'use strict';\n  while (this.currentKey == this.targetKey) {\n    this.currentValue =\n        this.iterator.nextValueOrThrow();  // Exits on StopIteration\n    this.currentKey = this.keyFunc(this.currentValue);\n  }\n  this.targetKey = this.currentKey;\n  return [this.currentKey, this.groupItems_(this.targetKey)];\n};\n\n\n\n/**\n * Performs the grouping of objects using the given key.\n * @param {KEY} targetKey  The target key object for the group.\n * @return {!Array<VALUE>} An array of grouped objects.\n * @private\n */\ngoog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {\n  'use strict';\n  var arr = [];\n  while (this.currentKey == targetKey) {\n    arr.push(this.currentValue);\n    try {\n      this.currentValue = this.iterator.nextValueOrThrow();\n    } catch (ex) {\n      if (ex !== goog.iter.StopIteration) {\n        throw ex;\n      }\n      break;\n    }\n    this.currentKey = this.keyFunc(this.currentValue);\n  }\n  return arr;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing elements from the\n * `iterable` grouped by a key value. For iterables with repeated\n * elements (i.e. sorted according to a particular key function), this function\n * has a `uniq`-like effect. For example, grouping the array:\n * {@code [A, B, B, C, C, A]} produces\n * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.groupby\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY=} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @return {!goog.iter.Iterator<!Array<?>>} A new iterator that returns\n *     arrays of consecutive key and groups.\n * @template KEY, VALUE\n */\ngoog.iter.groupBy = function(iterable, opt_keyFunc) {\n  'use strict';\n  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);\n};\n\n\n/**\n * Gives an iterator that gives the result of calling the given function\n * <code>f</code> with the arguments taken from the next element from\n * <code>iterable</code> (the elements are expected to also be iterables).\n *\n * Similar to {@see goog.iter.map} but allows the function to accept multiple\n * arguments from the iterable.\n *\n * @param {!goog.iter.Iterator<?>|!goog.iter.Iterable} iterable The iterable of\n *     iterables to iterate over.\n * @param {function(this:THIS,...*):RESULT} f The function to call for every\n *     element.  This function takes N+2 arguments, where N represents the\n *     number of items from the next element of the iterable. The two\n *     additional arguments passed to the function are undefined and the\n *     iterator itself. The function should return a new value.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<RESULT>} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, RESULT\n */\ngoog.iter.starMap = function(iterable, f, opt_obj) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var iter = new goog.iter.Iterator();\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    var args = goog.iter.toArray(iterator.nextValueOrThrow());\n    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Returns an array of iterators each of which can iterate over the values in\n * `iterable` without advancing the others.\n * @see http://docs.python.org/2/library/itertools.html#itertools.tee\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to tee.\n * @param {number=} opt_num  The number of iterators to create. Default is 2.\n * @return {!Array<goog.iter.Iterator<VALUE>>} An array of iterators.\n * @template VALUE\n */\ngoog.iter.tee = function(iterable, opt_num) {\n  'use strict';\n  var iterator = goog.iter.toIterator(iterable);\n  var num = (typeof opt_num === 'number') ? opt_num : 2;\n  var buffers = goog.array.map(goog.array.range(num), function() {\n    'use strict';\n    return [];\n  });\n\n  var addNextIteratorValueToBuffers = function() {\n    'use strict';\n    var val = iterator.nextValueOrThrow();\n    goog.array.forEach(buffers, function(buffer) {\n      'use strict';\n      buffer.push(val);\n    });\n  };\n\n  var createIterator = function(buffer) {\n    'use strict';\n    // Each tee'd iterator has an associated buffer (initially empty). When a\n    // tee'd iterator's buffer is empty, it calls\n    // addNextIteratorValueToBuffers(), adding the next value to all tee'd\n    // iterators' buffers, and then returns that value. This allows each\n    // iterator to be advanced independently.\n    var iter = new goog.iter.Iterator();\n\n    iter.nextValueOrThrow = function() {\n      'use strict';\n      if (goog.array.isEmpty(buffer)) {\n        addNextIteratorValueToBuffers();\n      }\n      goog.asserts.assert(!goog.array.isEmpty(buffer));\n      return buffer.shift();\n    };\n\n\n    return iter;\n  };\n\n  return goog.array.map(buffers, createIterator);\n};\n\n\n/**\n * Creates an iterator that returns arrays containing a count and an element\n * obtained from the given `iterable`.\n * @see http://docs.python.org/2/library/functions.html#enumerate\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to enumerate.\n * @param {number=} opt_start  Optional starting value. Default is 0.\n * @return {!goog.iter.Iterator<!Array<?>>} A new iterator containing\n *     count/item pairs.\n * @template VALUE\n */\ngoog.iter.enumerate = function(iterable, opt_start) {\n  'use strict';\n  return goog.iter.zip(goog.iter.count(opt_start), iterable);\n};\n\n\n/**\n * Creates an iterator that returns the first `limitSize` elements from an\n * iterable. If this number is greater than the number of elements in the\n * iterable, all the elements are returned.\n * @see http://goo.gl/V0sihp Inspired by the limit iterator in Guava.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to limit.\n * @param {number} limitSize  The maximum number of elements to return.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator containing\n *     `limitSize` elements.\n * @template VALUE\n */\ngoog.iter.limit = function(iterable, limitSize) {\n  'use strict';\n  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);\n\n  var iterator = goog.iter.toIterator(iterable);\n\n  var iter = new goog.iter.Iterator();\n  var remaining = limitSize;\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    if (remaining-- > 0) {\n      return iterator.nextValueOrThrow();\n    }\n    throw goog.iter.StopIteration;\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that is advanced `count` steps ahead. Consumed\n * values are silently discarded. If `count` is greater than the number\n * of elements in `iterable`, an empty iterator is returned. Subsequent\n * calls to `nextValueOrThrow()` will throw `goog.iter.StopIteration`.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to consume.\n * @param {number} count  The number of elements to consume from the iterator.\n * @return {!goog.iter.Iterator<VALUE>} An iterator advanced zero or more steps\n *     ahead.\n * @template VALUE\n */\ngoog.iter.consume = function(iterable, count) {\n  'use strict';\n  goog.asserts.assert(goog.math.isInt(count) && count >= 0);\n\n  var iterator = goog.iter.toIterator(iterable);\n\n  while (count-- > 0) {\n    goog.iter.nextOrValue(iterator, null);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Creates an iterator that returns a range of elements from an iterable.\n * Similar to {@see goog.array.slice} but does not support negative indexes.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to slice.\n * @param {number} start  The index of the first element to return.\n * @param {number=} opt_end  The index after the last element to return. If\n *     defined, must be greater than or equal to `start`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator containing a slice of\n *     the original.\n * @template VALUE\n */\ngoog.iter.slice = function(iterable, start, opt_end) {\n  'use strict';\n  goog.asserts.assert(goog.math.isInt(start) && start >= 0);\n\n  var iterator = goog.iter.consume(iterable, start);\n\n  if (typeof opt_end === 'number') {\n    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);\n    iterator = goog.iter.limit(iterator, opt_end - start /* limitSize */);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Checks an array for duplicate elements.\n * @param {?IArrayLike<VALUE>} arr The array to check for\n *     duplicates.\n * @return {boolean} True, if the array contains duplicates, false otherwise.\n * @private\n * @template VALUE\n */\n// TODO(user): Consider moving this into goog.array as a public function.\ngoog.iter.hasDuplicates_ = function(arr) {\n  'use strict';\n  var deduped = [];\n  goog.array.removeDuplicates(arr, deduped);\n  return arr.length != deduped.length;\n};\n\n\n/**\n * Creates an iterator that returns permutations of elements in\n * `iterable`.\n *\n * Permutations are obtained by taking the Cartesian product of\n * `opt_length` iterables and filtering out those with repeated\n * elements. For example, the permutations of {@code [1,2,3]} are\n * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.permutations\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable from which to generate permutations.\n * @param {number=} opt_length Length of each permutation. If omitted, defaults\n *     to the length of `iterable`.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing the\n *     permutations of `iterable`.\n * @template VALUE\n */\ngoog.iter.permutations = function(iterable, opt_length) {\n  'use strict';\n  var elements = goog.iter.toArray(iterable);\n  var length = (typeof opt_length === 'number') ? opt_length : elements.length;\n\n  var sets = goog.array.repeat(elements, length);\n  var product = goog.iter.product.apply(undefined, sets);\n\n  return goog.iter.filter(product, function(arr) {\n    'use strict';\n    return !goog.iter.hasDuplicates_(arr);\n  });\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`.\n *\n * Combinations are obtained by taking the {@see goog.iter.permutations} of\n * `iterable` and filtering those whose elements appear in the order they\n * are encountered in `iterable`. For example, the 3-length combinations\n * of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3], [1,2,3]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.combinations\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable from which to generate combinations.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinations = function(iterable, length) {\n  'use strict';\n  var elements = goog.iter.toArray(iterable);\n  var indexes = goog.iter.range(elements.length);\n  var indexIterator = goog.iter.permutations(indexes, length);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \"elements\" should be returned on each iteration.\n  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {\n    'use strict';\n    return goog.array.isSorted(arr);\n  });\n\n  var iter = new goog.iter.Iterator();\n\n  function getIndexFromElements(index) {\n    return elements[index];\n  }\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    return goog.array.map(\n        sortedIndexIterator.nextValueOrThrow(), getIndexFromElements);\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`, with repeated elements possible.\n *\n * Combinations are obtained by taking the Cartesian product of `length`\n * iterables and filtering those whose elements appear in the order they are\n * encountered in `iterable`. For example, the 2-length combinations of\n * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.\n * @see https://goo.gl/C0yXe4\n * @see https://goo.gl/djOCsk\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to combine.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinationsWithReplacement = function(iterable, length) {\n  'use strict';\n  var elements = goog.iter.toArray(iterable);\n  var indexes = goog.array.range(elements.length);\n  var sets = goog.array.repeat(indexes, length);\n  var indexIterator = goog.iter.product.apply(undefined, sets);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \"elements\" should be returned on each iteration.\n  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {\n    'use strict';\n    return goog.array.isSorted(arr);\n  });\n\n  var iter = new goog.iter.Iterator();\n\n  function getIndexFromElements(index) {\n    return elements[index];\n  }\n\n  iter.nextValueOrThrow = function() {\n    'use strict';\n    return goog.array.map(\n        /** @type {!Array<number>} */\n        (sortedIndexIterator.nextValueOrThrow()), getIndexFromElements);\n  };\n\n\n  return iter;\n};\n"],
"names":["goog","provide","require","iter","Iterable","StopIteration","global","message","stack","Iterator","goog.iter.Iterator","prototype","nextValueOrThrow","goog.iter.Iterator.prototype.nextValueOrThrow","next","goog.iter.Iterator.prototype.next","ES6_ITERATOR_DONE","debug","freeze","done","value","undefined","createEs6IteratorYield","goog.iter.createEs6IteratorYield","toEs4IteratorNext","goog.iter.toEs4IteratorNext","es6NextValue","checkNoImplicitStopIterationInEs6","goog.iter.checkNoImplicitStopIterationInEs6","ex","Error","__iterator__","goog.iter.Iterator.prototype.__iterator__","opt_keys","toIterator","goog.iter.toIterator","iterable","isArrayLike","like","i","newIter","newIter.nextValueOrThrow","length","forEach","goog.iter.forEach","f","opt_obj","array","call","filter","goog.iter.filter","iterator","val","filterFalse","goog.iter.filterFalse","functions","not","range","goog.iter.range","startOrStop","opt_stop","opt_step","start","stop","step","arguments","rv","join","goog.iter.join","deliminator","toArray","map","goog.iter.map","reduce","goog.iter.reduce","rval","some","goog.iter.some","every","goog.iter.every","chain","goog.iter.chain","var_args","chainFromIterable","goog.iter.chainFromIterable","current","iter.nextValueOrThrow","it","dropWhile","goog.iter.dropWhile","dropping","takeWhile","goog.iter.takeWhile","goog.iter.toArray","push","equals","goog.iter.equals","iterable1","iterable2","opt_equalsFn","fillValue","pairs","zipLongest","equalsFn","defaultCompareEquality","pair","nextOrValue","goog.iter.nextOrValue","defaultValue","e","product","goog.iter.product","someArrayEmpty","Array","arr","arrays","indicies","repeat","retVal","valueIndex","arrayIndex","asserts","assert","cycle","goog.iter.cycle","baseIterator","cache","cacheIndex","useCache","returnElement","isEmpty","count","goog.iter.count","opt_start","counter","returnValue","goog.iter.repeat","constant","accumulate","goog.iter.accumulate","total","zip","goog.iter.zip","args","iterators","goog.iter.zipLongest","slice","iteratorsHaveValues","compress","goog.iter.compress","selectors","selectorIterator","GroupByIterator_","goog.iter.GroupByIterator_","opt_keyFunc","keyFunc","identity","targetKey","currentKey","currentValue","inherits","goog.iter.GroupByIterator_.prototype.nextValueOrThrow","groupItems_","goog.iter.GroupByIterator_.prototype.groupItems_","groupBy","goog.iter.groupBy","starMap","goog.iter.starMap","apply","concat","tee","goog.iter.tee","opt_num","num","buffers","addNextIteratorValueToBuffers","buffer","createIterator","shift","enumerate","goog.iter.enumerate","limit","goog.iter.limit","limitSize","math","isInt","remaining","consume","goog.iter.consume","goog.iter.slice","opt_end","hasDuplicates_","goog.iter.hasDuplicates_","deduped","removeDuplicates","permutations","goog.iter.permutations","opt_length","elements","sets","combinations","goog.iter.combinations","indexes","indexIterator","sortedIndexIterator","isSorted","getIndexFromElements","index","combinationsWithReplacement","goog.iter.combinationsWithReplacement"]
}
