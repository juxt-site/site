{"version":3,"sources":["ajax/simple.cljc"],"mappings":";AAYA,+BAAA,/BAAMA,sEAAkBC;AAAxB,AACE,GAAI,mBAAAC,lBAAUD;AACZ,OAACE,0BAAe,AAACC,eAAKH;;AACtBA;;;AAEJ,+BAAA,/BAAMI,sEAAkBC,SAASC;AAAjC,AACE,OAACC,iCAAqBD,YAAYD;;AAEpC,8BAAA,9BAAMG,oEAAiBC,QAAQC;AAA/B,AACE,0DAAgBL;AAAhB,AACE,IAAMM,YAAU,AAACC,+CAAOR,6BAAiBC,SAASK;AAAlD,AASE,QAACD,wCAAAA,mDAAAA,bAAQE,+BAAAA;;;AAEf,2BAAA,gDAAAE,3EAAMI,8DAAcP;AAApB,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAAyCL;AAAzC,AACE,oBAAIA;AACF,OAACD,4BAAgBC,QAAQC;;AACzB,6BAAA,tBAACQ;;;AAEL,AAAKC,mCAAqB,6CAAA,7CAACC;AAE3B,gCAAA,hCAAMC,wEAAmBC;AAAzB,AACE,IAAMC,kBAAgB,AAACC,sCAAsBC,oCAAyBH;AAAtE,qGACMA,/CACA,uDAAA,vDAACI,8GAAe3B,pKAChB,kMAAA,sEAAA,WAAA4B,5QAACD;AAAD,AACS,6DAAA,tDAACE,yIAAQL,wBACD,iBAAAM,mBAAAF;AAAA,AAAA,oBAAAE;AAAAA;;AAAA,OAAAC,gBAAOX;;uDACPY;;;AAEzB,8BAAA,9BAAMC;AAAN,AAEY,YAAKC;;AAEjB;;;8BAAA,9BAAMC,oEAEHZ,QAAQhB;AAFX,AAGE,OAAC6B,gCAAoB7B,YAAYgB;;AAEnC;;;+BAAA,uCAAAc,tEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAtB,4BAAAsB;cAAAA,VAE6Bf;mBAF7B,AAAAN,4CAAAqB,eAAA,1EAEW3B;AAFX,AAGE,IAAMY,cAAQ,AAACV,+CAAOsB,4BAAgBZ,QAAQZ;IAExCD,UAAQ,AAACQ,yBAAa,AAACsB,kBAAQ7B,cAAcY;IAE7CkB,MAAI,iBAAAX,mBAAI,AAAA,iFAAMP;AAAV,AAAA,oBAAAO;AAAAA;;AAAmB,OAACG;;;AAJ9B,AAKE,OAACS,gCAAoBD,IAAIlB,YAAQb;;AAErC,2BAAA,3BAAMiC,8DAAcpB;AAApB,AACE,oCAAA,8BAAIA,9BAAQD,7BAAkBiB","names":["ajax.simple/normalize-method","method","cljs.core/Keyword","clojure.string/upper-case","cljs.core/name","ajax.simple/process-response","response","interceptor","ajax.protocols/-process-response","ajax.simple/make-js-handler","handler","interceptors","processed","cljs.core.reduce","p__22505","map__22506","cljs.core/--destructure-map","cljs.core.get","ajax.simple/base-handler","ajax.util/throw-error","ajax.simple/default-interceptors","cljs.core.atom","ajax.simple/normalize-request","request","response-format","ajax.interceptors/get-response-format","ajax.formats/detect-response-format","cljs.core.update","p1__22507#","cljs.core.concat","or__5045__auto__","cljs.core/deref","ajax.interceptors/request-interceptors","ajax.simple/new-default-api","js/goog.net.XhrIo","ajax.simple/process-request","ajax.protocols/-process-request","p__22540","map__22543","ajax.simple/raw-ajax-request","cljs.core/reverse","api","ajax.protocols/-js-ajax-request","ajax.simple/ajax-request"],"sourcesContent":["(ns ajax.simple\n    (:require [clojure.string :as str]\n              [ajax.protocols :as pr]\n              [ajax.interceptors :as i]\n              [ajax.formats :as f]\n              [ajax.util :as u]\n              #? (:clj [ajax.apache :as a])\n              #? (:clj [ajax.macros :as m]\n                  :cljs [goog.net.XhrIo :as xhr]))\n    #? (:clj (:import [java.io Closeable])\n        :cljs (:require-macros [ajax.macros :as m])))\n\n(defn normalize-method [method]\n  (if (keyword? method)\n    (str/upper-case (name method))\n    method))\n\n(defn process-response [response interceptor]\n  (pr/-process-response interceptor response))\n\n(defn make-js-handler [handler interceptors]\n  (fn js-handler [response]\n    (let [processed (reduce process-response response interceptors)]\n      ;;; This requires a bit of explanation: if we return a closeable,\n      ;;; it should be wrapping the original response, so we _don't_\n      ;;; close the original response stream\n      ;;; If you're writing a weird interceptor that doesn't do this,\n      ;;; remember to close the original stream yourself\n      #?(:clj (if (and response\n                       (instance? Closeable (second processed)))\n                (.close ^Closeable (pr/-body response))))\n      (handler processed))))\n\n(defn base-handler [interceptors {:keys [handler]}]\n  (if handler\n    (make-js-handler handler interceptors)\n    (u/throw-error \"No ajax handler provided.\")))\n\n(def default-interceptors (atom []))\n\n(defn normalize-request [request]\n  (let [response-format (i/get-response-format f/detect-response-format request)]\n    (-> request\n        (update :method normalize-method)\n        (update :interceptors\n                #(concat [response-format]\n                         (or % @default-interceptors)\n                         i/request-interceptors)))))\n\n(defn new-default-api []\n  #? (:clj  (a/new-api)\n      :cljs (new goog.net.XhrIo)))\n\n(defn process-request \n  \"-process-request with the arguments flipped for use in reduce\"\n  [request interceptor]\n  (pr/-process-request interceptor request))\n\n(defn raw-ajax-request \n  \"The main request function.\"\n  [{:keys [interceptors] :as request}]\n  (let [request (reduce process-request request interceptors)\n        ;;; Pass the request through the interceptors\n        handler (base-handler (reverse interceptors) request)\n        ;;; Set up a handler that passes it back through\n        api (or (:api request) (new-default-api))]\n    (pr/-js-ajax-request api request handler)))\n\n(defn ajax-request [request]\n  (-> request normalize-request raw-ajax-request))\n"]}