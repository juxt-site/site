{"version":3,"sources":["shadow/grove/ui/atoms.cljs"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.grove.ui.atoms/EnvWatch","shadow.grove.ui.atoms/->EnvWatch","key-to-atom","path","default","the-atom","val","component-handle","this","ch","atom","cljs.core.get","shadow.grove.protocols/get-component-env","cljs.core.ex_info","cljs.core/deref","cljs.core.get_in","cljs.core/add-watch","_","new-value","next-val","cljs.core.not_EQ_","shadow.grove.protocols/hook-invalidate!","new-val","cljs.core/remove-watch","shadow.grove.ui.atoms/AtomWatch","shadow.grove.ui.atoms/->AtomWatch","access-fn","G__12476","G__12477","old","new"],"sourcesContent":["(ns shadow.grove.ui.atoms\n  (:require\n    [shadow.grove.components :as comp]\n    [shadow.grove.protocols :as gp]\n    [shadow.grove.ui.util :as util]))\n\n(deftype EnvWatch\n  [key-to-atom path default\n   ^:mutable the-atom\n   ^:mutable val\n   ^:mutable component-handle]\n\n  gp/IHook\n  (hook-init! [this ch]\n    (set! component-handle ch)\n\n    (let [atom (get (gp/get-component-env ch) key-to-atom)]\n      (when-not atom\n        (throw (ex-info \"no atom found under key\" {:key key-to-atom :path path})))\n      (set! the-atom atom))\n\n    (set! val (get-in @the-atom path default))\n    (add-watch the-atom this\n      (fn [_ _ _ new-value]\n        ;; check immediately and only invalidate if actually changed\n        ;; avoids kicking off too much work\n        (let [next-val (get-in new-value path default)]\n          (when (not= val next-val)\n            (set! val next-val)\n            (gp/hook-invalidate! component-handle))))))\n\n  (hook-ready? [this] true) ;; born ready\n  (hook-value [this] val)\n  (hook-update! [this]\n    ;; only gets here if val actually changed\n    true)\n\n  (hook-deps-update! [this new-val]\n    (throw (ex-info \"shouldn't have changing deps?\" {})))\n  (hook-destroy! [this]\n    (remove-watch the-atom this)))\n\n(deftype AtomWatch\n  [the-atom\n   access-fn\n   ^:mutable val\n   ^:mutable component-handle]\n\n  gp/IHook\n  (hook-init! [this ch]\n    (set! component-handle ch)\n    (set! val (access-fn nil @the-atom))\n    (add-watch the-atom this\n      (fn [_ _ old new]\n        ;; check immediately and only invalidate if actually changed\n        ;; avoids kicking off too much work\n        ;; FIXME: maybe shouldn't check equiv? only identical?\n        ;; pretty likely that something changed after all\n        (let [next-val (access-fn old new)]\n          (when (not= val next-val)\n            (set! val next-val)\n            (gp/hook-invalidate! component-handle))))))\n\n  (hook-ready? [this] true) ;; born ready\n  (hook-value [this] val)\n  (hook-update! [this]\n    ;; only gets here if value changed\n    true)\n  (hook-deps-update! [this new-val]\n    ;; FIXME: its ok to change the access-fn\n    (throw (ex-info \"shouldn't have changing deps?\" {})))\n  (hook-destroy! [this]\n    (remove-watch the-atom this)))"]}