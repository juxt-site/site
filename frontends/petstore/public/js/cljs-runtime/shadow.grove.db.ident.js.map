{"version":3,"sources":["shadow/grove/db/ident.cljc"],"mappings":";AAWG,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,0EAAA,1EAASI,qFAEGK,MAAKC;;AAFjB,AAAA,gBAAA,ZAEYD;AAFZ,AAGI,IAAAE,UAAMD;IAANC,cAAA,EAAA,CAAAA,mBAAAC,oBAAA,AAAAD,YAAA;AAAA,AAAA,QAAAA;KAAA;AACeL;;;KADf;AAEMC;;;;AAFN;;;;;AAHJ,CAAA,AAAA,sEAAA,tEAASH,iFASCK;;AATV,AAAA,gBAAA,ZASUA;AATV,AAUI,GAAI,GAAA,iBAAA,hBAAOD;AACTA;;AACA,IAAMK,IAAE,CAAA,CAAA,QAAY,AAACC,eAAKP,cAAI,AAACO,eAAKP;AAApC,AACE,CAAMC,eAAMK;;AACZA;;;;AAdR,CAAA,AAAA,wEAAA,xEAAST,mFAiBEK,MAAYM;;AAjBvB,AAAA,gBAAA,ZAiBWN;AAjBX,AAkBI,6DAAA,pDAAK,kBAAWL,jBAAMW,qDACjB,AAACC,mCAAmBV,mBAAY,AAAeS,wBAC/C,AAACE,6CAAEV,UAAG,AAAMQ;;;AApBrB,CAAA,AAAA,+EAAA,/EAASX,0FAuBIK,MAAYM;;AAvBzB,AAAA,gBAAA,ZAuBaN;AAvBb,AAwBI,GAAU,kBAAWL,jBAAMW;AAA3B;AAAA,AACE,MAAO,4JAAA,2CAAA,+DAAA,tQAACG,gDAAQ,CAAA,0EAAmC,AAACC,eAAKJ,kHACzCN,gEACCM;;;AAEnB,IAAMK,KAAG,AAACC,kBAAQf,mBAAY,AAAeS;AAA7C,AACE,GAAA,GAAQ,QAAA,PAAOK;AACbA;;AACA,OAACC,kBAAQd,UAAG,AAAMQ;;;;AAhC1B,CAAA,AAAA,sFAAA,tFAASX,iGAmCMK,MAAKa,OAAOC;;AAnC3B,AAAA,gBAAA,ZAmCed;AAnCf,AAwCI,wBAAA,xBAACN,iBAAOmB;;AAGR,AAACnB,iBAAOmB,OAAO,AAACE,wGAAOlB;;AACvB,wBAAA,xBAACH,iBAAOmB;;AACR,AAACnB,iBAAOmB,OAAO,AAACE,wGAAOjB;;AACvB,+BAAA,xBAACJ,iBAAOmB;;;AA9CZ,CAAA,AAAA,iDAAA,jDAASlB;;AAAT,AAAA,YAAA,RAiDaK;AAjDb,AAkDI,OAACe,wGAAOf;;;AAlDZ,CAAA,uCAAA,vCAASL;AAAT,AAAA,AAAA;;;AAAA,CAAA,6CAAA,7CAASA;;AAAT,CAAA,gDAAA,hDAASA;;AAAT,CAAA,qDAAA,WAAAJ,mBAAAC,qBAAAC,xGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;mCAAA,nCAASI,8EAAOC,YAAYC,GAAaC;AAAzC,AAAA,YAAAJ,4BAAgBE,YAAYC,GAAaC;;;AAAhCJ,AAiEZ,qCAAA,rCAAMqB,kFAAQC;AAAd,AACE,yBAAWtB,jBAAMsB","names":["this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.grove.db.ident/Ident","shadow.grove.db.ident/->Ident","entity-type","id","_hash","this","key","G__9890","cljs.core/Keyword","x","cljs.core/hash","other","cljs.core/keyword-identical?","cljs.core._EQ_","cljs.core.ex_info","cljs.core/type","tc","cljs.core/compare","writer","opts","cljs.core.pr_str","shadow.grove.db.ident/ident?","thing"],"sourcesContent":["(ns shadow.grove.db.ident\n  (:refer-clojure :exclude (ident?)))\n\n;; keeping this in its own namespace only for hot-reload purposes\n;; keeping it in db directly is a little annoying otherwise when working on db namespace\n\n;; not using record since they shouldn't act as maps\n;; users should treat these as black box and never directly look at the fields\n;; also does a bunch of other stuff I don't want\n\n#?(:cljs\n   (deftype Ident [entity-type id ^:mutable _hash]\n     ILookup\n     (-lookup [this key]\n       (case key\n         :entity-type entity-type\n         :id id\n         nil))\n\n     IHash\n     (-hash [this]\n       (if (some? _hash)\n         _hash\n         (let [x (bit-or 123 (hash id) (hash id))]\n           (set! _hash x)\n           x)))\n\n     IEquiv\n     (-equiv [this ^Ident other]\n       (and (instance? Ident other)\n            (keyword-identical? entity-type (.-entity-type other))\n            (= id (.-id other))))\n\n     IComparable\n     (-compare [this ^Ident other]\n       (when-not (instance? Ident other)\n         (throw (ex-info (str \"cannot compare db/ident to \" (type other))\n                  {:this this\n                   :other other})))\n\n       (let [tc (compare entity-type (.-entity-type other))]\n         (if-not (zero? tc)\n           tc\n           (compare id (.-id other)))))\n\n     IPrintWithWriter\n     (-pr-writer [this writer opts]\n       ;; gdb = grove db\n       ;; using the full shadow.grove.db/ident is rather long\n       ;; coupled with namespaced entity-type keyword things become way too long\n       ;; inspect and otherwise printed\n       (-write writer \"#gdb/ident [\")\n       ;; can't pr-writer these since some native types don't implement IPrintWithWriter\n       ;; and pr-str handles those\n       (-write writer (pr-str entity-type))\n       (-write writer \" \")\n       (-write writer (pr-str id))\n       (-write writer \"]\"))\n\n     Object\n     (toString [this]\n       (pr-str this)))\n\n   ;; FIXME: should also be deftype\n   :clj\n   (do (defrecord Ident [entity-type id])\n\n       (defmethod print-method Ident [ident writer]\n         (.write writer \"#gdb/ident [\")\n         ;; FIXME: shouldn't use pr-str?\n         (.write writer (pr-str (:entity-type ident)))\n         (.write writer \" \")\n         (.write writer (pr-str (:id ident)))\n         (.write writer \"]\"))))\n\n\n(defn ident? [thing]\n  (instance? Ident thing))"]}