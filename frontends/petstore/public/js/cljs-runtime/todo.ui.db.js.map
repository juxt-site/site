{"version":3,"sources":["todo/ui/db.cljs"],"mappings":"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","names":["shadow.grove.eql-query/attr","env","db","current","_","params","shadow.grove.db/all-of","cljs.core.remove","cljs.core/count","cljs.core.filter","cljs.core._EQ_","p__12088","map__12089","cljs.core/--destructure-map","cljs.core.get","current-filter","filter-fn","G__12090","cljs.core/Keyword","p1__12086#","p1__12087#","js/Error","x","cljs.core/not","cljs.core.map","cljs.core.sort","cljs.core/vec","todo.ui.db/without","items","del","cljs.core.into","todo.ui.db/r->","init","rfn","coll","cljs.core.reduce","shadow.grove/reg-event","todo.ui.env/rt-ref","p__12091","map__12092","token","e","filter","G__12093","cljs.core/assoc-in","p__12094","map__12095","todo-text","cljs.core.update","map__12096","id-seq","new-todo","cljs.core/inc","shadow.grove.db.add","p__12097","map__12098","todo","cljs.core.dissoc","p__12099","map__12100","cljs.core.update_in","p__12101","map__12102","p__12103","map__12104","text","cljs.core.assoc","p__12106","map__12107","completed?","shadow.grove.db/remove","p1__12105#","cljs.core.get_in","p__12108","map__12109","ident","shadow.grove.db/all-idents-of"],"sourcesContent":["(ns todo.ui.db\n  (:require\n    [shadow.grove.eql-query :as eql]\n    [shadow.grove.db :as db]\n    [shadow.grove :as sg]\n    [todo.ui.env :as env]\n    [todo.model :as-alias m]\n    ))\n\n(defmethod eql/attr ::m/num-active\n  [env db current _ params]\n  (->> (db/all-of db ::m/todo)\n       (remove ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-completed\n  [env db current _ params]\n  (->> (db/all-of db ::m/todo)\n       (filter ::m/completed?)\n       (count)))\n\n(defmethod eql/attr ::m/num-total\n  [env db current _ params]\n  (count (db/all-of db ::m/todo)))\n\n(defmethod eql/attr ::m/editing?\n  [env db current _ params]\n  (= (::m/editing db) (:db/ident current)))\n\n(defmethod eql/attr ::m/filtered-todos\n  [env {::m/keys [current-filter] :as db} current _ params]\n  (let [filter-fn\n        (case current-filter\n          :all\n          (fn [x] true)\n          :active\n          #(not (::m/completed? %))\n          :completed\n          #(true? (::m/completed? %)))]\n\n    (->> (db/all-of db ::m/todo)\n         (filter filter-fn)\n         (map :db/ident)\n         (sort)\n         (vec))))\n\n(defn without [items del]\n  (into [] (remove #{del}) items))\n\n(defn r-> [init rfn coll]\n  (reduce rfn init coll))\n\n(sg/reg-event env/rt-ref :ui/route!\n  (fn [env {:keys [token] :as e}]\n\n    ;; not much routing in this app, this will suffice\n    (let [filter\n          (case token\n            \"/completed\" :completed\n            \"/active\" :active\n            :all)]\n\n      (assoc-in env [:db ::m/current-filter] filter))))\n\n(sg/reg-event env/rt-ref ::m/create-new!\n  (fn [env {::m/keys [todo-text]}]\n    (update env :db\n      (fn [db]\n        (let [{::m/keys [id-seq]} db]\n          (let [new-todo {::m/pet-id id-seq ::m/todo-text todo-text}]\n            (-> db\n                (update ::m/id-seq inc)\n                (db/add ::m/todo new-todo [::m/todos]))))))))\n\n(sg/reg-event env/rt-ref ::m/delete!\n  (fn [env {:keys [todo]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (dissoc todo)\n            (update ::m/todos without todo))))))\n\n(sg/reg-event env/rt-ref ::m/toggle-completed!\n  (fn [env {:keys [todo]}]\n    (update-in env [:db todo ::m/completed?] not)))\n\n(sg/reg-event env/rt-ref ::m/edit-start!\n  (fn [env {:keys [todo]}]\n    (assoc-in env [:db ::m/editing] todo)))\n\n(sg/reg-event env/rt-ref ::m/edit-save!\n  (fn [env {:keys [todo text]}]\n    (update env :db\n      (fn [db]\n        (-> db\n            (assoc-in [todo ::m/todo-text] text)\n            (assoc ::m/editing nil))))))\n\n(sg/reg-event env/rt-ref ::m/edit-cancel!\n  (fn [env _]\n    (assoc-in env [:db ::m/editing] nil)))\n\n(sg/reg-event env/rt-ref ::m/clear-completed!\n  (fn [env _]\n    (update env :db\n      (fn [db]\n        (-> db\n            (r->\n              (fn [db {::m/keys [completed?] :as todo}]\n                (if-not completed?\n                  db\n                  (db/remove db todo)))\n              (db/all-of db ::m/todo))\n            (update ::m/todos (fn [current]\n                                (into [] (remove #(get-in db [% ::m/completed?])) current))))\n        ))))\n\n(sg/reg-event env/rt-ref ::m/toggle-all!\n  (fn [env {:keys [completed?]}]\n    (update env :db\n      (fn [db]\n        (reduce\n          (fn [db ident]\n            (assoc-in db [ident ::m/completed?] completed?))\n          db\n          (db/all-idents-of db ::m/todo))))))\n\n"]}