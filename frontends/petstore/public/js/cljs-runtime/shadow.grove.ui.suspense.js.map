{"version":3,"sources":["shadow/grove/ui/suspense.cljs"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.grove.ui.suspense/SuspenseScheduler","shadow.grove.ui.suspense/->SuspenseScheduler","parent-scheduler","root","should-trigger?","suspend-set","this","target","trigger","shadow.grove.protocols/schedule-work!","shadow.grove.protocols/unschedule!","action","shadow.grove.protocols/run-now!","cljs.core.conj","cljs.core.disj","and__5043__auto__","cljs.core/empty?","cljs.core/count","shadow.grove.ui.suspense/SuspenseRoot","shadow.grove.ui.suspense/->SuspenseRoot","opts","vnode","marker","parent-env","display","offscreen","offscreen-scheduler","timeout","dom-entered?","next","shadow.grove.ui.suspense/SuspenseInit","scheduler","offscreen-env","cljs.core.assoc","next-managed","shadow.arborist.protocols/as-managed","cljs.core/not","shadow.arborist.common/fragment-replace","shadow.arborist.protocols/dom-entered!","parent","anchor","dom-remove?","js/clearTimeout","timeout-ms","js/setTimeout","temp__5808__auto__","key","cljs.core.swap_BANG_","cljs.core/assoc","js/Date.now","fallback","old-display","cljs.core/dissoc","shadow.grove.ui.suspense/->SuspenseInit","env","G__12525","shadow.arborist.common.dom_marker"],"sourcesContent":["(ns shadow.grove.ui.suspense\n  (:require\n    [shadow.arborist.common :as common]\n    [shadow.arborist.protocols :as ap]\n    [shadow.grove.runtime :as rt]\n    [shadow.grove.protocols :as gp]\n    [shadow.grove.components :as comp]\n    [shadow.grove.ui.util :as util]))\n\n(set! *warn-on-infer* false)\n\n(declare SuspenseInit)\n\n(deftype SuspenseScheduler\n  [parent-scheduler\n   ^SuspenseRoot root\n   ^:mutable should-trigger?\n   ^:mutable suspend-set]\n\n  gp/IScheduleWork\n  (schedule-work! [this target trigger]\n    (gp/schedule-work! parent-scheduler target trigger))\n\n  (unschedule! [this target]\n    (gp/unschedule! parent-scheduler target))\n\n  (run-now! [this action trigger]\n    (gp/run-now! parent-scheduler action trigger))\n\n  (did-suspend! [this target]\n    ;; (js/console.log \"did-suspend!\" suspend-set target)\n    ;; FIXME: suspend parent scheduler when going offscreen?\n    (set! suspend-set (conj suspend-set target)))\n\n  (did-finish! [this target]\n    ;; (js/console.log \"did-finish!\" suspend-set target)\n    (set! suspend-set (disj suspend-set target))\n    (when (and should-trigger? (empty? suspend-set))\n      (set! should-trigger? false)\n      (.tree-did-finish! root)))\n\n  Object\n  (set-should-trigger! [this]\n    (set! should-trigger? true))\n\n  (cancel! [this]\n    (set! should-trigger? false))\n\n  (did-suspend? [this]\n    (pos? (count suspend-set))))\n\n(deftype SuspenseRoot\n  [^:mutable opts\n   ^:mutable vnode\n   marker\n   parent-env\n   parent-scheduler\n   ^not-native ^:mutable display\n   ^not-native ^:mutable offscreen\n   ^SuspenseScheduler ^:mutable offscreen-scheduler\n   ^:mutable timeout\n   ^boolean ^:mutable dom-entered?]\n\n  ap/IManaged\n  (supports? [this next]\n    (instance? SuspenseInit next))\n\n  (dom-sync! [this ^SuspenseInit next]\n    ;; FIXME: figure out strategy for this?\n    ;; if displaying fallback start rendering in background\n    ;; if displaying managed and supported, just sync\n    ;; if displaying managed and not supported, start rendering in background and swap when ready\n    ;; when rendering in background display fallback after timeout?\n\n    (set! vnode (.-vnode next))\n    (set! opts (.-opts next))\n\n    (cond\n      ;; offscreen update\n      (and offscreen (ap/supports? offscreen vnode))\n      (ap/dom-sync! offscreen vnode)\n\n      ;; offscreen swap\n      ;; if new offscreen does not suspend immediately replace display placeholder\n      ;; otherwise keep offscreen\n      offscreen\n      (do (ap/destroy! offscreen true)\n          (.cancel! offscreen-scheduler)\n\n          (let [scheduler\n                (SuspenseScheduler. parent-scheduler this false #{})\n\n                offscreen-env\n                (assoc parent-env ::comp/scheduler scheduler)\n\n                next-managed\n                (ap/as-managed vnode offscreen-env)]\n\n            (if-not (.did-suspend? scheduler)\n              (do (set! offscreen next-managed)\n                  (.tree-did-finish! this))\n              (do (set! offscreen next-managed)\n                  (set! offscreen-scheduler scheduler)\n                  (.set-should-trigger! scheduler)\n                  (.start-offscreen! this)))))\n\n      ;; display supports updating, just update\n      (ap/supports? display vnode)\n      (ap/dom-sync! display vnode)\n\n      ;; replace display and maybe start offscreen again\n      :else\n      (let [scheduler\n            (SuspenseScheduler. parent-scheduler this false #{})\n\n            offscreen-env\n            (assoc parent-env ::comp/scheduler scheduler)\n\n            next-managed\n            (ap/as-managed vnode offscreen-env)]\n\n        (if-not (.did-suspend? scheduler)\n          (do (common/fragment-replace display next-managed)\n              (set! display next-managed)\n              (when dom-entered?\n                (ap/dom-entered! next-managed)))\n\n          ;; display might not be the fallback\n          ;; keep showing it until timeout\n          (do (set! offscreen next-managed)\n              (set! offscreen-scheduler scheduler)\n              (.set-should-trigger! scheduler)\n              (.schedule-timeout! this)\n              (.start-offscreen! this))))))\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent marker anchor)\n    (ap/dom-insert display parent anchor))\n\n  (dom-first [this]\n    marker)\n\n  (dom-entered! [this]\n    (set! dom-entered? true)\n    (ap/dom-entered! display))\n\n  (destroy! [this ^boolean dom-remove?]\n    (when timeout\n      (js/clearTimeout timeout))\n    (when dom-remove?\n      (.remove marker))\n    (when display\n      (ap/destroy! display dom-remove?))\n    (when offscreen\n      (.cancel! offscreen-scheduler)\n      (ap/destroy! offscreen false)))\n\n  Object\n  (init! [this]\n    ;; can't be done in as-managed since it needs the this pointer\n    (let [scheduler\n          (SuspenseScheduler. parent-scheduler this false #{})\n\n          offscreen-env\n          (assoc parent-env ::comp/scheduler scheduler)\n\n          next-managed\n          (ap/as-managed vnode offscreen-env)]\n\n      (if-not (.did-suspend? scheduler)\n        (set! display next-managed)\n        (do (set! offscreen next-managed)\n            (set! offscreen-scheduler scheduler)\n            (set! display (ap/as-managed (:fallback opts) parent-env))\n            (.set-should-trigger! scheduler)\n            (.start-offscreen! this)))))\n\n  (schedule-timeout! [this]\n    (when-not timeout\n      (let [timeout-ms (:timeout opts 500)]\n        (set! timeout (js/setTimeout #(.did-timeout! this) timeout-ms)))))\n\n  (start-offscreen! [this]\n    (when-some [key (:key opts)]\n      (swap! (::suspense-keys parent-env) assoc key (js/Date.now))))\n\n  (did-timeout! [this]\n    (set! timeout nil)\n    (when offscreen\n      (let [fallback (ap/as-managed (:fallback opts) parent-env)\n            old-display display]\n        ;; (js/console.log \"using fallback after timeout\")\n        (set! display (common/fragment-replace old-display fallback))\n        (when dom-entered?\n          (ap/dom-entered! display)\n          ))))\n\n  (tree-did-finish! [this]\n    (ap/dom-insert offscreen (.-parentElement marker) marker)\n    (ap/destroy! display true)\n    (set! display offscreen)\n    (set! offscreen nil)\n    (set! offscreen-scheduler nil)\n\n    (when dom-entered?\n      (ap/dom-entered! display))\n\n    (when-some [key (:key opts)]\n      (swap! (::suspense-keys parent-env) dissoc key))\n\n    (when timeout\n      (js/clearTimeout timeout)\n      (set! timeout nil)\n      )))\n\n(deftype SuspenseInit [opts vnode]\n  ap/IConstruct\n  (as-managed [this env]\n    (doto (SuspenseRoot.\n            opts\n            vnode\n            (common/dom-marker env)\n            env\n            (::comp/scheduler env)\n            nil ;; display\n            nil ;; offscreen\n            nil ;; offscreen-scheduler\n            nil ;; timeout\n            false ;; dom-entered?\n            )\n      (.init!))))\n"]}