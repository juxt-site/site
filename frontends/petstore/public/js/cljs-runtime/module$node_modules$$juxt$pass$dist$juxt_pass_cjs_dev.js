shadow$provide.module$node_modules$$juxt$pass$dist$juxt_pass_cjs_dev=function(global,require,module,exports){function generateRandomString(){const array=new Uint32Array(14);self.crypto.getRandomValues(array);return Array.from(array,dec=>("0"+dec.toString(16)).substring(-2)).join("")}async function pkceChallengeFromVerifier(v){v=(new TextEncoder).encode(v);v=await self.crypto.subtle.digest("SHA-256",v);v=Array.from(new Uint8Array(v));return window.btoa(String.fromCharCode.apply(null,v)).replace(/\+/g,
"-").replace(/\//g,"_").replace(/=+$/,"")}async function authorizationCodeRequestInfo({authorization_endpoint,client_id,redirect_uri,requested_scopes}){const state=generateRandomString(),code_verifier=generateRandomString(),code_challenge=await pkceChallengeFromVerifier(code_verifier);client_id=new URLSearchParams({response_type:"code",client_id,state,redirect_uri,code_challenge,code_challenge_method:"S256",...(requested_scopes&&requested_scopes.length&&{scope:requested_scopes.join(" ")})});return{url:`${authorization_endpoint}?${client_id.toString()}`,
state,code_verifier}}async function postMessageToWorker(obj){(await navigator.serviceWorker.ready).active?.postMessage(obj)}Object.defineProperty(exports,"__esModule",{value:!0});exports.authorize=async function(config){postMessageToWorker({type:"storeConfig",config});const {url,state,code_verifier}=await authorizationCodeRequestInfo(config);localStorage.setItem("pkce_state",state);localStorage.setItem("pkce_code_verifier",code_verifier);localStorage.setItem("oauth2_client_id",config.client_id);localStorage.setItem("oauth2_token_endpoint",
config.token_endpoint);localStorage.setItem("oauth2_redirect_uri",config.redirect_uri);window.open(url)};exports.exchangeCodeForAccessToken=function({query_params}){var storedState=localStorage.getItem("pkce_state"),queryParamState=query_params.get("state");if((query_params=query_params.get("code"))&&queryParamState){if(storedState!==queryParamState)throw Error("exchangeCodeForAccessToken mismatch between stored state and query param state");storedState=localStorage.getItem("oauth2_redirect_uri")||
"";queryParamState=localStorage.getItem("oauth2_client_id")||"";var code_verifier=localStorage.getItem("pkce_code_verifier")||"";query_params=new URLSearchParams({grant_type:"authorization_code",code:query_params,redirect_uri:storedState,client_id:queryParamState,code_verifier});storedState=localStorage.getItem("oauth2_token_endpoint")||"";fetch(storedState,{method:"POST",headers:new Headers({"Content-Type":"application/x-www-form-urlencoded"}),body:query_params,credentials:"include"});window.close()}else console.log("No code or state in query params")};
exports.registerOAuth2Worker=async function(){await navigator.serviceWorker.register("/oauth-service-worker.js").then(()=>{console.log("Service worker registered");!navigator.serviceWorker.controller&&location.reload()}).catch(error=>console.log("Service worker registration failed: ",error))}}
//# sourceMappingURL=module$node_modules$$juxt$pass$dist$juxt_pass_cjs_dev.js.map
