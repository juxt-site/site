{"version":3,"sources":["todo/ui/env.cljs"],"mappings":";AAMA,qBAAA,2CAAA,sEAAA,2CAAA,qDAAA,yDAAA,mEAAA,0EAAA,wDAAA,mCAAA,uDAAA,9jBAAKA;AAQL,GAAA,QAAAC,iCAAAC,oCAAAC,wCAAAC;AAAA;AAAA,AAAA,AAASC,oEAGH,0BAAA,2CAAA,4EAAA,IAAA,8EAAA,nOAACC,gPAAaN,7RACd,AAACO;;AAEP,GAAA,QAAAN,iCAAAC,oCAAAC,wCAAAK;AAAA;AAAA,AAAA,AAASC,qBAEH,mDAAA,wDAAA,3GAACC,sFAAWL","names":["todo.ui.env/schema","js/todo","js/todo.ui","js/todo.ui.env","js/todo.ui.env.data-ref","todo.ui.env/data-ref","shadow.grove.db/configure","cljs.core.atom","js/todo.ui.env.rt-ref","todo.ui.env/rt-ref","shadow.grove.prepare"],"sourcesContent":["(ns todo.ui.env\n  (:require\n    [shadow.grove :as sg]\n    [shadow.grove.db :as db]\n    [todo.model :as-alias m]))\n\n(def schema\n  {::m/pet\n   {:type :entity\n    :primary-key ::m/pet-id\n    :attrs {}\n    :joins {}}\n   })\n\n(defonce data-ref\n  (-> {::m/id-seq 0\n       ::m/editing nil}\n      (db/configure schema)\n      (atom)))\n\n(defonce rt-ref\n  (-> {}\n      (sg/prepare data-ref ::db)))\n\n"]}