["^ ","~:output",["^ ","~:js","goog.provide('shadow.arborist.collections');\n\n/**\n* @constructor\n*/\nshadow.arborist.collections.KeyedItem = (function (key,data,managed,moved_QMARK_){\nthis.key = key;\nthis.data = data;\nthis.managed = managed;\nthis.moved_QMARK_ = moved_QMARK_;\n});\n\n(shadow.arborist.collections.KeyedItem.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"key\",\"key\",124488940,null),new cljs.core.Symbol(null,\"data\",\"data\",1407862150,null),new cljs.core.Symbol(null,\"managed\",\"managed\",-1698536450,null),new cljs.core.Symbol(null,\"moved?\",\"moved?\",-1762609207,null)], null);\n}));\n\n(shadow.arborist.collections.KeyedItem.cljs$lang$type = true);\n\n(shadow.arborist.collections.KeyedItem.cljs$lang$ctorStr = \"shadow.arborist.collections/KeyedItem\");\n\n(shadow.arborist.collections.KeyedItem.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.collections/KeyedItem\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.collections/KeyedItem.\n */\nshadow.arborist.collections.__GT_KeyedItem = (function shadow$arborist$collections$__GT_KeyedItem(key,data,managed,moved_QMARK_){\nreturn (new shadow.arborist.collections.KeyedItem(key,data,managed,moved_QMARK_));\n});\n\n\n/**\n* @constructor\n * @implements {shadow.arborist.protocols.IManaged}\n*/\nshadow.arborist.collections.KeyedCollection = (function (env,coll,key_fn,render_fn,items,item_keys,marker_before,marker_after,dom_entered_QMARK_){\nthis.env = env;\nthis.coll = coll;\nthis.key_fn = key_fn;\nthis.render_fn = render_fn;\nthis.items = items;\nthis.item_keys = item_keys;\nthis.marker_before = marker_before;\nthis.marker_after = marker_after;\nthis.dom_entered_QMARK_ = dom_entered_QMARK_;\n});\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$dom_first$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.marker_before;\n}));\n\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$dom_insert$arity$3 = (function (this$,parent,anchor){\nvar self__ = this;\nvar this$__$1 = this;\nparent.insertBefore(self__.marker_before,anchor);\n\nself__.items.forEach((function (item){\nreturn item.managed.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,parent,anchor);\n}));\n\nreturn parent.insertBefore(self__.marker_after,anchor);\n}));\n\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\n(self__.dom_entered_QMARK_ = true);\n\nreturn self__.items.forEach((function (item){\nreturn item.managed.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1(null);\n}));\n}));\n\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2 = (function (this$,next){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (next instanceof shadow.arborist.collections.KeyedCollectionInit);\n}));\n\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2 = (function (this$,next){\nvar self__ = this;\nvar this$__$1 = this;\nvar old_coll_11684 = self__.coll;\nvar new_coll_11685 = next.coll;\nvar dom_parent_11686 = self__.marker_after.parentNode;\nvar rfn_identical_QMARK__11687 = (self__.render_fn === next.render_fn);\nif(dom_parent_11686){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"sync while not in dom?\",cljs.core.PersistentArrayMap.EMPTY);\n}\n\nif(((rfn_identical_QMARK__11687) && ((old_coll_11684 === new_coll_11685)))){\n} else {\n(self__.coll = new_coll_11685);\n\n(self__.key_fn = next.key_fn);\n\n(self__.render_fn = next.render_fn);\n\nvar kfn_11688 = shadow.arborist.common.ifn1_wrap(self__.key_fn);\nvar rfn_11689 = shadow.arborist.common.ifn3_wrap(self__.render_fn);\nvar new_len_11690 = new_coll_11685.cljs$core$ICounted$_count$arity$1(null);\nvar old_items_11691 = self__.items;\nvar new_items_11692 = (new Array(new_len_11690));\nvar new_keys_11693 = cljs.core._persistent_BANG_(cljs.core.reduce_kv((function (keys,idx,val){\nvar key = kfn_11688(val);\nvar item = (new shadow.arborist.collections.KeyedItem(key,val,null,false));\n(new_items_11692[idx] = item);\n\nreturn keys.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null,key,item);\n}),cljs.core._as_transient(cljs.core.PersistentArrayMap.EMPTY),new_coll_11685));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new_keys_11693.cljs$core$ICounted$_count$arity$1(null),new_len_11690)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"collection contains duplicated keys\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"coll\",\"coll\",1647737163),new_coll_11685,new cljs.core.Keyword(null,\"keys\",\"keys\",1068423698),new_keys_11693], null));\n} else {\n}\n\nvar old_items_11697__$1 = old_items_11691.filter((function (item){\nif(cljs.core.contains_QMARK_(new_keys_11693,item.key)){\nreturn true;\n} else {\nitem.managed.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2(null,true);\n\nreturn false;\n}\n}));\nvar anchor_11698 = self__.marker_after;\nvar idx_11699 = (new_len_11690 - (1));\nvar old_idx_11700 = (old_items_11697__$1.length - (1));\nwhile(true){\nif((idx_11699 < (0))){\n} else {\nvar new_item_11702 = (new_items_11692[idx_11699]);\nvar old_item_11703 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(self__.item_keys,new_item_11702.key);\nif(cljs.core.not(old_item_11703)){\nvar rendered_11704 = rfn_11689(new_item_11702.data,idx_11699,new_item_11702.key);\nvar managed_11705 = shadow.arborist.protocols.as_managed(rendered_11704,self__.env);\nmanaged_11705.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n\nif(self__.dom_entered_QMARK_){\nmanaged_11705.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1(null);\n} else {\n}\n\n(new_item_11702.managed = managed_11705);\n\nvar G__11706 = managed_11705.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11707 = (idx_11699 - (1));\nvar G__11708 = old_idx_11700;\nanchor_11698 = G__11706;\nidx_11699 = G__11707;\nold_idx_11700 = G__11708;\ncontinue;\n} else {\nif((old_item_11703 === (old_items_11697__$1[old_idx_11700]))){\nvar managed_11709 = old_item_11703.managed;\nif(((rfn_identical_QMARK__11687) && ((old_item_11703.data === new_item_11702.data)))){\n(new_item_11702.managed = managed_11709);\n\nif(old_item_11703.moved_QMARK_){\nmanaged_11709.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n} else {\n}\n\nvar G__11710 = managed_11709.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11711 = (idx_11699 - (1));\nvar G__11712 = (old_idx_11700 - (1));\nanchor_11698 = G__11710;\nidx_11699 = G__11711;\nold_idx_11700 = G__11712;\ncontinue;\n} else {\nvar rendered_11713 = rfn_11689(new_item_11702.data,idx_11699,new_item_11702.key);\nif(managed_11709.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2(null,rendered_11713)){\nmanaged_11709.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2(null,rendered_11713);\n\n(new_item_11702.managed = managed_11709);\n\nif(old_item_11703.moved_QMARK_){\nmanaged_11709.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n} else {\n}\n\nvar G__11716 = managed_11709.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11717 = (idx_11699 - (1));\nvar G__11718 = (old_idx_11700 - (1));\nanchor_11698 = G__11716;\nidx_11699 = G__11717;\nold_idx_11700 = G__11718;\ncontinue;\n} else {\nvar new_managed_11719 = shadow.arborist.protocols.as_managed(rendered_11713,self__.env);\nnew_managed_11719.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n\nif(self__.dom_entered_QMARK_){\nnew_managed_11719.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1(null);\n} else {\n}\n\nmanaged_11709.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2(null,true);\n\n(new_item_11702.managed = new_managed_11719);\n\nvar G__11721 = new_managed_11719.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11722 = (idx_11699 - (1));\nvar G__11723 = (old_idx_11700 - (1));\nanchor_11698 = G__11721;\nidx_11699 = G__11722;\nold_idx_11700 = G__11723;\ncontinue;\n}\n}\n} else {\nvar seek_idx_11724 = old_items_11697__$1.indexOf(old_item_11703);\nvar old_item_11725__$1 = (old_items_11697__$1[seek_idx_11724]);\nvar managed_11726 = old_item_11725__$1.managed;\nvar item_at_idx_11727 = (old_items_11697__$1[old_idx_11700]);\n(item_at_idx_11727.moved_QMARK_ = true);\n\n(old_items_11697__$1[seek_idx_11724] = item_at_idx_11727);\n\n(old_items_11697__$1[old_idx_11700] = old_item_11725__$1);\n\nif(((rfn_identical_QMARK__11687) && ((new_item_11702.data === old_item_11725__$1.data)))){\n(new_item_11702.managed = managed_11726);\n\nmanaged_11726.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n\nvar G__11728 = managed_11726.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11729 = (idx_11699 - (1));\nvar G__11730 = (old_idx_11700 - (1));\nanchor_11698 = G__11728;\nidx_11699 = G__11729;\nold_idx_11700 = G__11730;\ncontinue;\n} else {\nvar rendered_11731 = rfn_11689(new_item_11702.data,idx_11699,new_item_11702.key);\nif(managed_11726.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2(null,rendered_11731)){\n(new_item_11702.managed = managed_11726);\n\nmanaged_11726.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2(null,rendered_11731);\n\nmanaged_11726.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n\nvar G__11733 = managed_11726.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11734 = (idx_11699 - (1));\nvar G__11735 = (old_idx_11700 - (1));\nanchor_11698 = G__11733;\nidx_11699 = G__11734;\nold_idx_11700 = G__11735;\ncontinue;\n} else {\nvar new_managed_11736 = shadow.arborist.protocols.as_managed(rendered_11731,self__.env);\n(new_item_11702.managed = new_managed_11736);\n\nnew_managed_11736.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,dom_parent_11686,anchor_11698);\n\nif(self__.dom_entered_QMARK_){\nnew_managed_11736.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1(null);\n} else {\n}\n\nmanaged_11726.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2(null,true);\n\nvar G__11737 = new_managed_11736.shadow$arborist$protocols$IManaged$dom_first$arity$1(null);\nvar G__11738 = (idx_11699 - (1));\nvar G__11739 = (old_idx_11700 - (1));\nanchor_11698 = G__11737;\nidx_11699 = G__11738;\nold_idx_11700 = G__11739;\ncontinue;\n}\n}\n\n}\n}\n}\nbreak;\n}\n\n(self__.item_keys = new_keys_11693);\n\n(self__.items = new_items_11692);\n}\n\nreturn new cljs.core.Keyword(null,\"synced\",\"synced\",-1518561120);\n}));\n\n(shadow.arborist.collections.KeyedCollection.prototype.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2 = (function (this$,dom_remove_QMARK_){\nvar self__ = this;\nvar this$__$1 = this;\nif(dom_remove_QMARK_){\nvar G__11600_11740 = document.createRange();\nG__11600_11740.setStartBefore(self__.marker_before);\n\nG__11600_11740.setEndAfter(self__.marker_after);\n\nG__11600_11740.deleteContents();\n\n} else {\n}\n\nreturn self__.items.forEach((function (item){\nreturn item.managed.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2(null,false);\n}));\n}));\n\n(shadow.arborist.collections.KeyedCollection.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"env\",\"env\",-175281708,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"coll\",\"coll\",-1006698606,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"key-fn\",\"key-fn\",1004377048,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"function\",\"function\",-486723946,null),new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"render-fn\",\"render-fn\",2039328045,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"function\",\"function\",-486723946,null),new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"items\",\"items\",-1622480831,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"item-keys\",\"item-keys\",1023598268,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),new cljs.core.Symbol(null,\"marker-before\",\"marker-before\",-198173470,null),new cljs.core.Symbol(null,\"marker-after\",\"marker-after\",-602144151,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"dom-entered?\",\"dom-entered?\",962657078,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null))], null);\n}));\n\n(shadow.arborist.collections.KeyedCollection.cljs$lang$type = true);\n\n(shadow.arborist.collections.KeyedCollection.cljs$lang$ctorStr = \"shadow.arborist.collections/KeyedCollection\");\n\n(shadow.arborist.collections.KeyedCollection.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.collections/KeyedCollection\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.collections/KeyedCollection.\n */\nshadow.arborist.collections.__GT_KeyedCollection = (function shadow$arborist$collections$__GT_KeyedCollection(env,coll,key_fn,render_fn,items,item_keys,marker_before,marker_after,dom_entered_QMARK_){\nreturn (new shadow.arborist.collections.KeyedCollection(env,coll,key_fn,render_fn,items,item_keys,marker_before,marker_after,dom_entered_QMARK_));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {shadow.arborist.protocols.IConstruct}\n*/\nshadow.arborist.collections.KeyedCollectionInit = (function (coll,key_fn,render_fn){\nthis.coll = coll;\nthis.key_fn = key_fn;\nthis.render_fn = render_fn;\nthis.cljs$lang$protocol_mask$partition0$ = 2097152;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(shadow.arborist.collections.KeyedCollectionInit.prototype.shadow$arborist$protocols$IConstruct$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.arborist.collections.KeyedCollectionInit.prototype.shadow$arborist$protocols$IConstruct$as_managed$arity$2 = (function (this$,env){\nvar self__ = this;\nvar this$__$1 = this;\nvar len = cljs.core.count(self__.coll);\nvar marker_before = shadow.arborist.common.dom_marker.cljs$core$IFn$_invoke$arity$2(env,\"coll-start\");\nvar marker_after = shadow.arborist.common.dom_marker.cljs$core$IFn$_invoke$arity$2(env,\"coll-end\");\nvar kfn = shadow.arborist.common.ifn1_wrap(self__.key_fn);\nvar rfn = shadow.arborist.common.ifn3_wrap(self__.render_fn);\nvar items = (new Array(len));\nvar keys = cljs.core.persistent_BANG_(cljs.core.reduce_kv((function (keys,idx,val){\nvar key = (kfn.cljs$core$IFn$_invoke$arity$1 ? kfn.cljs$core$IFn$_invoke$arity$1(val) : kfn.call(null,val));\nvar rendered = (rfn.cljs$core$IFn$_invoke$arity$3 ? rfn.cljs$core$IFn$_invoke$arity$3(val,idx,key) : rfn.call(null,val,idx,key));\nvar managed = shadow.arborist.protocols.as_managed(rendered,env);\nvar item = (new shadow.arborist.collections.KeyedItem(key,val,managed,false));\n(items[idx] = item);\n\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(keys,key,item);\n}),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),self__.coll));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(keys),len)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"collection contains duplicated keys\",cljs.core.PersistentArrayMap.EMPTY);\n} else {\n}\n\nreturn (new shadow.arborist.collections.KeyedCollection(env,self__.coll,self__.key_fn,self__.render_fn,items,keys,marker_before,marker_after,false));\n}));\n\n(shadow.arborist.collections.KeyedCollectionInit.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (((other instanceof shadow.arborist.collections.KeyedCollectionInit)) && (((cljs.core.keyword_identical_QMARK_(self__.key_fn,other.key_fn)) && ((((self__.render_fn === other.render_fn)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.coll,other.coll)))))));\n}));\n\n(shadow.arborist.collections.KeyedCollectionInit.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"coll\",\"coll\",-1006698606,null),new cljs.core.Symbol(null,\"key-fn\",\"key-fn\",1004377048,null),new cljs.core.Symbol(null,\"render-fn\",\"render-fn\",2039328045,null)], null);\n}));\n\n(shadow.arborist.collections.KeyedCollectionInit.cljs$lang$type = true);\n\n(shadow.arborist.collections.KeyedCollectionInit.cljs$lang$ctorStr = \"shadow.arborist.collections/KeyedCollectionInit\");\n\n(shadow.arborist.collections.KeyedCollectionInit.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.collections/KeyedCollectionInit\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.collections/KeyedCollectionInit.\n */\nshadow.arborist.collections.__GT_KeyedCollectionInit = (function shadow$arborist$collections$__GT_KeyedCollectionInit(coll,key_fn,render_fn){\nreturn (new shadow.arborist.collections.KeyedCollectionInit(coll,key_fn,render_fn));\n});\n\nshadow.arborist.collections.keyed_seq = (function shadow$arborist$collections$keyed_seq(coll,key_fn,render_fn){\nif(cljs.core.sequential_QMARK_(coll)){\n} else {\nthrow (new Error(\"Assert failed: (sequential? coll)\"));\n}\n\nif(cljs.core.ifn_QMARK_(key_fn)){\n} else {\nthrow (new Error(\"Assert failed: (ifn? key-fn)\"));\n}\n\nif(cljs.core.ifn_QMARK_(render_fn)){\n} else {\nthrow (new Error(\"Assert failed: (ifn? render-fn)\"));\n}\n\nvar coll__$1 = cljs.core.vec(coll);\nif((cljs.core.count(coll__$1) === (0))){\nreturn null;\n} else {\nreturn (new shadow.arborist.collections.KeyedCollectionInit(coll__$1,key_fn,render_fn));\n}\n});\n\n/**\n* @constructor\n*/\nshadow.arborist.collections.SimpleItem = (function (data,managed){\nthis.data = data;\nthis.managed = managed;\n});\n\n(shadow.arborist.collections.SimpleItem.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"data\",\"data\",1407862150,null),new cljs.core.Symbol(null,\"managed\",\"managed\",-1698536450,null)], null);\n}));\n\n(shadow.arborist.collections.SimpleItem.cljs$lang$type = true);\n\n(shadow.arborist.collections.SimpleItem.cljs$lang$ctorStr = \"shadow.arborist.collections/SimpleItem\");\n\n(shadow.arborist.collections.SimpleItem.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.collections/SimpleItem\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.collections/SimpleItem.\n */\nshadow.arborist.collections.__GT_SimpleItem = (function shadow$arborist$collections$__GT_SimpleItem(data,managed){\nreturn (new shadow.arborist.collections.SimpleItem(data,managed));\n});\n\n\n/**\n* @constructor\n * @implements {shadow.arborist.protocols.IManaged}\n*/\nshadow.arborist.collections.SimpleCollection = (function (env,coll,render_fn,items,marker_before,marker_after,dom_entered_QMARK_){\nthis.env = env;\nthis.coll = coll;\nthis.render_fn = render_fn;\nthis.items = items;\nthis.marker_before = marker_before;\nthis.marker_after = marker_after;\nthis.dom_entered_QMARK_ = dom_entered_QMARK_;\n});\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$dom_first$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.marker_before;\n}));\n\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$dom_insert$arity$3 = (function (this$,parent,anchor){\nvar self__ = this;\nvar this$__$1 = this;\nparent.insertBefore(self__.marker_before,anchor);\n\nself__.items.forEach((function (item){\nreturn item.managed.shadow$arborist$protocols$IManaged$dom_insert$arity$3(null,parent,anchor);\n}));\n\nreturn parent.insertBefore(self__.marker_after,anchor);\n}));\n\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\n(self__.dom_entered_QMARK_ = true);\n\nreturn self__.items.forEach((function (item){\nreturn item.managed.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1(null);\n}));\n}));\n\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2 = (function (this$,next){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (next instanceof shadow.arborist.collections.SimpleCollectionInit);\n}));\n\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2 = (function (this$,next){\nvar self__ = this;\nvar this$__$1 = this;\nvar rfn_identical_QMARK__11747 = (self__.render_fn === next.render_fn);\nvar old_coll_11748 = self__.coll;\nvar new_coll_11749 = next.coll;\nif(((rfn_identical_QMARK__11747) && ((old_coll_11748 === new_coll_11749)))){\n} else {\nvar dom_parent_11750 = self__.marker_after.parentNode;\nvar oc_11751 = old_coll_11748.cljs$core$ICounted$_count$arity$1(null);\nvar nc_11752 = new_coll_11749.cljs$core$ICounted$_count$arity$1(null);\nvar max_idx_11753 = Math.min(oc_11751,nc_11752);\nif(cljs.core.truth_(dom_parent_11750)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"sync while not in dom?\",cljs.core.PersistentArrayMap.EMPTY);\n}\n\n(self__.coll = new_coll_11749);\n\n(self__.render_fn = next.render_fn);\n\nvar rfn_11755 = shadow.arborist.common.ifn2_wrap(self__.render_fn);\nvar n__5636__auto___11756 = max_idx_11753;\nvar idx_11757 = (0);\nwhile(true){\nif((idx_11757 < n__5636__auto___11756)){\nvar item_11758 = (self__.items[idx_11757]);\nvar managed_11759 = item_11758.managed;\nvar new_data_11760 = new_coll_11749.cljs$core$IIndexed$_nth$arity$2(null,idx_11757);\nif(((rfn_identical_QMARK__11747) && ((new_data_11760 === item_11758.data)))){\n} else {\nvar new_rendered_11761 = rfn_11755(new_data_11760,idx_11757);\n(item_11758.data = new_data_11760);\n\nif(managed_11759.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2(null,new_rendered_11761)){\nmanaged_11759.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2(null,new_rendered_11761);\n} else {\nvar new_managed_11762 = shadow.arborist.common.replace_managed(self__.env,managed_11759,new_rendered_11761);\nif(self__.dom_entered_QMARK_){\nshadow.arborist.protocols.dom_entered_BANG_(new_managed_11762);\n} else {\n}\n\n(item_11758.managed = new_managed_11762);\n}\n}\n\nvar G__11764 = (idx_11757 + (1));\nidx_11757 = G__11764;\ncontinue;\n} else {\n}\nbreak;\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(oc_11751,nc_11752)){\n} else {\nif((oc_11751 > nc_11752)){\nvar n__5636__auto___11766 = (oc_11751 - nc_11752);\nvar idx_11767 = (0);\nwhile(true){\nif((idx_11767 < n__5636__auto___11766)){\nvar idx_11768__$1 = (max_idx_11753 + idx_11767);\nvar item_11769 = (self__.items[idx_11768__$1]);\nitem_11769.managed.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2(null,true);\n\nvar G__11770 = (idx_11767 + (1));\nidx_11767 = G__11770;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(self__.items.length = max_idx_11753);\n} else {\nif((oc_11751 < nc_11752)){\nvar n__5636__auto___11771 = (nc_11752 - oc_11751);\nvar idx_11772 = (0);\nwhile(true){\nif((idx_11772 < n__5636__auto___11771)){\nvar idx_11773__$1 = (max_idx_11753 + idx_11772);\nvar data_11774 = new_coll_11749.cljs$core$IIndexed$_nth$arity$2(null,idx_11773__$1);\nvar rendered_11775 = rfn_11755(data_11774,idx_11773__$1);\nvar managed_11776 = shadow.arborist.protocols.as_managed(rendered_11775,self__.env);\nself__.items.push((new shadow.arborist.collections.SimpleItem(data_11774,managed_11776)));\n\nshadow.arborist.protocols.dom_insert(managed_11776,dom_parent_11750,self__.marker_after);\n\nif(self__.dom_entered_QMARK_){\nshadow.arborist.protocols.dom_entered_BANG_(managed_11776);\n} else {\n}\n\nvar G__11778 = (idx_11772 + (1));\nidx_11772 = G__11778;\ncontinue;\n} else {\n}\nbreak;\n}\n} else {\n}\n}\n}\n}\n\nreturn new cljs.core.Keyword(null,\"synced\",\"synced\",-1518561120);\n}));\n\n(shadow.arborist.collections.SimpleCollection.prototype.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2 = (function (this$,dom_remove_QMARK_){\nvar self__ = this;\nvar this$__$1 = this;\nif(dom_remove_QMARK_){\nvar G__11651_11779 = document.createRange();\nG__11651_11779.setStartBefore(self__.marker_before);\n\nG__11651_11779.setEndAfter(self__.marker_after);\n\nG__11651_11779.deleteContents();\n\n} else {\n}\n\nreturn self__.items.forEach((function (item){\nreturn item.managed.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2(null,false);\n}));\n}));\n\n(shadow.arborist.collections.SimpleCollection.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"env\",\"env\",-175281708,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"coll\",\"coll\",-1006698606,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"render-fn\",\"render-fn\",2039328045,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"function\",\"function\",-486723946,null),new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"items\",\"items\",-1622480831,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"array\",\"array\",-440182315,null),new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),new cljs.core.Symbol(null,\"marker-before\",\"marker-before\",-198173470,null),new cljs.core.Symbol(null,\"marker-after\",\"marker-after\",-602144151,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"dom-entered?\",\"dom-entered?\",962657078,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null))], null);\n}));\n\n(shadow.arborist.collections.SimpleCollection.cljs$lang$type = true);\n\n(shadow.arborist.collections.SimpleCollection.cljs$lang$ctorStr = \"shadow.arborist.collections/SimpleCollection\");\n\n(shadow.arborist.collections.SimpleCollection.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.collections/SimpleCollection\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.collections/SimpleCollection.\n */\nshadow.arborist.collections.__GT_SimpleCollection = (function shadow$arborist$collections$__GT_SimpleCollection(env,coll,render_fn,items,marker_before,marker_after,dom_entered_QMARK_){\nreturn (new shadow.arborist.collections.SimpleCollection(env,coll,render_fn,items,marker_before,marker_after,dom_entered_QMARK_));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {shadow.arborist.protocols.IConstruct}\n*/\nshadow.arborist.collections.SimpleCollectionInit = (function (coll,render_fn){\nthis.coll = coll;\nthis.render_fn = render_fn;\nthis.cljs$lang$protocol_mask$partition0$ = 2097152;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(shadow.arborist.collections.SimpleCollectionInit.prototype.shadow$arborist$protocols$IConstruct$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.arborist.collections.SimpleCollectionInit.prototype.shadow$arborist$protocols$IConstruct$as_managed$arity$2 = (function (this$,env){\nvar self__ = this;\nvar this$__$1 = this;\nvar marker_before = shadow.arborist.common.dom_marker.cljs$core$IFn$_invoke$arity$2(env,\"coll-start\");\nvar marker_after = shadow.arborist.common.dom_marker.cljs$core$IFn$_invoke$arity$2(env,\"coll-end\");\nvar arr = (new Array(cljs.core.count(self__.coll)));\nvar rfn = shadow.arborist.common.ifn2_wrap(self__.render_fn);\ncljs.core.reduce_kv((function (_,idx,data){\nreturn (arr[idx] = (new shadow.arborist.collections.SimpleItem(data,shadow.arborist.protocols.as_managed((rfn.cljs$core$IFn$_invoke$arity$2 ? rfn.cljs$core$IFn$_invoke$arity$2(data,idx) : rfn.call(null,data,idx)),env))));\n}),null,self__.coll);\n\nreturn (new shadow.arborist.collections.SimpleCollection(env,self__.coll,self__.render_fn,arr,marker_before,marker_after,false));\n}));\n\n(shadow.arborist.collections.SimpleCollectionInit.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (((other instanceof shadow.arborist.collections.SimpleCollectionInit)) && ((((self__.render_fn === other.render_fn)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.coll,other.coll)))));\n}));\n\n(shadow.arborist.collections.SimpleCollectionInit.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"coll\",\"coll\",-1006698606,null),new cljs.core.Symbol(null,\"render-fn\",\"render-fn\",2039328045,null)], null);\n}));\n\n(shadow.arborist.collections.SimpleCollectionInit.cljs$lang$type = true);\n\n(shadow.arborist.collections.SimpleCollectionInit.cljs$lang$ctorStr = \"shadow.arborist.collections/SimpleCollectionInit\");\n\n(shadow.arborist.collections.SimpleCollectionInit.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.collections/SimpleCollectionInit\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.collections/SimpleCollectionInit.\n */\nshadow.arborist.collections.__GT_SimpleCollectionInit = (function shadow$arborist$collections$__GT_SimpleCollectionInit(coll,render_fn){\nreturn (new shadow.arborist.collections.SimpleCollectionInit(coll,render_fn));\n});\n\nshadow.arborist.collections.simple_seq = (function shadow$arborist$collections$simple_seq(coll,render_fn){\nif(cljs.core.sequential_QMARK_(coll)){\n} else {\nthrow (new Error(\"Assert failed: (sequential? coll)\"));\n}\n\nif(cljs.core.ifn_QMARK_(render_fn)){\n} else {\nthrow (new Error(\"Assert failed: (ifn? render-fn)\"));\n}\n\nvar coll__$1 = cljs.core.vec(coll);\nif((cljs.core.count(coll__$1) === (0))){\nreturn null;\n} else {\nreturn (new shadow.arborist.collections.SimpleCollectionInit(coll__$1,render_fn));\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","shadow/arborist/collections.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.arborist.collections","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$shadow.arborist.protocols","^L","~$p","^L","~$shadow.arborist.common","^M","~$common","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^F",["^V",["^R",["^L","~:as","~$p"],["^M","^X","^N"]]]]],"~:flags",["^ ","^R",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^L","^M"]],"^I","^F","~:resource-id",["~:shadow.build.classpath/resource","shadow/arborist/collections.cljs"],"~:compiled-at",1693994117773,"^G",["^ ","^L","^L","~$p","^L","^M","^M","^N","^M","^O","^O","^P","^P"],"~:resource-name","shadow/arborist/collections.cljs","~:warnings",[],"~:source","(ns shadow.arborist.collections\n  (:require\n    [shadow.arborist.protocols :as p]\n    [shadow.arborist.common :as common]))\n\n(declare KeyedCollectionInit)\n\n(deftype KeyedItem [key data managed moved?])\n\n(deftype KeyedCollection\n  [env\n   ^:mutable coll\n   ^:mutable ^function key-fn\n   ^:mutable ^function render-fn\n   ^:mutable items ;; array of KeyedItem instances\n   ^:mutable item-keys ;; map of key -> items index\n   marker-before\n   marker-after\n   ^boolean ^:mutable dom-entered?]\n\n  p/IManaged\n  (dom-first [this] marker-before)\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent marker-before anchor)\n    (.forEach items\n      (fn [^KeyedItem item]\n        (p/dom-insert ^not-native (.-managed item) parent anchor)))\n    (.insertBefore parent marker-after anchor))\n\n  (dom-entered! [this]\n    (set! dom-entered? true)\n    (.forEach items\n      (fn [^KeyedItem item]\n        (p/dom-entered! ^not-native (.-managed item)))))\n\n  (supports? [this next]\n    (instance? KeyedCollectionInit next))\n\n  (dom-sync! [this ^KeyedCollectionInit next]\n    (let [^not-native old-coll coll\n          ^not-native new-coll (.-coll next)\n          dom-parent (.-parentNode marker-after)\n          rfn-identical? (identical? render-fn (.-render-fn next))]\n\n      (when-not ^boolean dom-parent\n        (throw (ex-info \"sync while not in dom?\" {})))\n\n      (when-not (and rfn-identical? (identical? old-coll new-coll))\n\n        (set! coll new-coll)\n        (set! key-fn (.-key-fn next))\n        (set! render-fn (.-render-fn next))\n\n        (let [^function kfn (common/ifn1-wrap key-fn)\n              ^function rfn (common/ifn3-wrap render-fn)\n\n              new-len (-count new-coll)\n\n              ;; array of KeyedItem with manage instances\n              old-items items\n              ;; array of KeyedItem but managed will be set later\n              new-items (js/Array. new-len)\n\n              ;; traverse new coll once to build key map and render items\n              ^not-native new-keys\n              (-persistent!\n                (reduce-kv\n                  (fn [^not-native keys idx val]\n                    (let [key (kfn val)\n                          item (KeyedItem. key val nil false)]\n\n                      (aset new-items idx item)\n                      (-assoc! keys key item)))\n                  (-as-transient {})\n                  new-coll))]\n\n          (when (not= (-count new-keys) new-len)\n            (throw (ex-info \"collection contains duplicated keys\" {:coll new-coll :keys new-keys})))\n\n          (let [old-items\n                (.filter old-items\n                  (fn [^KeyedItem item]\n                    (if (contains? new-keys (.-key item))\n                      true\n                      (do (p/destroy! ^not-native (.-managed item) true)\n                          false))))]\n\n            ;; old-items now matches what is in the DOM and only contains items still present in new coll\n\n            ;; this can never be more items than the new coll\n            ;; but it might be less in cases where items were removed\n\n            ;; now going backwards over the new collection and apply render results to items\n            ;; reverse order because of only being able to insert before anchor\n\n            ;; will create new items while traversing\n            ;; will move items when required\n\n            (loop [anchor marker-after\n                   idx (dec new-len)\n                   old-idx (dec (alength old-items))]\n\n              (when-not (neg? idx)\n                (let [^KeyedItem new-item (aget new-items idx)\n                      ^KeyedItem old-item (get item-keys (.-key new-item))]\n\n                  (cond\n                    ;; item does not exist in old coll, just create and insert\n                    (not old-item)\n                    (let [rendered (rfn (.-data new-item) idx (.-key new-item))\n                          ^not-native managed (p/as-managed rendered env)]\n\n                      (p/dom-insert managed dom-parent anchor)\n\n                      ;; FIXME: call dom-entered! after syncing is done, item might not be in final position yet\n                      ;; other stuff may be inserted before it\n                      (when dom-entered?\n                        (p/dom-entered! managed))\n\n                      (set! new-item -managed managed)\n\n                      (recur (p/dom-first managed) (dec idx) old-idx))\n\n                    ;; item in same position, render update, move only when item was previously moved\n                    (identical? old-item (aget old-items old-idx))\n                    (let [^not-native managed (.-managed old-item)]\n                      ;; if the render-fn and data are identical we can skip over rendering them\n                      ;; since they rfn is supposed to be pure.\n                      ;; only checking identical? references since = may end up doing too much work\n                      ;; that the component/fragment will check again later anyways so we want to avoid\n                      ;; duplicating the work. skipping the rendering may save a couple allocation and\n                      ;; checks so this is worth doing when it can.\n\n                      ;; render-fn is never identical when using (render-seq coll key-fn (fn [data] ...))\n                      ;; but it is when using (render-seq coll key-fn component) or other function refs\n                      ;; that don't close over other data\n\n                      (if (and rfn-identical? (identical? (.-data old-item) (.-data new-item)))\n                        (do (set! new-item -managed managed)\n\n                            (when ^boolean (.-moved? old-item)\n                              ;; don't need to do this I think, never using old-item again\n                              ;; (set! old-item -moved? false)\n                              (p/dom-insert managed dom-parent anchor))\n\n                            (recur (p/dom-first managed) (dec idx) (dec old-idx)))\n\n                        ;; need to render\n                        (let [rendered (rfn (.-data new-item) idx (.-key new-item))]\n                          (if (p/supports? managed rendered)\n                            ;; update in place if supported\n                            (do (p/dom-sync! managed rendered)\n                                (set! new-item -managed managed)\n\n                                ;; item was previously moved, move in DOM now\n                                (when ^boolean (.-moved? old-item)\n                                  ;; don't need to do this I think, never using old-item again\n                                  ;; (set! old-item -moved? false)\n                                  (p/dom-insert managed dom-parent anchor))\n\n                                (recur (p/dom-first managed) (dec idx) (dec old-idx)))\n\n                            ;; not updatable, swap.\n                            ;; unlikely given that key was the same, result should be the same.\n                            ;; still possible though\n                            (let [^not-native new-managed (p/as-managed rendered env)]\n                              (p/dom-insert new-managed dom-parent anchor)\n                              (when dom-entered?\n                                (p/dom-entered! new-managed))\n                              (p/destroy! managed true)\n                              (set! new-item -managed new-managed)\n                              (recur (p/dom-first new-managed) (dec idx) (dec old-idx))\n                              )))))\n\n                    ;; item not in proper position, find it and move it here\n                    ;; FIXME: this starts looking at the front of the collection\n                    ;; this might be a performance drain when collection is shuffled too much\n                    :else\n                    (let [seek-idx (.indexOf old-items old-item)\n                          ^KeyedItem old-item (aget old-items seek-idx)\n                          ^not-native managed (.-managed old-item)\n\n                          ;; current tail item\n                          ^KeyedItem item-at-idx (aget old-items old-idx)]\n\n                      (set! item-at-idx -moved? true)\n                      (aset old-items seek-idx item-at-idx)\n                      (aset old-items old-idx old-item)\n\n                      ;; again, may skip rendering if fully identical\n                      ;; still need to move it though\n                      (if (and rfn-identical? (identical? (.-data new-item) (.-data old-item)))\n                        (do (set! new-item -managed managed)\n                            (p/dom-insert managed dom-parent anchor)\n                            (recur (p/dom-first managed) (dec idx) (dec old-idx)))\n\n                        ;; can't skip rendering\n                        (let [rendered (rfn (.-data new-item) idx (.-key new-item))]\n                          (if (p/supports? managed rendered)\n                            ;; update in place if supported\n                            (do (set! new-item -managed managed)\n                                (p/dom-sync! managed rendered)\n                                (p/dom-insert managed dom-parent anchor)\n                                (recur (p/dom-first managed) (dec idx) (dec old-idx)))\n\n                            ;; not updatable, swap.\n                            ;; unlikely given that key was the same, result should be the same.\n                            ;; still possible though\n                            (let [^not-native new-managed (p/as-managed rendered env)]\n                              (set! new-item -managed new-managed)\n                              (p/dom-insert new-managed dom-parent anchor)\n                              (when dom-entered?\n                                (p/dom-entered! new-managed))\n                              (p/destroy! managed true)\n                              (recur (p/dom-first new-managed) (dec idx) (dec old-idx))\n                              ))))))))))\n\n          (set! item-keys new-keys)\n          (set! items new-items))))\n    :synced)\n\n  (destroy! [this ^boolean dom-remove?]\n    (when dom-remove?\n      (doto (js/document.createRange)\n        (.setStartBefore marker-before)\n        (.setEndAfter marker-after)\n        (.deleteContents)))\n\n    (.forEach items\n      (fn [item]\n        (p/destroy! ^not-native (.-managed item) false)))))\n\n(deftype KeyedCollectionInit [coll key-fn render-fn]\n  p/IConstruct\n  (as-managed [this env]\n    (let [len (count coll)\n          marker-before (common/dom-marker env \"coll-start\")\n          marker-after (common/dom-marker env \"coll-end\")\n\n          kfn (common/ifn1-wrap key-fn)\n          rfn (common/ifn3-wrap render-fn)\n\n          items (js/Array. len)\n\n          ;; {<key> <item>}, same instance as in array\n          keys\n          (persistent!\n            (reduce-kv\n              (fn [keys idx val]\n                (let [key (kfn val)\n                      rendered (rfn val idx key)\n                      managed (p/as-managed rendered env)\n                      item (KeyedItem. key val managed false)]\n\n                  (aset items idx item)\n                  (assoc! keys key item)))\n              (transient {})\n              coll))]\n\n      (when (not= (count keys) len)\n        (throw (ex-info \"collection contains duplicated keys\" {})))\n\n      (KeyedCollection.\n        env\n        coll\n        key-fn\n        render-fn\n        items\n        keys\n        marker-before\n        marker-after\n        false)))\n\n  IEquiv\n  (-equiv [this ^KeyedCollectionInit other]\n    (and (instance? KeyedCollectionInit other)\n         ;; could be a keyword, can't use identical?\n         (keyword-identical? key-fn (.-key-fn other))\n         ;; FIXME: this makes it never equal if fn is created in :render fn\n         (identical? render-fn (.-render-fn other))\n         ;; compare coll last since its pointless if the others changed and typically more expensive to compare\n         (= coll (.-coll other)))))\n\n(defn keyed-seq [coll key-fn render-fn]\n  {:pre [(sequential? coll)\n         (ifn? key-fn)\n         (ifn? render-fn)]}\n\n  ;; we always need compatible collections, it should already be a vector in most cases\n  ;; it must not allow lazy sequences since the sequence may not be used immediately\n  ;; some item may suspend and whatever the lazy seq did will happen in totally different phases\n  ;; cannot guarantee that some other data it previously may have relied upon is still valid\n  (let [coll (vec coll)]\n    (if (zero? (count coll))\n      nil ;; can skip much unneeded work for empty colls\n      (KeyedCollectionInit. coll key-fn render-fn))))\n\n(declare SimpleCollectionInit)\n\n(deftype SimpleItem [data managed])\n\n(deftype SimpleCollection\n  [env\n   ^:mutable coll\n   ^:mutable ^function render-fn\n   ^:mutable ^array items\n   marker-before\n   marker-after\n   ^boolean ^:mutable dom-entered?]\n\n  p/IManaged\n  (dom-first [this] marker-before)\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent marker-before anchor)\n    (.forEach items\n      (fn [^SimpleItem item]\n        (p/dom-insert ^not-native (.-managed item) parent anchor)))\n    (.insertBefore parent marker-after anchor))\n\n  (dom-entered! [this]\n    (set! dom-entered? true)\n    (.forEach items\n      (fn [^SimpleItem item]\n        (p/dom-entered! ^not-native (.-managed item)))))\n\n  (supports? [this next]\n    (instance? SimpleCollectionInit next))\n\n  (dom-sync! [this ^SimpleCollectionInit next]\n    (let [rfn-identical? (identical? render-fn (.-render-fn next))\n\n          ^not-native old-coll coll\n          ^not-native new-coll (.-coll next)]\n\n      ;; only checking identical since we want to avoid deep comparisons for items\n      ;; since the rendered results will likely do that again\n      (when-not (and rfn-identical? (identical? old-coll new-coll))\n\n        (let [dom-parent (.-parentNode marker-after)\n\n              oc (-count old-coll)\n              nc (-count new-coll)\n\n              max-idx (js/Math.min oc nc)]\n\n          (when-not dom-parent\n            (throw (ex-info \"sync while not in dom?\" {})))\n\n          (set! coll new-coll)\n          (set! render-fn (.-render-fn next))\n\n          (let [^function rfn (common/ifn2-wrap render-fn)]\n\n            (dotimes [idx max-idx]\n              (let [^SimpleItem item (aget items idx)\n                    ^not-native managed (.-managed item)\n                    new-data (-nth new-coll idx)]\n\n                (when-not (and rfn-identical? (identical? new-data (.-data item)))\n\n                  (let [new-rendered (rfn new-data idx)]\n                    (set! item -data new-data)\n\n                    (if (p/supports? managed new-rendered)\n                      (p/dom-sync! managed new-rendered)\n                      (let [new-managed (common/replace-managed env managed new-rendered)]\n                        (when dom-entered?\n                          (p/dom-entered! new-managed))\n\n                        (set! item -managed new-managed)))))))\n\n            (cond\n              (= oc nc)\n              :done\n\n              ;; old had more items, remove tail\n              ;; FIXME: might be faster to remove in last one first? less node re-ordering\n              (> oc nc)\n              (do (dotimes [idx (- oc nc)]\n                    (let [idx (+ max-idx idx)\n                          ^SimpleItem item (aget items idx)]\n                      (p/destroy! ^not-native (.-managed item) true)))\n                  (set! (.-length items) max-idx))\n\n              ;; old had fewer items, append at end\n              (< oc nc)\n              (dotimes [idx (- nc oc)]\n                (let [idx (+ max-idx idx)\n                      data (-nth new-coll idx)\n                      rendered (rfn data idx)\n                      managed (p/as-managed rendered env)]\n                  (.push items (SimpleItem. data managed))\n                  (p/dom-insert managed dom-parent marker-after)\n                  (when dom-entered?\n                    (p/dom-entered! managed)))))))))\n\n    :synced)\n\n  (destroy! [this ^boolean dom-remove?]\n    (when dom-remove?\n      (doto (js/document.createRange)\n        (.setStartBefore marker-before)\n        (.setEndAfter marker-after)\n        (.deleteContents)))\n\n    (.forEach items\n      (fn [^SimpleItem item]\n        (p/destroy! ^not-native (.-managed item) false)))\n    ))\n\n(deftype SimpleCollectionInit [coll render-fn]\n  p/IConstruct\n  (as-managed [this env]\n    (let [marker-before (common/dom-marker env \"coll-start\")\n          marker-after (common/dom-marker env \"coll-end\")\n          arr (js/Array. (count coll))\n          rfn (common/ifn2-wrap render-fn)]\n\n      (reduce-kv\n        (fn [_ idx data]\n          (aset arr idx (SimpleItem. data (p/as-managed (rfn data idx) env))))\n        nil\n        coll)\n\n      (SimpleCollection. env coll render-fn arr marker-before marker-after false)))\n\n  IEquiv\n  (-equiv [this ^SimpleCollectionInit other]\n    (and (instance? SimpleCollectionInit other)\n         ;; could be a keyword, can't use identical?\n         ;; FIXME: this makes it never equal if fn is created in :render fn\n         (identical? render-fn (.-render-fn other))\n         ;; compare coll last since its pointless if the others changed and typically more expensive to compare\n         (= coll (.-coll other)))))\n\n(defn simple-seq [coll render-fn]\n  {:pre [(sequential? coll)\n         (ifn? render-fn)]}\n  (let [coll (vec coll)]\n    (if (zero? (count coll))\n      nil ;; can skip much unneeded work for empty colls\n      (SimpleCollectionInit. coll render-fn))))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.arborist.collections/KeyedItem","shadow.arborist.collections/->KeyedItem","key","data","managed","moved?","cljs.core/PROTOCOL_SENTINEL","shadow.arborist.collections/KeyedCollection","shadow.arborist.collections/->KeyedCollection","env","coll","key-fn","render-fn","items","item-keys","marker-before","marker-after","dom-entered?","this","parent","anchor","item","next","shadow.arborist.collections/KeyedCollectionInit","old-coll","new-coll","dom-parent","rfn-identical?","cljs.core.ex_info","kfn","shadow.arborist.common/ifn1-wrap","rfn","shadow.arborist.common/ifn3-wrap","new-len","old-items","new-items","js/Array","new-keys","cljs.core/-persistent!","cljs.core/reduce-kv","keys","idx","val","cljs.core/-as-transient","cljs.core.not_EQ_","cljs.core/contains?","old-idx","new-item","old-item","cljs.core.get","cljs.core/not","rendered","shadow.arborist.protocols/as-managed","new-managed","seek-idx","item-at-idx","dom-remove?","G__11600","js/document.createRange","shadow.arborist.collections/->KeyedCollectionInit","len","cljs.core/count","shadow.arborist.common.dom_marker","cljs.core/persistent!","cljs.core.assoc_BANG_","cljs.core/transient","other","cljs.core/keyword-identical?","cljs.core._EQ_","js/Error","shadow.arborist.collections/keyed-seq","cljs.core/sequential?","cljs.core/ifn?","cljs.core/vec","shadow.arborist.collections/SimpleItem","shadow.arborist.collections/->SimpleItem","shadow.arborist.collections/SimpleCollection","shadow.arborist.collections/->SimpleCollection","shadow.arborist.collections/SimpleCollectionInit","oc","nc","max-idx","js/Math.min","shadow.arborist.common/ifn2-wrap","n__5636__auto__","new-data","new-rendered","shadow.arborist.common/replace-managed","shadow.arborist.protocols/dom-entered!","shadow.arborist.protocols/dom-insert","G__11651","shadow.arborist.collections/->SimpleCollectionInit","arr","_","shadow.arborist.collections/simple-seq"]],"~:used-vars",["^D",["~$cljs.core/PROTOCOL_SENTINEL","~$shadow.arborist.protocols/dom-insert","~$shadow.arborist.protocols/dom-first","~$cljs.core/sequential?","~$shadow.arborist.common/replace-managed","~$shadow.arborist.collections/->KeyedItem","~$cljs.core/=","~$shadow.arborist.collections/KeyedItem","~$cljs.core/ifn?","~$cljs.core/-write","~$shadow.arborist.collections/SimpleCollectionInit","~$cljs.core/count","~$shadow.arborist.collections/simple-seq","~$cljs.core/not=","~$cljs.core/keyword-identical?","~$shadow.arborist.collections/->KeyedCollection","~$js/Math.min","~$cljs.core/-as-transient","~$cljs.core/contains?","~$cljs.core/-count","~$shadow.arborist.protocols/as-managed","~$shadow.arborist.collections/keyed-seq","~$shadow.arborist.common/ifn2-wrap","~$shadow.arborist.collections/KeyedCollection","~$shadow.arborist.collections/SimpleCollection","~$cljs.core/get","~$js/Array","~$cljs.core/-nth","~$shadow.arborist.collections/KeyedCollectionInit","~$shadow.arborist.collections/SimpleItem","~$shadow.arborist.common/dom-marker","~$shadow.arborist.collections/->KeyedCollectionInit","~$cljs.core/-persistent!","~$cljs.core/persistent!","~$shadow.arborist.collections/->SimpleCollectionInit","~$cljs.core/ex-info","~$shadow.arborist.protocols/dom-sync!","~$shadow.arborist.collections/->SimpleItem","~$cljs.core/vec","~$cljs.core/transient","~$cljs.core/-assoc!","~$shadow.arborist.protocols/destroy!","~$shadow.arborist.protocols/supports?","~$cljs.core/not","~$shadow.arborist.collections/->SimpleCollection","~$shadow.arborist.protocols/dom-entered!","~$js/document.createRange","~$cljs.core/reduce-kv","~$shadow.arborist.common/ifn3-wrap","~$cljs.core/assoc!","~$shadow.arborist.common/ifn1-wrap","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^11","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^P","~$goog.dom.HtmlElement"]]],["^11","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^11","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.asserts"]]],["^11","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.array","~$goog.object","^2M","^2L"]]],["^11","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2L"]]],["^11","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N"]]],["^11","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2M","~$goog.reflect","^2L"]]],["^11","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","shadow/arborist/protocols.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^O"]]],["^11","shadow/arborist/common.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^O","~$goog.dom","^L"]]],["^11","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N"]]],"~:SHADOW-TIMESTAMP",[1693915017000,1693915017000,1667395541000],["^11","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","^2Z"]]],["^11","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","~$goog.fs.blob","^2Q","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2S","^2T","^2U","^2V"]]],["^11","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2U","~$goog.html.SafeUrl","^2V","^2N","^2L"]]],["^11","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^32","~$goog.html.SafeStyle","^34","^2R","~$goog.html.uncheckedconversions","^2U","^2L"]]],["^11","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2U","^2S","^2T","^32","^38","~$goog.html.SafeStyleSheet","^34","~$goog.dom.TagName","^2R","^2V","^2N","^2W","^2O","^2P","^2L","~$goog.dom.tags","^33"]]],["^11","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2P"]]],["^11","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2O","^2L","^2M"]]],["^11","shadow/arborist/collections.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^O","^L","^M"]]],["^11","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2O","^2N","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3;","~$goog.dom.safe","^37","^39","~$goog.math.Coordinate","~$goog.math.Size","^2P","~$goog.string","^2U","~$goog.string.Unicode","~$goog.userAgent"]]],["^11","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.debug.Error","^3>"]]],["^11","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2O","^2N","~$goog.collections.maps","^3B","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",[]]],["^11","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2O","^2P"]]],["^11","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^3?","^39","^2U","^2L"]]],["^11","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.labs.userAgent","^2L"]]],["^11","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.math"]]],["^11","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","^37","^32","^38","^3:","^34","^2R","^2U","^2L","^2S"]]],["^11","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P"]]],["^11","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","~$goog.math.Long","~$goog.math.Integer","^3B","^2P","^2O","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2U","^2V","^33","^2N"]]],["^11","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2U","^38","^2V","^2P","^2N","^2L"]]],["^11","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2Z"]]],["^11","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^3D"]]],["^11","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","^3B"]]],["^11","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2G",["^ ","^2H",null,"^2I",["^D",[]],"^2J",["^P","^2N","^2V"]]]]],"~:clj-info",["^ ","jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1667395541000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","shadow/arborist/collections.cljs","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"~:shadow/js-access-properties",["^D",["min","createRange"]],"^E","^F","^G",["^ "],"^J",null,"^K",["^ ","^L","^L","~$p","^L","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^D",["^R"]],"~:shadow/js-access-global",["^D",["document","Math","Error","Array"]],"^S",null,"~:defs",["^ ","~$KeyedCollection",["^ ","~:num-fields",9,"~:protocols",["^D",["~$shadow.arborist.protocols/IManaged"]],"^E","^1T","^6","shadow/arborist/collections.cljs","^:",25,"~:type",true,"^8",10,"^7",10,"~:record",false,"^9",10,"~:tag","~$function","~:skip-protocol-flag",null],"~$KeyedCollectionInit",["^ ","^5",["^ ","^6","shadow/arborist/collections.cljs","^7",6,"^8",10,"^9",6,"^:",29,"~:declared",true],"^4H",3,"^4I",["^D",["~$cljs.core/IEquiv","~$shadow.arborist.protocols/IConstruct"]],"^E","^1Y","^6","shadow/arborist/collections.cljs","^:",29,"^4K",true,"^8",10,"^7",234,"^4L",false,"^4Q",true,"^9",234,"^4M","^4N","^4O",["^D",["^4R"]]],"~$SimpleItem",["^ ","^4H",2,"^4I",["^D",[]],"^E","^1Z","^6","shadow/arborist/collections.cljs","^:",20,"^4K",true,"^8",10,"^7",301,"^4L",false,"^9",301,"^4M","^4N","^4O",null],"~$->KeyedCollectionInit",["^ ","~:protocol-inline",null,"^5",["^ ","^4I",["^D",["^4R","^4S"]],"^6","shadow/arborist/collections.cljs","^:",29,"^8",10,"~:factory","~:positional","^7",234,"^9",234,"~:arglists",["^V",["~$quote",["^V",[["~$coll","~$key-fn","~$render-fn"]]]]],"^4O",["^D",["^4R"]],"~:doc","Positional factory function for shadow.arborist.collections/KeyedCollectionInit."],"^4I",["^D",["^4R","^4S"]],"^E","^20","^6","shadow/arborist/collections.cljs","^:",29,"~:method-params",["^V",[["^4[","^50","^51"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^4W","^4X","^7",234,"~:ret-tag","^1Y","^9",234,"~:max-fixed-arity",3,"~:fn-var",true,"^4Y",["^V",["^4Z",["^V",[["^4[","^50","^51"]]]]],"^4O",["^D",["^4R"]],"^52","Positional factory function for shadow.arborist.collections/KeyedCollectionInit."],"~$->SimpleItem",["^ ","^4V",null,"^5",["^ ","^4I",["^D",[]],"^6","shadow/arborist/collections.cljs","^:",20,"^8",10,"^4W","^4X","^7",301,"^9",301,"^4Y",["^V",["^4Z",["^V",[["~$data","~$managed"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/SimpleItem."],"^4I",["^D",[]],"^E","^26","^6","shadow/arborist/collections.cljs","^:",20,"^53",["^V",[["^5;","^5<"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^4W","^4X","^7",301,"^57","^1Z","^9",301,"^58",2,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^5;","^5<"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/SimpleItem."],"~$simple-seq",["^ ","^4V",null,"^5",["^ ","^6","shadow/arborist/collections.cljs","^7",438,"^8",7,"^9",438,"^:",17,"^4Y",["^V",["^4Z",["^V",[["^4[","^51"]]]]]],"^E","^1I","^6","shadow/arborist/collections.cljs","^:",17,"^53",["^V",[["^4[","^51"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^7",438,"^57",["^D",["^1G","~$clj-nil"]],"^9",438,"^58",2,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^4[","^51"]]]]]],"~$->SimpleCollection",["^ ","^4V",null,"^5",["^ ","^4I",["^D",["^4J"]],"^6","shadow/arborist/collections.cljs","^:",26,"^8",10,"^4W","^4X","^7",303,"^9",303,"^4Y",["^V",["^4Z",["^V",[["~$env","^4[","^51","~$items","~$marker-before","~$marker-after","~$dom-entered?"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/SimpleCollection."],"^4I",["^D",["^4J"]],"^E","^2=","^6","shadow/arborist/collections.cljs","^:",26,"^53",["^V",[["^5@","^4[","^51","^5A","^5B","^5C","^5D"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^4W","^4X","^7",303,"^57","^1U","^9",303,"^58",7,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^5@","^4[","^51","^5A","^5B","^5C","^5D"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/SimpleCollection."],"~$->KeyedCollection",["^ ","^4V",null,"^5",["^ ","^4I",["^D",["^4J"]],"^6","shadow/arborist/collections.cljs","^:",25,"^8",10,"^4W","^4X","^7",10,"^9",10,"^4Y",["^V",["^4Z",["^V",[["^5@","^4[","^50","^51","^5A","~$item-keys","^5B","^5C","^5D"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/KeyedCollection."],"^4I",["^D",["^4J"]],"^E","^1L","^6","shadow/arborist/collections.cljs","^:",25,"^53",["^V",[["^5@","^4[","^50","^51","^5A","^5F","^5B","^5C","^5D"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^4W","^4X","^7",10,"^57","^1T","^9",10,"^58",9,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^5@","^4[","^50","^51","^5A","^5F","^5B","^5C","^5D"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/KeyedCollection."],"~$keyed-seq",["^ ","^4V",null,"^5",["^ ","^6","shadow/arborist/collections.cljs","^7",285,"^8",7,"^9",285,"^:",16,"^4Y",["^V",["^4Z",["^V",[["^4[","^50","^51"]]]]]],"^E","^1R","^6","shadow/arborist/collections.cljs","^:",16,"^53",["^V",[["^4[","^50","^51"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^7",285,"^57",["^D",["^1Y","^5>"]],"^9",285,"^58",3,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^4[","^50","^51"]]]]]],"~$KeyedItem",["^ ","^4H",4,"^4I",["^D",[]],"^E","^1D","^6","shadow/arborist/collections.cljs","^:",19,"^4K",true,"^8",10,"^7",8,"^4L",false,"^9",8,"^4M","^4N","^4O",null],"~$SimpleCollection",["^ ","^4H",7,"^4I",["^D",["^4J"]],"^E","^1U","^6","shadow/arborist/collections.cljs","^:",26,"^4K",true,"^8",10,"^7",303,"^4L",false,"^9",303,"^4M","^4N","^4O",null],"~$SimpleCollectionInit",["^ ","^5",["^ ","^6","shadow/arborist/collections.cljs","^7",299,"^8",10,"^9",299,"^:",30,"^4Q",true],"^4H",2,"^4I",["^D",["^4R","^4S"]],"^E","^1G","^6","shadow/arborist/collections.cljs","^:",30,"^4K",true,"^8",10,"^7",413,"^4L",false,"^4Q",true,"^9",413,"^4M","^4N","^4O",["^D",["^4R"]]],"~$->KeyedItem",["^ ","^4V",null,"^5",["^ ","^4I",["^D",[]],"^6","shadow/arborist/collections.cljs","^:",19,"^8",10,"^4W","^4X","^7",8,"^9",8,"^4Y",["^V",["^4Z",["^V",[["~$key","^5;","^5<","~$moved?"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/KeyedItem."],"^4I",["^D",[]],"^E","^1B","^6","shadow/arborist/collections.cljs","^:",19,"^53",["^V",[["^5L","^5;","^5<","^5M"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^4W","^4X","^7",8,"^57","^1D","^9",8,"^58",4,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^5L","^5;","^5<","^5M"]]]]],"^4O",null,"^52","Positional factory function for shadow.arborist.collections/KeyedItem."],"~$->SimpleCollectionInit",["^ ","^4V",null,"^5",["^ ","^4I",["^D",["^4R","^4S"]],"^6","shadow/arborist/collections.cljs","^:",30,"^8",10,"^4W","^4X","^7",413,"^9",413,"^4Y",["^V",["^4Z",["^V",[["^4[","^51"]]]]],"^4O",["^D",["^4R"]],"^52","Positional factory function for shadow.arborist.collections/SimpleCollectionInit."],"^4I",["^D",["^4R","^4S"]],"^E","^23","^6","shadow/arborist/collections.cljs","^:",30,"^53",["^V",[["^4[","^51"]]],"^54",null,"^55",["^V",[null,null]],"^8",1,"^56",false,"^4W","^4X","^7",413,"^57","^1G","^9",413,"^58",2,"^59",true,"^4Y",["^V",["^4Z",["^V",[["^4[","^51"]]]]],"^4O",["^D",["^4R"]],"^52","Positional factory function for shadow.arborist.collections/SimpleCollectionInit."]],"^T",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^D",["~:synced","^5A","^5B","~$boolean","~:done","^5;","~:else","^5C","^5M","~:coll","^5L","^51","~:keys","^4[","^5@","~$array","^4N","^5D","^50","^4M","~:mutable","^5F","^5<"]],"~:order",["^5L","^5;","^5<","^5M","^5T","^5U","^5S","^5P","^5@","^4[","^5W","^50","^4M","^4N","^51","^5A","^5F","^5B","^5C","^5D","^5Q","^5R","^5V"]],"^Y",["^ ","^R",["^D",[]]],"^Z",["^ "],"^[",["^P","^O","^L","^M"]],"^I","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2F",[["^5[","~:static-fns"],true,["^5[","~:shadow-tweaks"],null,["^5[","~:source-map-inline"],null,["^5[","~:elide-asserts"],false,["^5[","~:optimize-constants"],null,["^5[","^14"],null,["^5[","~:external-config"],null,["^5[","~:tooling-config"],null,["^5[","~:emit-constants"],null,["^5[","~:load-tests"],null,["^5[","~:form-size-threshold"],null,["^5[","~:global-goog-object&array"],null,["^5[","~:data-readers"],null,["^5[","~:infer-externs"],"~:auto",["^5[","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5[","~:fn-invoke-direct"],null,["^5[","~:source-map"],"/dev/null"]]]