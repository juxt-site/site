["^ ","~:output",["^ ","~:js","goog.provide('shadow.arborist.attributes');\ngoog.scope(function(){\n  shadow.arborist.attributes.goog$module$goog$object = goog.module.get('goog.object');\n});\nif((typeof shadow !== 'undefined') && (typeof shadow.arborist !== 'undefined') && (typeof shadow.arborist.attributes !== 'undefined') && (typeof shadow.arborist.attributes.attr_handlers !== 'undefined')){\n} else {\nshadow.arborist.attributes.attr_handlers = ({});\n}\nshadow.arborist.attributes.vec__GT_class = (function shadow$arborist$attributes$vec__GT_class(v){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,c){\nif(cljs.core.not(c)){\nreturn s;\n} else {\nif(cljs.core.not(s)){\nreturn c;\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(c)].join('');\n\n}\n}\n}),null,v);\n});\nshadow.arborist.attributes.map__GT_class = (function shadow$arborist$attributes$map__GT_class(m){\nreturn cljs.core.reduce_kv((function (s,k,v){\nif(cljs.core.not(v)){\nreturn s;\n} else {\nif(cljs.core.not(s)){\nif((k instanceof cljs.core.Keyword)){\nreturn k.cljs$core$INamed$_name$arity$1(null);\n} else {\nreturn k;\n}\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((((k instanceof cljs.core.Keyword))?k.cljs$core$INamed$_name$arity$1(null):k))].join('');\n\n}\n}\n}),null,m);\n});\nshadow.arborist.attributes.add_attr = (function shadow$arborist$attributes$add_attr(kw,handler){\nif((kw instanceof cljs.core.Keyword)){\n} else {\nthrow (new Error(\"Assert failed: (keyword? kw)\"));\n}\n\nif(cljs.core.fn_QMARK_(handler)){\n} else {\nthrow (new Error(\"Assert failed: (fn? handler)\"));\n}\n\nreturn shadow.arborist.attributes.goog$module$goog$object.set(shadow.arborist.attributes.attr_handlers,kw.fqn,handler);\n});\nshadow.arborist.attributes.dom_attribute_QMARK_ = (function shadow$arborist$attributes$dom_attribute_QMARK_(name){\nreturn ((clojure.string.starts_with_QMARK_(name,\"data-\")) || (clojure.string.starts_with_QMARK_(name,\"aria-\")));\n});\nshadow.arborist.attributes.set_dom_attribute = (function shadow$arborist$attributes$set_dom_attribute(node,prop_name,nval){\nif(typeof nval === 'string'){\nreturn node.setAttribute(prop_name,nval);\n} else {\nif(typeof nval === 'number'){\nreturn node.setAttribute(prop_name,nval);\n} else {\nif((nval == null)){\nreturn node.removeAttribute(prop_name);\n} else {\nif(nval === false){\nreturn node.removeAttribute(prop_name);\n} else {\nif(nval === true){\nreturn node.setAttribute(prop_name,\"\");\n} else {\nreturn node.setAttribute(prop_name,nval);\n\n}\n}\n}\n}\n}\n});\nshadow.arborist.attributes.set_style_property = (function shadow$arborist$attributes$set_style_property(node,prop_name,nval){\nif((nval == null)){\nreturn node.style.removeProperty(prop_name);\n} else {\nreturn node.style.setProperty(prop_name,nval);\n}\n});\nshadow.arborist.attributes.wrap_stop_BANG_ = (function shadow$arborist$attributes$wrap_stop_BANG_(target){\nreturn (function (e){\ne.stopPropagation();\n\ne.preventDefault();\n\nreturn target(e);\n});\n});\nshadow.arborist.attributes.wrap_stop = (function shadow$arborist$attributes$wrap_stop(target){\nreturn (function (e){\ne.stopPropagation();\n\nreturn target(e);\n});\n});\nshadow.arborist.attributes.wrap_prevent_default = (function shadow$arborist$attributes$wrap_prevent_default(target){\nreturn (function (e){\ne.preventDefault();\n\nreturn target(e);\n});\n});\nshadow.arborist.attributes.make_attr_handler = (function shadow$arborist$attributes$make_attr_handler(key){\nvar prop_name = key.name;\nvar prop_ns = key.ns;\nif(shadow.arborist.attributes.dom_attribute_QMARK_(prop_name)){\nreturn (function (env,node,oval,nval){\nreturn shadow.arborist.attributes.set_dom_attribute(node,prop_name,nval);\n});\n} else {\nif((\"style\" === prop_ns)){\nreturn (function (env,node,oval,nval){\nreturn shadow.arborist.attributes.set_style_property(node,prop_name,nval);\n});\n} else {\nif(cljs.core.truth_(prop_ns)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"namespaced attribute without setter: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(key)].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353),key], null));\n} else {\nif(clojure.string.starts_with_QMARK_(prop_name,\"on-\")){\nvar event = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(prop_name,(3));\nvar ev_key = [\"__shadow$\",event].join('');\nreturn (function (env,node,oval,nval){\nvar temp__5804__auto___11531 = shadow.arborist.attributes.goog$module$goog$object.get(node,ev_key);\nif(cljs.core.truth_(temp__5804__auto___11531)){\nvar ev_fn_11532 = temp__5804__auto___11531;\nnode.removeEventListener(event,ev_fn_11532);\n} else {\n}\n\nif((!((nval == null)))){\nvar ev_handler = new cljs.core.Keyword(\"shadow.arborist.protocols\",\"dom-event-handler\",\"shadow.arborist.protocols/dom-event-handler\",-755471285).cljs$core$IFn$_invoke$arity$1(env);\nif(cljs.core.truth_(ev_handler)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"missing dom-event-handler!\",new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),env,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event,new cljs.core.Keyword(null,\"node\",\"node\",581201198),node,new cljs.core.Keyword(null,\"value\",\"value\",305978217),nval], null));\n}\n\nif(goog.DEBUG){\nev_handler.shadow$arborist$protocols$IHandleDOMEvents$validate_dom_event_value_BANG_$arity$4(null,env,event,nval);\n} else {\n}\n\nvar m_QMARK_ = cljs.core.map_QMARK_(nval);\nvar ev_fn = (function (dom_event){\nreturn ev_handler.shadow$arborist$protocols$IHandleDOMEvents$handle_dom_event_BANG_$arity$5(null,env,event,nval,dom_event);\n});\nvar ev_opts = ({});\nvar ev_fn__$1 = (((!(m_QMARK_)))?ev_fn:(function (){var map__11461 = nval;\nvar map__11461__$1 = cljs.core.__destructure_map(map__11461);\nvar capture = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"capture\",\"e/capture\",-677031226));\nvar signal = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"signal\",\"e/signal\",-1984951554));\nvar prevent_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"prevent-default\",\"e/prevent-default\",813416704));\nvar rate_limit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"rate-limit\",\"e/rate-limit\",1748081857));\nvar debounce = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"debounce\",\"e/debounce\",-871550403));\nvar stop_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"stop!\",\"e/stop!\",726634536));\nvar passive = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"passive\",\"e/passive\",252884107));\nvar stop = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"stop\",\"e/stop\",-2140915081));\nvar once = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"once\",\"e/once\",-262568708));\nvar throttle = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11461__$1,new cljs.core.Keyword(\"e\",\"throttle\",\"e/throttle\",-1860340685));\nif(cljs.core.truth_(once)){\nshadow.arborist.attributes.goog$module$goog$object.set(ev_opts,\"once\",true);\n} else {\n}\n\nif(cljs.core.truth_(passive)){\nshadow.arborist.attributes.goog$module$goog$object.set(ev_opts,\"passive\",true);\n} else {\n}\n\nif(cljs.core.truth_(capture)){\nshadow.arborist.attributes.goog$module$goog$object.set(ev_opts,\"capture\",true);\n} else {\n}\n\nif(cljs.core.truth_(signal)){\nshadow.arborist.attributes.goog$module$goog$object.set(ev_opts,\"signal\",true);\n} else {\n}\n\nvar G__11468 = ev_fn;\nvar G__11468__$1 = (cljs.core.truth_(debounce)?goog.functions.debounce(G__11468,debounce):G__11468);\nvar G__11468__$2 = (cljs.core.truth_(throttle)?goog.functions.debounce(G__11468__$1,throttle):G__11468__$1);\nvar G__11468__$3 = (cljs.core.truth_(rate_limit)?goog.functions.debounce(G__11468__$2,rate_limit):G__11468__$2);\nvar G__11468__$4 = (cljs.core.truth_(prevent_default)?shadow.arborist.attributes.wrap_prevent_default(G__11468__$3):G__11468__$3);\nvar G__11468__$5 = (cljs.core.truth_(stop)?shadow.arborist.attributes.wrap_stop(G__11468__$4):G__11468__$4);\nif(cljs.core.truth_(stop_BANG_)){\nreturn shadow.arborist.attributes.wrap_stop_BANG_(G__11468__$5);\n} else {\nreturn G__11468__$5;\n}\n})());\nnode.addEventListener(event,ev_fn__$1,ev_opts);\n\nreturn shadow.arborist.attributes.goog$module$goog$object.set(node,ev_key,ev_fn__$1);\n} else {\nreturn null;\n}\n});\n} else {\nvar prop = goog.string.toCamelCase(prop_name);\nreturn (function (env,node,oval,nval){\nif(new cljs.core.Keyword(\"dom\",\"svg\",\"dom/svg\",856951640).cljs$core$IFn$_invoke$arity$1(env)){\nreturn shadow.arborist.attributes.set_dom_attribute(node,key.name,nval);\n} else {\nreturn shadow.arborist.attributes.goog$module$goog$object.set(node,prop,nval);\n}\n});\n\n}\n}\n}\n}\n});\nshadow.arborist.attributes.set_attr = (function shadow$arborist$attributes$set_attr(env,node,key,oval,nval){\nif((key instanceof cljs.core.Keyword)){\n} else {\nthrow (new Error(\"Assert failed: (keyword? key)\"));\n}\n\nvar handler = shadow.arborist.attributes.goog$module$goog$object.get(shadow.arborist.attributes.attr_handlers,key.fqn);\nif(handler){\nreturn handler(env,node,oval,nval);\n} else {\nvar handler__$1 = shadow.arborist.attributes.make_attr_handler(key);\nshadow.arborist.attributes.goog$module$goog$object.set(shadow.arborist.attributes.attr_handlers,key.fqn,handler__$1);\n\nreturn handler__$1(env,node,oval,nval);\n}\n});\nshadow.arborist.attributes.add_attr(new cljs.core.Keyword(null,\"for\",\"for\",-1323786319),(function (env,node,oval,nval){\nreturn (node.htmlFor = nval);\n}));\nshadow.arborist.attributes.add_attr(new cljs.core.Keyword(null,\"style\",\"style\",-496642736),(function (env,node,oval,nval){\nif((((oval == null)) && ((nval == null)))){\nreturn new cljs.core.Keyword(null,\"empty\",\"empty\",767870958);\n} else {\nif(cljs.core.map_QMARK_(nval)){\nreturn cljs.core.reduce_kv((function (_,k,v){\nreturn shadow.arborist.attributes.set_style_property(node,k.cljs$core$INamed$_name$arity$1(null),v);\n}),null,nval);\n} else {\nif(typeof nval === 'string'){\nreturn (node.style.cssText = nval);\n} else {\nif((!((!((nval == null)))))){\nreturn (node.style.cssText = \"\");\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"invalid value for :style\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node,new cljs.core.Keyword(null,\"val\",\"val\",128701612),nval], null));\n\n}\n}\n}\n}\n}));\nshadow.arborist.attributes.add_attr(new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),(function (env,node,oval,nval){\nvar sval = (((nval == null))?\"\":((typeof nval === 'string')?nval:((cljs.core.vector_QMARK_(nval))?(function (){var temp__5802__auto__ = shadow.arborist.attributes.vec__GT_class(nval);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar s = temp__5802__auto__;\nreturn s;\n} else {\nreturn \"\";\n}\n})():((cljs.core.map_QMARK_(nval))?(function (){var temp__5802__auto__ = shadow.arborist.attributes.map__GT_class(nval);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar s = temp__5802__auto__;\nreturn s;\n} else {\nreturn \"\";\n}\n})():(function(){throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"invalid value for :class\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node,new cljs.core.Keyword(null,\"val\",\"val\",128701612),nval], null))})()\n))));\nif(new cljs.core.Keyword(\"dom\",\"svg\",\"dom/svg\",856951640).cljs$core$IFn$_invoke$arity$1(env)){\nreturn node.setAttribute(\"class\",sval);\n} else {\nreturn (node.className = sval);\n}\n}));\nshadow.arborist.attributes.add_attr(new cljs.core.Keyword(\"dom\",\"ref\",\"dom/ref\",1289472705),(function (env,node,oval,nval){\nif((nval == null)){\nreturn cljs.core.vreset_BANG_(oval,null);\n} else {\nif((!((nval == null)))){\nreturn cljs.core.vreset_BANG_(nval,node);\n} else {\nreturn null;\n\n}\n}\n}));\n/**\n * merge attributes from old/new attr maps\n */\nshadow.arborist.attributes.merge_attrs = (function shadow$arborist$attributes$merge_attrs(env,node,old,new$){\ncljs.core.reduce_kv((function (_,key,nval){\nvar oval = cljs.core.get.cljs$core$IFn$_invoke$arity$2(old,key);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(nval,oval)){\nreturn shadow.arborist.attributes.set_attr(env,node,key,oval,nval);\n} else {\nreturn null;\n}\n}),null,new$);\n\nreturn cljs.core.reduce_kv((function (_,key,oval){\nif(cljs.core.contains_QMARK_(new$,key)){\nreturn null;\n} else {\nreturn shadow.arborist.attributes.set_attr(env,node,key,oval,null);\n}\n}),null,old);\n});\n/**\n * initial set attributes from key/val map\n */\nshadow.arborist.attributes.set_attrs = (function shadow$arborist$attributes$set_attrs(env,node,attrs){\nreturn cljs.core.reduce_kv((function (_,key,val){\nreturn shadow.arborist.attributes.set_attr(env,node,key,null,val);\n}),null,attrs);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","shadow/arborist/attributes.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.arborist.attributes","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$goog.functions","^L","~$p","~$shadow.arborist.protocols","~$goog.string","^N","^M","^M","~$gfn","^L","~$cljs.core","^P","~$gobj","~$goog.object","~$goog","^S","^R","^R","~$str","~$clojure.string","^U","^U","~$gstr","^N"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^F",["^10",["^X",["^R","~:as","^Q"],["^N","^12","^V"],["^L","^12","^O"],["^U","^12","^T"],["^M","^12","~$p"]]]]],"~:flags",["^ ","^X",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^S","^P","^R","^N","^L","^U","^M"]],"^I","^F","~:resource-id",["~:shadow.build.classpath/resource","shadow/arborist/attributes.cljs"],"~:compiled-at",1693994117665,"^G",["^ ","^L","^L","~$p","^M","^N","^N","^M","^M","^O","^L","^P","^P","^Q","^R","^S","^S","^R","^R","^T","^U","^U","^U","^V","^N"],"~:resource-name","shadow/arborist/attributes.cljs","~:warnings",[],"~:source","(ns shadow.arborist.attributes\n  (:require\n    [goog.object :as gobj]\n    [goog.string :as gstr]\n    [goog.functions :as gfn]\n    [clojure.string :as str]\n    [shadow.arborist.protocols :as p]\n    ))\n\n(defonce attr-handlers #js {})\n\n(defn vec->class [v]\n  (reduce\n    (fn [s c]\n      (cond\n        (not c)\n        s\n\n        (not s)\n        c\n\n        :else\n        (str s \" \" c)))\n    nil\n    v))\n\n(defn map->class [m]\n  (reduce-kv\n    (fn [s k v]\n      (cond\n        (not v)\n        s\n\n        (not s)\n        (if (keyword? k) (-name k) k)\n\n        :else\n        (str s \" \" (if (keyword? k) (-name k) k))))\n    nil\n    m))\n\n(defn add-attr [^Keyword kw handler]\n  {:pre [(keyword? kw)\n         (fn? handler)]}\n  (gobj/set attr-handlers (.-fqn kw) handler))\n\n(defn dom-attribute? [name]\n  (or (str/starts-with? name \"data-\")\n      (str/starts-with? name \"aria-\")))\n\n(defn set-dom-attribute [^js node prop-name nval]\n  (cond\n    (string? nval)\n    (.setAttribute node prop-name nval)\n\n    (number? nval)\n    (.setAttribute node prop-name nval)\n\n    (nil? nval)\n    (.removeAttribute node prop-name)\n\n    (false? nval)\n    (.removeAttribute node prop-name)\n\n    ;; convention according to\n    ;; https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute\n    ;; looks a little bit better in the inspector, no clue if this actually\n    ;; makes a difference anywhere\n    ;; <div data-thing> vs <div data-thing=\"true\">\n    (true? nval)\n    (.setAttribute node prop-name \"\")\n\n    :else\n    (.setAttribute node prop-name nval)))\n\n(defn set-style-property [^js node prop-name nval]\n  (if (nil? nval)\n    (.. node -style (removeProperty prop-name))\n    (.. node -style (setProperty prop-name nval))))\n\n(defn wrap-stop! [^function target]\n  (fn [^js e]\n    (.stopPropagation e)\n    (.preventDefault e)\n    (target e)))\n\n(defn wrap-stop [^function target]\n  (fn [^js e]\n    (.stopPropagation e)\n    (target e)))\n\n(defn wrap-prevent-default [^function target]\n  (fn [^js e]\n    (.preventDefault e)\n    (target e)))\n\n(defn make-attr-handler [^Keyword key]\n  (let [prop-name (.-name key)\n        prop-ns (.-ns key)]\n\n    (cond\n      (dom-attribute? prop-name)\n      (fn [env node oval nval]\n        (set-dom-attribute node prop-name nval))\n\n      (identical? \"style\" prop-ns)\n      (fn [env node oval nval]\n        (set-style-property node prop-name nval))\n\n      prop-ns\n      (throw\n        (ex-info\n          (str \"namespaced attribute without setter: \" key)\n          {:attr key}))\n\n      ;; :on-* convention for events\n      ;; only handled when there is an actual handler for it registered in the env\n      ;; which will usually be components which I don't want to reference here\n      ;; but is common enough that it should also be extensible somewhat\n      (str/starts-with? prop-name \"on-\")\n      (let [event (subs prop-name 3)\n            ev-key (str \"__shadow$\" event)]\n\n        (fn [env node oval nval]\n          (when-let [ev-fn (gobj/get node ev-key)]\n            (.removeEventListener node event ev-fn))\n\n          ;; FIXME: should maybe allow to just use a function as value\n          ;; skipping all the ev-handler logic and just calling it as a regular callback\n          (when (some? nval)\n            (let [^not-native ev-handler (::p/dom-event-handler env)]\n\n              (when-not ev-handler\n                (throw (ex-info \"missing dom-event-handler!\" {:env env :event event :node node :value nval})))\n\n              (when ^boolean js/goog.DEBUG\n                ;; validate value now in dev so it fails on construction\n                ;; slightly better experience than firing on-event\n                ;; easier to miss in tests and stuff that don't test particular events\n                (p/validate-dom-event-value! ev-handler env event nval))\n\n              (let [m?\n                    (map? nval)\n\n                    ev-fn\n                    (fn [dom-event]\n                      (p/handle-dom-event! ev-handler env event nval dom-event))\n\n                    ev-opts\n                    #js {}\n\n                    ev-fn\n                    (if-not m?\n                      ev-fn\n                      (let [{:e/keys\n                             [debounce\n                              throttle\n                              rate-limit\n                              once\n                              passive\n                              capture\n                              signal\n                              stop!\n                              stop\n                              prevent-default]}\n                            nval]\n\n                        ;; FIXME: need to track if once already happened. otherwise may re-attach and actually fire more than once\n                        ;; but it should be unlikely to have a changing val with :e/once?\n                        (when once\n                          (gobj/set ev-opts \"once\" true))\n\n                        (when passive\n                          (gobj/set ev-opts \"passive\" true))\n\n                        (when capture\n                          (gobj/set ev-opts \"capture\" true))\n\n                        (when signal\n                          (gobj/set ev-opts \"signal\" true))\n\n                        ;; FIXME: should these be exclusive?\n                        (cond-> ev-fn\n                          debounce\n                          (gfn/debounce debounce)\n\n                          throttle\n                          (gfn/debounce throttle)\n\n                          rate-limit\n                          (gfn/debounce rate-limit)\n\n                          ;; FIXME: would it be better to default these to true?\n                          prevent-default\n                          (wrap-prevent-default)\n\n                          stop\n                          (wrap-stop)\n\n                          stop!\n                          (wrap-stop!)\n                          )))]\n\n                ;; FIXME: ev-opts are not supported by all browsers\n                ;; closure lib probably has something to handle that\n                (.addEventListener node event ev-fn ev-opts)\n\n                (gobj/set node ev-key ev-fn))))))\n\n      :else\n      (let [prop (gstr/toCamelCase prop-name)]\n        (fn [env node oval nval]\n          ;; FIXME: must all attributes in svg elements go with setAttribute?\n          ;; can you make web components for svg elements?\n          ;; seems to break if we try to go with node.width=24 instead of .setAttribute\n          (if ^boolean (:dom/svg env)\n            (set-dom-attribute node (.-name key) nval)\n            (gobj/set node prop nval)\n            ))))))\n\n;; quasi multi-method. not using multi-method because it does too much stuff I don't accidentally\n;; want to run into (eg. keyword inheritance). while that might be interesting for some cases\n;; it may also blow up badly. also this is less code in :advanced.\n(defn set-attr [env ^js node ^Keyword key oval nval]\n  {:pre [(keyword? key)]}\n  (let [^function handler (gobj/get attr-handlers (.-fqn key))]\n    (if ^boolean handler\n      (handler env node oval nval)\n\n      ;; create and store attr handler for later\n      ;; avoids doing the same kind of work over and over to figure out what a key meant\n      (let [^function handler (make-attr-handler key)]\n        (gobj/set attr-handlers (.-fqn key) handler)\n        (handler env node oval nval)\n        ))))\n\n;; special case \"for\" -> \"htmlFor\"\n(add-attr :for\n  (fn [env ^js node oval nval]\n    (set! node -htmlFor nval)))\n\n(add-attr :style\n  (fn [env ^js node oval nval]\n    (cond\n      (and (nil? oval) (nil? nval))\n      :empty\n\n      (map? nval)\n      (reduce-kv\n        (fn [_ ^not-native k v]\n          (set-style-property node (-name k) v))\n        nil\n        nval)\n\n      (string? nval)\n      (set! (.. node -style -cssText) nval)\n\n      ;; nil, undefined\n      (not (some? nval))\n      (set! (.. node -style -cssText) \"\")\n\n      :else\n      (throw (ex-info \"invalid value for :style\" {:node node :val nval}))\n      )))\n\n(add-attr :class\n  (fn [^not-native env ^js node oval nval]\n    (let [sval\n          (cond\n            (nil? nval)\n            \"\"\n\n            (string? nval)\n            nval\n\n            ;; FIXME: classlist?\n            (vector? nval)\n            (if-let [s (vec->class nval)]\n              s\n              \"\")\n\n            (map? nval)\n            (if-let [s (map->class nval)]\n              s\n              \"\")\n\n            :else\n            (throw (ex-info \"invalid value for :class\" {:node node :val nval})))]\n\n      ;; setting className directly doesn't work for SVG elements since its a SVGAnimatedString\n      ;; FIXME: could set baseVal directly?\n      (if ^boolean (:dom/svg env)\n        (.setAttribute node \"class\" sval)\n        (set! node -className sval)))))\n\n(add-attr :dom/ref\n  (fn [env node oval nval]\n    (cond\n      (nil? nval)\n      (vreset! oval nil)\n\n      (some? nval)\n      (vreset! nval node)\n\n      :else\n      nil)))\n\n(defn merge-attrs\n  \"merge attributes from old/new attr maps\"\n  [env node old new]\n  (reduce-kv\n    (fn [_ key nval]\n      (let [oval (get old key)]\n        (when (not= nval oval)\n          (set-attr env node key oval nval))))\n    nil\n    new)\n\n  ;; {:a 1 :x 1} vs {:a 1}\n  ;; {:a 1} vs {:b 1}\n  ;; should be uncommon but need to unset props that are no longer used\n  (reduce-kv\n    (fn [_ key oval]\n      (when-not (contains? new key)\n        (set-attr env node key oval nil)))\n    nil\n    old))\n\n(defn set-attrs\n  \"initial set attributes from key/val map\"\n  [env node attrs]\n  (reduce-kv\n    (fn [_ key val]\n      (set-attr env node key nil val))\n    nil\n    attrs))\n\n\n\n\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["js/shadow","js/shadow.arborist","js/shadow.arborist.attributes","js/shadow.arborist.attributes.attr-handlers","shadow.arborist.attributes/attr-handlers","shadow.arborist.attributes/vec->class","v","cljs.core.reduce","s","c","cljs.core/not","shadow.arborist.attributes/map->class","m","cljs.core/reduce-kv","k","cljs.core/Keyword","js/Error","shadow.arborist.attributes/add-attr","kw","handler","cljs.core/fn?","shadow.arborist.attributes.goog$module$goog$object.set","shadow.arborist.attributes/dom-attribute?","name","clojure.string/starts-with?","shadow.arborist.attributes/set-dom-attribute","node","prop-name","nval","shadow.arborist.attributes/set-style-property","shadow.arborist.attributes/wrap-stop!","target","e","shadow.arborist.attributes/wrap-stop","shadow.arborist.attributes/wrap-prevent-default","shadow.arborist.attributes/make-attr-handler","key","prop-ns","env","oval","cljs.core.ex_info","event","cljs.core.subs","ev-key","temp__5804__auto__","ev-fn","shadow.arborist.attributes.goog$module$goog$object.get","ev-handler","js/goog.DEBUG","m?","cljs.core/map?","dom-event","ev-opts","map__11461","cljs.core/--destructure-map","cljs.core.get","debounce","throttle","rate-limit","once","passive","capture","signal","stop!","stop","prevent-default","G__11468","goog.functions/debounce","prop","goog.string/toCamelCase","shadow.arborist.attributes/set-attr","_","sval","cljs.core/vector?","temp__5802__auto__","cljs.core/vreset!","shadow.arborist.attributes/merge-attrs","old","new","cljs.core.not_EQ_","cljs.core/contains?","shadow.arborist.attributes/set-attrs","attrs","val"]],"~:used-vars",["^D",["~$cljs.core/--destructure-map","~$clojure.string/starts-with?","~$shadow.arborist.attributes/map->class","~$goog.string/toCamelCase","~$shadow.arborist.attributes/wrap-stop","~$cljs.core/vector?","~$shadow.arborist.attributes.goog$module$goog$object.set","~$cljs.core/reduce","~$cljs.core/Keyword","~$cljs.core/vreset!","~$cljs.core/not=","~$js/shadow.arborist.attributes.attr-handlers","~$shadow.arborist.protocols/validate-dom-event-value!","~$shadow.arborist.attributes/set-attr","~$cljs.core/contains?","~$cljs.core/map?","~$shadow.arborist.attributes/set-dom-attribute","~$shadow.arborist.attributes/set-style-property","~$cljs.core/fn?","~$shadow.arborist.attributes/dom-attribute?","~$shadow.arborist.attributes/merge-attrs","~$shadow.arborist.attributes/add-attr","~$cljs.core/get","~$shadow.arborist.attributes/wrap-stop!","~$shadow.arborist.attributes/make-attr-handler","~$cljs.core/ex-info","~$js/shadow.arborist","~$cljs.core/-name","~$shadow.arborist.attributes.goog$module$goog$object.get","~$js/goog.DEBUG","~$shadow.arborist.protocols/handle-dom-event!","~$cljs.core/not","~$cljs.core/reduce-kv","~$js/shadow","~$js/shadow.arborist.attributes","~$goog.functions/debounce","~$shadow.arborist.attributes/set-attrs","~$shadow.arborist.attributes/attr-handlers","~$cljs.core/subs","~$shadow.arborist.attributes/wrap-prevent-default","~$js/Error","~$shadow.arborist.attributes/vec->class"]]],"~:cache-keys",["~#cmap",[["^17","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^17","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","~$goog.array","^R","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^17","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2J"]]],["^17","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K"]]],["^17","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","shadow/arborist/protocols.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^P"]]],["^17","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K"]]],"~:SHADOW-TIMESTAMP",[1693915017000,1693915017000,1667395541000],["^17","shadow/arborist/attributes.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^P","^R","^N","^L","^U","^M"]]],["^17","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K","~$goog.reflect"]]],["^17","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K","~$goog.fs.blob","^2L","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2N","^2O","^2P","^2Q"]]],["^17","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2P","~$goog.html.SafeUrl","^2Q","^2K","^2J"]]],["^17","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K","~$goog.dom.asserts","^L","~$goog.html.SafeHtml","^2U","~$goog.html.SafeStyle","^2W","^2M","~$goog.html.uncheckedconversions","^2P","^2J"]]],["^17","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2P","^2N","^2O","^2U","^2Z","~$goog.html.SafeStyleSheet","^2W","~$goog.dom.TagName","^2M","^2Q","^2K","~$goog.labs.userAgent.browser","^2H","^R","^2J","~$goog.dom.tags","^2V"]]],["^17","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^R"]]],["^17","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2H","^2K","~$goog.collections.maps","^N","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",[]]],["^17","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2H","^R"]]],["^17","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^P","^N","~$goog.string.StringBuffer"]]],["^17","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","~$goog.dom.safe","^2[","^2P","^2J"]]],["^17","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","~$goog.labs.userAgent","^2J"]]],["^17","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K","^2Y","^2U","^2Z","^30","^2W","^2M","^2P","^2J","^2N"]]],["^17","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S"]]],["^17","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","~$goog.math.Long","~$goog.math.Integer","^N","^R","^2H","~$goog.Uri","^3;"]]],["^17","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2P","^2Q","^2V","^2K"]]],["^17","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2P","^2Z","^2Q","^R","^2K","^2J"]]],["^17","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2S"]]],["^17","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K","^N"]]],["^17","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2C",["^ ","^2D",null,"^2E",["^D",[]],"^2F",["^S","^2K","^2Q"]]]]],"~:clj-info",["^ ","jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1667395541000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",1,"^8",5,"^9",1,"^:",31],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^G",["^ "],"^J",null,"^K",["^ ","^L","^L","~$p","^M","^N","^N","^M","^M","^O","^L","^P","^P","^Q","^R","^S","^S","^R","^R","^T","^U","^U","^U","^V","^N"],"^W",["^D",["^X"]],"~:shadow/js-access-global",["^D",["Error"]],"^Y",null,"~:defs",["^ ","~$map->class",["^ ","~:protocol-inline",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",27,"^8",7,"^9",27,"^:",17,"~:arglists",["^10",["~$quote",["^10",[["~$m"]]]]]],"^E","^1E","^6","shadow/arborist/attributes.cljs","^:",17,"~:method-params",["^10",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",27,"~:ret-tag",["^D",[null,"~$any"]],"^9",27,"~:max-fixed-arity",1,"~:fn-var",true,"^48",["^10",["^49",["^10",[["~$m"]]]]]],"~$set-dom-attribute",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",51,"^8",7,"^9",51,"^:",24,"^48",["^10",["^49",["^10",[["~$node","~$prop-name","~$nval"]]]]]],"^E","^1S","^6","shadow/arborist/attributes.cljs","^:",24,"^4:",["^10",[["^4C","^4D","^4E"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",51,"^4>","~$js","^9",51,"^4@",3,"^4A",true,"^48",["^10",["^49",["^10",[["^4C","^4D","^4E"]]]]]],"~$wrap-stop",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",87,"^8",7,"^9",87,"^:",16,"^48",["^10",["^49",["^10",[["~$target"]]]]]],"^E","^1G","^6","shadow/arborist/attributes.cljs","^:",16,"^4:",["^10",[["^4H"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",87,"^4>","~$function","^9",87,"^4@",1,"^4A",true,"^48",["^10",["^49",["^10",[["^4H"]]]]]],"~$set-attr",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",224,"^8",7,"^9",224,"^:",15,"^48",["^10",["^49",["^10",[["~$env","^4C","~$key","~$oval","^4E"]]]]]],"^E","^1P","^6","shadow/arborist/attributes.cljs","^:",15,"^4:",["^10",[["^4K","^4C","^4L","^4M","^4E"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",224,"^4>","^4?","^9",224,"^4@",5,"^4A",true,"^48",["^10",["^49",["^10",[["^4K","^4C","^4L","^4M","^4E"]]]]]],"~$set-style-property",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",76,"^8",7,"^9",76,"^:",25,"^48",["^10",["^49",["^10",[["^4C","^4D","^4E"]]]]]],"^E","^1T","^6","shadow/arborist/attributes.cljs","^:",25,"^4:",["^10",[["^4C","^4D","^4E"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",76,"^4>","^4F","^9",76,"^4@",3,"^4A",true,"^48",["^10",["^49",["^10",[["^4C","^4D","^4E"]]]]]],"~$dom-attribute?",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",47,"^8",7,"^9",47,"^:",21,"^48",["^10",["^49",["^10",[["~$name"]]]]]],"^E","^1V","^6","shadow/arborist/attributes.cljs","^:",21,"^4:",["^10",[["^4P"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",47,"^4>","~$boolean","^9",47,"^4@",1,"^4A",true,"^48",["^10",["^49",["^10",[["^4P"]]]]]],"~$merge-attrs",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",308,"^8",7,"^9",308,"^:",18,"^48",["^10",["^49",["^10",[["^4K","^4C","~$old","~$new"]]]]],"~:doc","merge attributes from old/new attr maps"],"^E","^1W","^6","shadow/arborist/attributes.cljs","^:",18,"^4:",["^10",[["^4K","^4C","^4S","^4T"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",308,"^4>",["^D",[null,"^4?"]],"^9",308,"^4@",4,"^4A",true,"^48",["^10",["^49",["^10",[["^4K","^4C","^4S","^4T"]]]]],"^4U","merge attributes from old/new attr maps"],"~$add-attr",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",42,"^8",7,"^9",42,"^:",15,"^48",["^10",["^49",["^10",[["~$kw","~$handler"]]]]]],"^E","^1X","^6","shadow/arborist/attributes.cljs","^:",15,"^4:",["^10",[["^4W","^4X"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",42,"^4>","^4F","^9",42,"^4@",2,"^4A",true,"^48",["^10",["^49",["^10",[["^4W","^4X"]]]]]],"~$wrap-stop!",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",81,"^8",7,"^9",81,"^:",17,"^48",["^10",["^49",["^10",[["^4H"]]]]]],"^E","^1Z","^6","shadow/arborist/attributes.cljs","^:",17,"^4:",["^10",[["^4H"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",81,"^4>","^4I","^9",81,"^4@",1,"^4A",true,"^48",["^10",["^49",["^10",[["^4H"]]]]]],"~$make-attr-handler",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",97,"^8",7,"^9",97,"^:",24,"^48",["^10",["^49",["^10",[["^4L"]]]]]],"^E","^1[","^6","shadow/arborist/attributes.cljs","^:",24,"^4:",["^10",[["^4L"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",97,"^4>","^4I","^9",97,"^4@",1,"^4A",true,"^48",["^10",["^49",["^10",[["^4L"]]]]]],"~$wrap-prevent-default",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",92,"^8",7,"^9",92,"^:",27,"^48",["^10",["^49",["^10",[["^4H"]]]]]],"^E","^2>","^6","shadow/arborist/attributes.cljs","^:",27,"^4:",["^10",[["^4H"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",92,"^4>","^4I","^9",92,"^4@",1,"^4A",true,"^48",["^10",["^49",["^10",[["^4H"]]]]]],"~$vec->class",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",12,"^8",7,"^9",12,"^:",17,"^48",["^10",["^49",["^10",[["~$v"]]]]]],"^E","^2@","^6","shadow/arborist/attributes.cljs","^:",17,"^4:",["^10",[["~$v"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",12,"^4>",["^D",[null,"^4?"]],"^9",12,"^4@",1,"^4A",true,"^48",["^10",["^49",["^10",[["~$v"]]]]]],"~$set-attrs",["^ ","^47",null,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",329,"^8",7,"^9",329,"^:",16,"^48",["^10",["^49",["^10",[["^4K","^4C","~$attrs"]]]]],"^4U","initial set attributes from key/val map"],"^E","^2;","^6","shadow/arborist/attributes.cljs","^:",16,"^4:",["^10",[["^4K","^4C","^52"]]],"^4;",null,"^4<",["^10",[null,null]],"^8",1,"^4=",false,"^7",329,"^4>",["^D",[null,"^4?"]],"^9",329,"^4@",3,"^4A",true,"^48",["^10",["^49",["^10",[["^4K","^4C","^52"]]]]],"^4U","initial set attributes from key/val map"],"~$attr-handlers",["^ ","^E","^2<","^6","shadow/arborist/attributes.cljs","^7",10,"^8",1,"^9",10,"^:",23,"^5",["^ ","^6","shadow/arborist/attributes.cljs","^7",10,"^8",10,"^9",10,"^:",23],"~:tag","~$object"]],"^Z",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^W",["^D",["~:e/prevent-default","~:e/rate-limit","~:dom/ref","~:else","~:e/capture","~:e/stop!","~:value","~:shadow.arborist.protocols/dom-event-handler","~:e/passive","~:val","~:env","~:node","~:empty","~:style","~:for","~:event","~:e/throttle","~:class","~:e/stop","~:dom/svg","~:e/once","~:e/debounce","~:e/signal","~:attr"]],"~:order",["^5:","^5N","^5>","^5A","^5F","^5B","^5=","^5;","^5M","^57","^58","^5L","^5<","^5?","^5I","^5K","^5G","^5J","^5E","^5D","^5C","^5@","^5H","^59"]],"^13",["^ ","^X",["^D",[]]],"^14",["^ "],"^15",["^S","^P","^R","^N","^L","^U","^M"]],"^I","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2B",[["^5R","~:static-fns"],true,["^5R","~:shadow-tweaks"],null,["^5R","~:source-map-inline"],null,["^5R","~:elide-asserts"],false,["^5R","~:optimize-constants"],null,["^5R","^1:"],null,["^5R","~:external-config"],null,["^5R","~:tooling-config"],null,["^5R","~:emit-constants"],null,["^5R","~:load-tests"],null,["^5R","~:form-size-threshold"],null,["^5R","~:global-goog-object&array"],null,["^5R","~:data-readers"],null,["^5R","~:infer-externs"],"~:auto",["^5R","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5R","~:fn-invoke-direct"],null,["^5R","~:source-map"],"/dev/null"]]]