["^ ","~:output",["^ ","~:js","goog.provide('shadow.grove.impl');\nshadow.grove.impl.js_set_union = (function shadow$grove$impl$js_set_union(a,b){\nreturn b.forEach((function (x){\nreturn a.add(x);\n}));\n});\nshadow.grove.impl.work_queue_task_BANG_ = (cljs.core.truth_(window.requestIdleCallback)?(function (work_task){\nreturn window.requestIdleCallback(work_task);\n}):(function (work_task){\nreturn setTimeout((function (){\nvar start = Date.now();\nvar fake_deadline = ({\"timeRemaining\": (function (){\nreturn ((16) < (Date.now() - start));\n})});\nreturn work_task(fake_deadline);\n}),(0));\n}));\nshadow.grove.impl.work_queue_cancel_BANG_ = (cljs.core.truth_(window.cancelIdleCallback)?(function (id){\nreturn window.cancelIdleCallback(id);\n}):(function (id){\nreturn clearTimeout(id);\n}));\nif((typeof shadow !== 'undefined') && (typeof shadow.grove !== 'undefined') && (typeof shadow.grove.impl !== 'undefined') && (typeof shadow.grove.impl.index_queue !== 'undefined')){\n} else {\nshadow.grove.impl.index_queue = (new Array());\n}\nif((typeof shadow !== 'undefined') && (typeof shadow.grove !== 'undefined') && (typeof shadow.grove.impl !== 'undefined') && (typeof shadow.grove.impl.work_queued_QMARK_ !== 'undefined')){\n} else {\nshadow.grove.impl.work_queued_QMARK_ = false;\n}\nif((typeof shadow !== 'undefined') && (typeof shadow.grove !== 'undefined') && (typeof shadow.grove.impl !== 'undefined') && (typeof shadow.grove.impl.work_timeout !== 'undefined')){\n} else {\nshadow.grove.impl.work_timeout = null;\n}\nshadow.grove.impl.index_work_all_BANG_ = (function shadow$grove$impl$index_work_all_BANG_(){\nif(shadow.grove.impl.work_queued_QMARK_){\nif(cljs.core.truth_(shadow.grove.impl.work_timeout)){\nshadow.grove.impl.work_queue_cancel_BANG_(shadow.grove.impl.work_timeout);\n\n(shadow.grove.impl.work_timeout = null);\n} else {\n}\n\nwhile(true){\nvar task_12780 = shadow.grove.impl.index_queue.shift();\nif(task_12780){\ntask_12780();\n\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn (shadow.grove.impl.work_queued_QMARK_ = false);\n} else {\nreturn null;\n}\n});\nshadow.grove.impl.index_work_some_BANG_ = (function shadow$grove$impl$index_work_some_BANG_(deadline){\nwhile(true){\nif((deadline.timeRemaining() > (0))){\nvar task_12781 = shadow.grove.impl.index_queue.shift();\nif(task_12781){\ntask_12781();\n\ncontinue;\n} else {\n}\n} else {\n}\nbreak;\n}\n\nif((shadow.grove.impl.index_queue.length > (0))){\n(shadow.grove.impl.work_timeout = shadow.grove.impl.work_queue_task_BANG_(shadow.grove.impl.index_work_some_BANG_));\n\nreturn (shadow.grove.impl.work_queued_QMARK_ = true);\n} else {\n(shadow.grove.impl.work_timeout = null);\n\nreturn (shadow.grove.impl.work_queued_QMARK_ = false);\n}\n});\nshadow.grove.impl.index_queue_some_BANG_ = (function shadow$grove$impl$index_queue_some_BANG_(){\nif(shadow.grove.impl.work_queued_QMARK_){\nreturn null;\n} else {\n(shadow.grove.impl.work_timeout = shadow.grove.impl.work_queue_task_BANG_(shadow.grove.impl.index_work_some_BANG_));\n\nreturn (shadow.grove.impl.work_queued_QMARK_ = true);\n}\n});\nshadow.grove.impl.index_query_STAR_ = (function shadow$grove$impl$index_query_STAR_(p__12602,query_id,prev_keys,next_keys){\nvar map__12603 = p__12602;\nvar map__12603__$1 = cljs.core.__destructure_map(map__12603);\nvar active_queries_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12603__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"active-queries-map\",\"shadow.grove.runtime/active-queries-map\",-592199771));\nvar key_index_seq = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12603__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"key-index-seq\",\"shadow.grove.runtime/key-index-seq\",1103349112));\nvar key_index_ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12603__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"key-index-ref\",\"shadow.grove.runtime/key-index-ref\",-1341451448));\nvar query_index_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12603__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"query-index-map\",\"shadow.grove.runtime/query-index-map\",1244541445));\nif(cljs.core.truth_(active_queries_map.has(query_id))){\nvar key_index = cljs.core.deref(key_index_ref);\ncljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (_,key){\nif(cljs.core.contains_QMARK_(prev_keys,key)){\n} else {\nvar key_idx_12782 = (function (){var or__5045__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(key_index,key);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar idx = cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(key_index_seq,cljs.core.inc);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(key_index_ref,cljs.core.assoc,key,idx);\n\nreturn idx;\n}\n})();\nvar query_set_12783 = (function (){var or__5045__auto__ = query_index_map.get(key_idx_12782);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar query_set_12783 = (new Set());\nquery_index_map.set(key_idx_12782,query_set_12783);\n\nreturn query_set_12783;\n}\n})();\nquery_set_12783.add(query_id);\n}\n\nreturn null;\n}),null,next_keys);\n\nif(cljs.core.truth_(prev_keys)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (_,key){\nif(cljs.core.contains_QMARK_(next_keys,key)){\nreturn null;\n} else {\nvar key_idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(key_index,key);\nvar query_set = query_index_map.get(key_idx);\nif(query_set){\nreturn query_set.delete(query_id);\n} else {\nreturn null;\n}\n}\n}),null,prev_keys);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nshadow.grove.impl.index_query = (function shadow$grove$impl$index_query(env,query_id,prev_keys,next_keys){\nshadow.grove.impl.index_queue.push((function (){\nreturn shadow.grove.impl.index_query_STAR_(env,query_id,prev_keys,next_keys);\n}));\n\nreturn shadow.grove.impl.index_queue_some_BANG_();\n});\nshadow.grove.impl.unindex_query_STAR_ = (function shadow$grove$impl$unindex_query_STAR_(p__12605,query_id,keys){\nvar map__12606 = p__12605;\nvar map__12606__$1 = cljs.core.__destructure_map(map__12606);\nvar key_index_seq = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12606__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"key-index-seq\",\"shadow.grove.runtime/key-index-seq\",1103349112));\nvar key_index_ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12606__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"key-index-ref\",\"shadow.grove.runtime/key-index-ref\",-1341451448));\nvar query_index_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12606__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"query-index-map\",\"shadow.grove.runtime/query-index-map\",1244541445));\nvar key_index = cljs.core.deref(key_index_ref);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (_,key){\nvar key_idx = (function (){var or__5045__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(key_index,key);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar idx = cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(key_index_seq,cljs.core.inc);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(key_index_ref,cljs.core.assoc,key,idx);\n\nreturn idx;\n}\n})();\nvar temp__5808__auto__ = query_index_map.get(key_idx);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar query_set = temp__5808__auto__;\nreturn query_set.delete(query_id);\n}\n}),null,keys);\n});\nshadow.grove.impl.unindex_query = (function shadow$grove$impl$unindex_query(env,query_id,keys){\nshadow.grove.impl.index_queue.push((function (){\nreturn shadow.grove.impl.unindex_query_STAR_(env,query_id,keys);\n}));\n\nreturn shadow.grove.impl.index_queue_some_BANG_();\n});\nshadow.grove.impl.invalidate_keys_BANG_ = (function shadow$grove$impl$invalidate_keys_BANG_(p__12608,keys_new,keys_removed,keys_updated){\nvar map__12609 = p__12608;\nvar map__12609__$1 = cljs.core.__destructure_map(map__12609);\nvar env = map__12609__$1;\nvar active_queries_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12609__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"active-queries-map\",\"shadow.grove.runtime/active-queries-map\",-592199771));\nvar query_index_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12609__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"query-index-map\",\"shadow.grove.runtime/query-index-map\",1244541445));\nvar key_index_ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12609__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"key-index-ref\",\"shadow.grove.runtime/key-index-ref\",-1341451448));\nshadow.grove.impl.index_work_all_BANG_();\n\nvar keys_to_invalidate = clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(keys_new,keys_updated,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([keys_removed], 0));\nvar key_index = cljs.core.deref(key_index_ref);\nvar query_ids = (new Set());\ncljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (_,key){\nvar temp__5808__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(key_index,key);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar key_id = temp__5808__auto__;\nvar temp__5808__auto____$1 = query_index_map.get(key_id);\nif((temp__5808__auto____$1 == null)){\nreturn null;\n} else {\nvar query_set = temp__5808__auto____$1;\nreturn shadow.grove.impl.js_set_union(query_ids,query_set);\n}\n}\n}),null,keys_to_invalidate);\n\nreturn query_ids.forEach((function (query_id){\nvar temp__5808__auto__ = active_queries_map.get(query_id);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar query = temp__5808__auto__;\nreturn shadow.grove.protocols.query_refresh_BANG_(query);\n}\n}));\n});\nshadow.grove.impl.merge_result = (function shadow$grove$impl$merge_result(tx_env,ev,result){\nif((result == null)){\nreturn tx_env;\n} else {\nif((!(cljs.core.map_QMARK_(result)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"tx handler returned invalid result for event \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"e\",\"e\",1381269198).cljs$core$IFn$_invoke$arity$1(ev))].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"event\",\"event\",301435442),ev,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),tx_env,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result], null));\n} else {\nif((new cljs.core.Keyword(\"shadow.grove.impl\",\"tx-guard\",\"shadow.grove.impl/tx-guard\",1063602673).cljs$core$IFn$_invoke$arity$1(tx_env) === new cljs.core.Keyword(\"shadow.grove.impl\",\"tx-guard\",\"shadow.grove.impl/tx-guard\",1063602673).cljs$core$IFn$_invoke$arity$1(result))){\nreturn result;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"tx handler returned invalid result for event\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"e\",\"e\",1381269198).cljs$core$IFn$_invoke$arity$1(ev)),\", expected a modified env\"].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"event\",\"event\",301435442),ev,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),tx_env,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result], null));\n\n}\n}\n}\n});\nshadow.grove.impl.unhandled_event_ex_BANG_ = (function shadow$grove$impl$unhandled_event_ex_BANG_(ev_id,tx,origin){\nif(cljs.core.truth_((function (){var and__5043__auto__ = goog.DEBUG;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.map_QMARK_(origin);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar comp = shadow.grove.components.get_component(origin);\nvar err_msg = [\"Unhandled Event \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ev_id),\"\\n    Component Trace:\"].join('');\nwhile(true){\nif(cljs.core.not(comp)){\nconsole.error(err_msg);\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Unhandled Event \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ev_id)].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"ev-id\",\"ev-id\",1383435917),ev_id,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx,new cljs.core.Keyword(null,\"origin\",\"origin\",1037372088),origin], null));\n} else {\nvar G__12785 = shadow.grove.components.get_parent(comp);\nvar G__12786 = [err_msg,\"\\n    \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(shadow.grove.components.get_component_name(comp))].join('');\ncomp = G__12785;\nerr_msg = G__12786;\ncontinue;\n}\nbreak;\n}\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Unhandled Event \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ev_id)].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ev-id\",\"ev-id\",1383435917),ev_id,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx], null));\n}\n});\nshadow.grove.impl.process_event = (function shadow$grove$impl$process_event(rt_ref,p__12631,origin){\nvar map__12632 = p__12631;\nvar map__12632__$1 = cljs.core.__destructure_map(map__12632);\nvar ev = map__12632__$1;\nvar ev_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12632__$1,new cljs.core.Keyword(null,\"e\",\"e\",1381269198));\nif(cljs.core.map_QMARK_(ev)){\n} else {\nthrow (new Error(\"Assert failed: (map? ev)\"));\n}\n\nif((ev_id instanceof cljs.core.Keyword)){\n} else {\nthrow (new Error(\"Assert failed: (keyword? ev-id)\"));\n}\n\nvar map__12661 = cljs.core.deref(rt_ref);\nvar map__12661__$1 = cljs.core.__destructure_map(map__12661);\nvar env = map__12661__$1;\nvar data_ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12661__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"data-ref\",\"shadow.grove.runtime/data-ref\",-1688628375));\nvar event_config = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12661__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"event-config\",\"shadow.grove.runtime/event-config\",-570686649));\nvar fx_config = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12661__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"fx-config\",\"shadow.grove.runtime/fx-config\",-254676192));\nvar handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(event_config,ev_id);\nif(cljs.core.not(handler)){\nreturn shadow.grove.impl.unhandled_event_ex_BANG_(ev_id,ev,origin);\n} else {\nvar before = cljs.core.deref(data_ref);\nvar tx_db = shadow.grove.db.transacted(before);\nvar tx_guard = (new Object());\nvar tx_done_ref = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(false);\nvar tx_env = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(env,new cljs.core.Keyword(\"shadow.grove.impl\",\"tx-guard\",\"shadow.grove.impl/tx-guard\",1063602673),tx_guard,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"shadow.grove.impl\",\"fx\",\"shadow.grove.impl/fx\",1762490997),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"db\",\"db\",993250759),tx_db,new cljs.core.Keyword(null,\"transact!\",\"transact!\",-822725810),(function (next_tx){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"transact! only allowed from fx env\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),next_tx], null));\n})], 0));\nvar result = shadow.grove.impl.merge_result(tx_env,ev,(handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(tx_env,ev) : handler.call(null,tx_env,ev)));\nvar map__12663 = shadow.grove.db.commit_BANG_(new cljs.core.Keyword(null,\"db\",\"db\",993250759).cljs$core$IFn$_invoke$arity$1(result));\nvar map__12663__$1 = cljs.core.__destructure_map(map__12663);\nvar tx_result = map__12663__$1;\nvar data = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12663__$1,new cljs.core.Keyword(null,\"data\",\"data\",-232669377));\nvar keys_new = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12663__$1,new cljs.core.Keyword(null,\"keys-new\",\"keys-new\",546185618));\nvar keys_removed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12663__$1,new cljs.core.Keyword(null,\"keys-removed\",\"keys-removed\",-110314827));\nvar keys_updated = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12663__$1,new cljs.core.Keyword(null,\"keys-updated\",\"keys-updated\",1209111301));\nif((cljs.core.deref(data_ref) === before)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"someone messed with app-state while in tx\",cljs.core.PersistentArrayMap.EMPTY);\n}\n\ncljs.core.reset_BANG_(data_ref,data);\n\nif((before === data)){\n} else {\nshadow.grove.impl.invalidate_keys_BANG_(env,keys_new,keys_removed,keys_updated);\n}\n\nshadow.grove.runtime.next_tick((function (){\nvar seq__12667 = cljs.core.seq(new cljs.core.Keyword(\"shadow.grove.runtime\",\"fx\",\"shadow.grove.runtime/fx\",-472553621).cljs$core$IFn$_invoke$arity$1(result));\nvar chunk__12668 = null;\nvar count__12669 = (0);\nvar i__12670 = (0);\nwhile(true){\nif((i__12670 < count__12669)){\nvar vec__12712 = chunk__12668.cljs$core$IIndexed$_nth$arity$2(null,i__12670);\nvar fx_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12712,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12712,(1),null);\nvar fx_fn_12793 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(fx_config,fx_key);\nvar fx_env_12794 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,new cljs.core.Keyword(null,\"transact!\",\"transact!\",-822725810),((function (seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12793,vec__12712,fx_key,value,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id){\nreturn (function (fx_tx){\nif(cljs.core.truth_(cljs.core.deref(tx_done_ref))){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"cannot start another tx yet, current one is still running. transact! is meant for async events\",cljs.core.PersistentArrayMap.EMPTY);\n}\n\nreturn new cljs.core.Keyword(\"shadow.grove.runtime\",\"scheduler\",\"shadow.grove.runtime/scheduler\",-1004241009).cljs$core$IFn$_invoke$arity$1(env).shadow$grove$protocols$IScheduleWork$run_now_BANG_$arity$3(null,((function (seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12793,vec__12712,fx_key,value,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id){\nreturn (function (){\nreturn (shadow.grove.impl.process_event.cljs$core$IFn$_invoke$arity$3 ? shadow.grove.impl.process_event.cljs$core$IFn$_invoke$arity$3(rt_ref,fx_tx,origin) : shadow.grove.impl.process_event.call(null,rt_ref,fx_tx,origin));\n});})(seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12793,vec__12712,fx_key,value,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id))\n,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"shadow.grove.impl\",\"fx-transact!\",\"shadow.grove.impl/fx-transact!\",-1363650860),fx_key], null));\n});})(seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12793,vec__12712,fx_key,value,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id))\n);\nif(cljs.core.not(fx_fn_12793)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"unknown fx \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(fx_key)].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"fx-key\",\"fx-key\",-516894324),fx_key,new cljs.core.Keyword(null,\"fx-value\",\"fx-value\",-522086181),value], null));\n} else {\n(fx_fn_12793.cljs$core$IFn$_invoke$arity$2 ? fx_fn_12793.cljs$core$IFn$_invoke$arity$2(fx_env_12794,value) : fx_fn_12793.call(null,fx_env_12794,value));\n}\n\n\nvar G__12798 = seq__12667;\nvar G__12799 = chunk__12668;\nvar G__12800 = count__12669;\nvar G__12801 = (i__12670 + (1));\nseq__12667 = G__12798;\nchunk__12668 = G__12799;\ncount__12669 = G__12800;\ni__12670 = G__12801;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__12667);\nif(temp__5804__auto__){\nvar seq__12667__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__12667__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__12667__$1);\nvar G__12803 = cljs.core.chunk_rest(seq__12667__$1);\nvar G__12804 = c__5568__auto__;\nvar G__12805 = cljs.core.count(c__5568__auto__);\nvar G__12806 = (0);\nseq__12667 = G__12803;\nchunk__12668 = G__12804;\ncount__12669 = G__12805;\ni__12670 = G__12806;\ncontinue;\n} else {\nvar vec__12720 = cljs.core.first(seq__12667__$1);\nvar fx_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12720,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12720,(1),null);\nvar fx_fn_12812 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(fx_config,fx_key);\nvar fx_env_12813 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,new cljs.core.Keyword(null,\"transact!\",\"transact!\",-822725810),((function (seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12812,vec__12720,fx_key,value,seq__12667__$1,temp__5804__auto__,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id){\nreturn (function (fx_tx){\nif(cljs.core.truth_(cljs.core.deref(tx_done_ref))){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"cannot start another tx yet, current one is still running. transact! is meant for async events\",cljs.core.PersistentArrayMap.EMPTY);\n}\n\nreturn new cljs.core.Keyword(\"shadow.grove.runtime\",\"scheduler\",\"shadow.grove.runtime/scheduler\",-1004241009).cljs$core$IFn$_invoke$arity$1(env).shadow$grove$protocols$IScheduleWork$run_now_BANG_$arity$3(null,((function (seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12812,vec__12720,fx_key,value,seq__12667__$1,temp__5804__auto__,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id){\nreturn (function (){\nreturn (shadow.grove.impl.process_event.cljs$core$IFn$_invoke$arity$3 ? shadow.grove.impl.process_event.cljs$core$IFn$_invoke$arity$3(rt_ref,fx_tx,origin) : shadow.grove.impl.process_event.call(null,rt_ref,fx_tx,origin));\n});})(seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12812,vec__12720,fx_key,value,seq__12667__$1,temp__5804__auto__,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id))\n,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"shadow.grove.impl\",\"fx-transact!\",\"shadow.grove.impl/fx-transact!\",-1363650860),fx_key], null));\n});})(seq__12667,chunk__12668,count__12669,i__12670,fx_fn_12812,vec__12720,fx_key,value,seq__12667__$1,temp__5804__auto__,map__12663,map__12663__$1,tx_result,data,keys_new,keys_removed,keys_updated,before,tx_db,tx_guard,tx_done_ref,tx_env,result,map__12661,map__12661__$1,env,data_ref,event_config,fx_config,handler,map__12632,map__12632__$1,ev,ev_id))\n);\nif(cljs.core.not(fx_fn_12812)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"unknown fx \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(fx_key)].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"fx-key\",\"fx-key\",-516894324),fx_key,new cljs.core.Keyword(null,\"fx-value\",\"fx-value\",-522086181),value], null));\n} else {\n(fx_fn_12812.cljs$core$IFn$_invoke$arity$2 ? fx_fn_12812.cljs$core$IFn$_invoke$arity$2(fx_env_12813,value) : fx_fn_12812.call(null,fx_env_12813,value));\n}\n\n\nvar G__12827 = cljs.core.next(seq__12667__$1);\nvar G__12828 = null;\nvar G__12829 = (0);\nvar G__12830 = (0);\nseq__12667 = G__12827;\nchunk__12668 = G__12828;\ncount__12669 = G__12829;\ni__12670 = G__12830;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\nvar temp__5808__auto___12831 = new cljs.core.Keyword(\"shadow.grove.runtime\",\"tx-reporter\",\"shadow.grove.runtime/tx-reporter\",-1162168653).cljs$core$IFn$_invoke$arity$1(env);\nif((temp__5808__auto___12831 == null)){\n} else {\nvar tx_reporter_12834 = temp__5808__auto___12831;\nshadow.grove.runtime.next_tick((function (){\nvar report = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"keys-updated\",\"keys-updated\",1209111301),new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),new cljs.core.Keyword(null,\"keys-new\",\"keys-new\",546185618),new cljs.core.Keyword(null,\"event\",\"event\",301435442),new cljs.core.Keyword(null,\"env-changes\",\"env-changes\",-1574460812),new cljs.core.Keyword(null,\"keys-removed\",\"keys-removed\",-110314827),new cljs.core.Keyword(null,\"origin\",\"origin\",1037372088),new cljs.core.Keyword(null,\"fx\",\"fx\",-1237829572)],[keys_updated,data,env,before,keys_new,ev,cljs.core.reduce_kv((function (report,rkey,rval){\nif((rval === cljs.core.get.cljs$core$IFn$_invoke$arity$2(env,rkey))){\nreturn report;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(report,rkey,rval);\n}\n}),cljs.core.PersistentArrayMap.EMPTY,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(result,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"shadow.grove.runtime\",\"fx\",\"shadow.grove.runtime/fx\",-472553621),new cljs.core.Keyword(\"shadow.grove.impl\",\"tx-guard\",\"shadow.grove.impl/tx-guard\",1063602673),new cljs.core.Keyword(null,\"transact!\",\"transact!\",-822725810)], 0))),keys_removed,origin,new cljs.core.Keyword(\"shadow.grove.runtime\",\"fx\",\"shadow.grove.runtime/fx\",-472553621).cljs$core$IFn$_invoke$arity$1(result)]);\nreturn (tx_reporter_12834.cljs$core$IFn$_invoke$arity$1 ? tx_reporter_12834.cljs$core$IFn$_invoke$arity$1(report) : tx_reporter_12834.call(null,report));\n}));\n}\n\ncljs.core.reset_BANG_(tx_done_ref,true);\n\nreturn new cljs.core.Keyword(null,\"return\",\"return\",-1891502105).cljs$core$IFn$_invoke$arity$1(result);\n}\n});\n\n/**\n* @constructor\n * @implements {shadow.grove.protocols.IQuery}\n * @implements {shadow.grove.protocols.IHook}\n*/\nshadow.grove.impl.HookQuery = (function (ident,query,config,component_handle,rt_ref,active_queries_map,query_id,ready_QMARK_,read_count,read_keys,read_result){\nthis.ident = ident;\nthis.query = query;\nthis.config = config;\nthis.component_handle = component_handle;\nthis.rt_ref = rt_ref;\nthis.active_queries_map = active_queries_map;\nthis.query_id = query_id;\nthis.ready_QMARK_ = ready_QMARK_;\nthis.read_count = read_count;\nthis.read_keys = read_keys;\nthis.read_result = read_result;\n});\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$hook_init_BANG_$arity$2 = (function (this$,ch){\nvar self__ = this;\nvar this$__$1 = this;\n(self__.component_handle = ch);\n\nvar env_12839 = shadow.grove.protocols.get_component_env(ch);\n(self__.rt_ref = new cljs.core.Keyword(\"shadow.grove.runtime\",\"runtime-ref\",\"shadow.grove.runtime/runtime-ref\",252005090).cljs$core$IFn$_invoke$arity$1(env_12839));\n\n(self__.active_queries_map = new cljs.core.Keyword(\"shadow.grove.runtime\",\"active-queries-map\",\"shadow.grove.runtime/active-queries-map\",-592199771).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.rt_ref)));\n\n(self__.query_id = shadow.grove.runtime.next_id());\n\nself__.active_queries_map.set(self__.query_id,this$__$1);\n\nreturn this$__$1.do_read_BANG_();\n}));\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$hook_ready_QMARK_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar or__5045__auto__ = self__.ready_QMARK_;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"suspend\",\"suspend\",849690959).cljs$core$IFn$_invoke$arity$1(self__.config) === false;\n}\n}));\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$hook_value$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.read_result;\n}));\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$hook_deps_update_BANG_$arity$2 = (function (this$,val){\nvar self__ = this;\nvar this$__$1 = this;\nvar new_ident = val.ident;\nvar ident_equal_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.ident,new_ident);\nif(((ident_equal_QMARK_) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.query,val.query)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.config,val.config)))))){\nreturn false;\n} else {\nif(ident_equal_QMARK_){\n} else {\n(self__.read_count = (0));\n}\n\n(self__.ident = new_ident);\n\n(self__.query = val.query);\n\n(self__.config = val.config);\n\nvar old_result = self__.read_result;\nthis$__$1.do_read_BANG_();\n\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_result,self__.read_result);\n}\n}));\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$hook_update_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar old_result = self__.read_result;\nthis$__$1.do_read_BANG_();\n\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_result,self__.read_result);\n}));\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IHook$hook_destroy_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nshadow.grove.impl.unindex_query(cljs.core.deref(self__.rt_ref),self__.query_id,self__.read_keys);\n\nreturn self__.active_queries_map.delete(self__.query_id);\n}));\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IQuery$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.grove.impl.HookQuery.prototype.shadow$grove$protocols$IQuery$query_refresh_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.component_handle.shadow$grove$protocols$IComponentHookHandle$hook_invalidate_BANG_$arity$1(null);\n}));\n\n(shadow.grove.impl.HookQuery.prototype.do_read_BANG_ = (function (){\nvar self__ = this;\nvar this$ = this;\nvar query_env_12891 = cljs.core.deref(self__.rt_ref);\nvar db_12892 = cljs.core.deref(new cljs.core.Keyword(\"shadow.grove.runtime\",\"data-ref\",\"shadow.grove.runtime/data-ref\",-1688628375).cljs$core$IFn$_invoke$arity$1(query_env_12891));\nif(cljs.core.truth_((function (){var and__5043__auto__ = self__.ident;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn (self__.query == null);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar result_12896 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(db_12892,self__.ident);\nvar new_keys_12897 = cljs.core.PersistentHashSet.createAsIfByAssoc([self__.ident]);\nif((self__.read_count === (0))){\nshadow.grove.impl.index_query(query_env_12891,self__.query_id,self__.read_keys,new_keys_12897);\n} else {\n}\n\n(self__.read_keys = new_keys_12897);\n\nif(cljs.core.keyword_identical_QMARK_(result_12896,new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547))){\n(self__.read_result = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328).cljs$core$IFn$_invoke$arity$2(self__.config,cljs.core.PersistentArrayMap.EMPTY),new cljs.core.Keyword(\"shadow.grove\",\"loading-state\",\"shadow.grove/loading-state\",1580027943),new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189)));\n} else {\n(self__.read_result = result_12896);\n\n(self__.ready_QMARK_ = true);\n}\n} else {\nvar observed_data_12899 = shadow.grove.db.observed(db_12892);\nvar db_query_12900 = (cljs.core.truth_(self__.ident)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([self__.ident,self__.query])], null):self__.query);\nvar result_12901 = shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$3(query_env_12891,observed_data_12899,db_query_12900);\nvar new_keys_12902 = observed_data_12899.shadow$grove$db$IObserved$observed_keys$arity$1(null);\nshadow.grove.impl.index_query(query_env_12891,self__.query_id,self__.read_keys,new_keys_12902);\n\n(self__.read_keys = new_keys_12902);\n\nif(cljs.core.keyword_identical_QMARK_(result_12901,new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547))){\n(self__.read_result = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328).cljs$core$IFn$_invoke$arity$2(self__.config,cljs.core.PersistentArrayMap.EMPTY),new cljs.core.Keyword(\"shadow.grove\",\"loading-state\",\"shadow.grove/loading-state\",1580027943),new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189)));\n} else {\n(self__.read_result = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((cljs.core.truth_(self__.ident)?cljs.core.get.cljs$core$IFn$_invoke$arity$2(result_12901,self__.ident):result_12901),new cljs.core.Keyword(\"shadow.grove\",\"loading-state\",\"shadow.grove/loading-state\",1580027943),new cljs.core.Keyword(null,\"ready\",\"ready\",1086465795)));\n\n(self__.ready_QMARK_ = true);\n}\n}\n\nreturn (self__.read_count = (self__.read_count + (1)));\n}));\n\n(shadow.grove.impl.HookQuery.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,\"ident\",\"ident\",1639789181,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"query\",\"query\",352022017,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"config\",\"config\",-1659574354,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"component-handle\",\"component-handle\",-970224254,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"not-native\",\"not-native\",-236392494,null),new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"rt-ref\",\"rt-ref\",-878707630,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"active-queries-map\",\"active-queries-map\",328438843,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"query-id\",\"query-id\",-1180306927,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"ready?\",\"ready?\",1534765830,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"read-count\",\"read-count\",-1677349293,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"read-keys\",\"read-keys\",1110378906,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"read-result\",\"read-result\",-1424981661,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null))], null);\n}));\n\n(shadow.grove.impl.HookQuery.cljs$lang$type = true);\n\n(shadow.grove.impl.HookQuery.cljs$lang$ctorStr = \"shadow.grove.impl/HookQuery\");\n\n(shadow.grove.impl.HookQuery.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.grove.impl/HookQuery\");\n}));\n\n/**\n * Positional factory function for shadow.grove.impl/HookQuery.\n */\nshadow.grove.impl.__GT_HookQuery = (function shadow$grove$impl$__GT_HookQuery(ident,query,config,component_handle,rt_ref,active_queries_map,query_id,ready_QMARK_,read_count,read_keys,read_result){\nreturn (new shadow.grove.impl.HookQuery(ident,query,config,component_handle,rt_ref,active_queries_map,query_id,ready_QMARK_,read_count,read_keys,read_result));\n});\n\nshadow.grove.impl.hook_query = (function shadow$grove$impl$hook_query(ident,query,config){\nif((((ident == null)) || (shadow.grove.db.ident_QMARK_(ident)))){\n} else {\nthrow (new Error(\"Assert failed: (or (nil? ident) (db/ident? ident))\"));\n}\n\nif((((query == null)) || (cljs.core.vector_QMARK_(query)))){\n} else {\nthrow (new Error(\"Assert failed: (or (nil? query) (vector? query))\"));\n}\n\nif(cljs.core.map_QMARK_(config)){\n} else {\nthrow (new Error(\"Assert failed: (map? config)\"));\n}\n\nreturn (new shadow.grove.impl.HookQuery(ident,query,config,null,null,null,null,false,(0),null,null));\n});\n\n/**\n* @constructor\n * @implements {shadow.grove.protocols.IQuery}\n*/\nshadow.grove.impl.DirectQuery = (function (rt_ref,query_id,query,callback,read_keys,read_result,destroyed_QMARK_){\nthis.rt_ref = rt_ref;\nthis.query_id = query_id;\nthis.query = query;\nthis.callback = callback;\nthis.read_keys = read_keys;\nthis.read_result = read_result;\nthis.destroyed_QMARK_ = destroyed_QMARK_;\n});\n(shadow.grove.impl.DirectQuery.prototype.shadow$grove$protocols$IQuery$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.grove.impl.DirectQuery.prototype.shadow$grove$protocols$IQuery$query_refresh_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif(cljs.core.truth_(self__.destroyed_QMARK_)){\nreturn null;\n} else {\nreturn this$__$1.do_read_BANG_();\n}\n}));\n\n(shadow.grove.impl.DirectQuery.prototype.do_read_BANG_ = (function (){\nvar self__ = this;\nvar this$ = this;\nvar query_env = cljs.core.deref(self__.rt_ref);\nvar observed_data = shadow.grove.db.observed(cljs.core.deref(new cljs.core.Keyword(\"shadow.grove.runtime\",\"data-ref\",\"shadow.grove.runtime/data-ref\",-1688628375).cljs$core$IFn$_invoke$arity$1(query_env)));\nvar result = shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$3(query_env,observed_data,self__.query);\nvar new_keys = observed_data.shadow$grove$db$IObserved$observed_keys$arity$1(null);\nshadow.grove.impl.index_query(query_env,self__.query_id,self__.read_keys,new_keys);\n\n(self__.read_keys = new_keys);\n\nif((((!(cljs.core.keyword_identical_QMARK_(result,new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547))))) && ((((!((result == null)))) && ((((!(cljs.core.empty_QMARK_(result)))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(result,self__.read_result)))))))){\n(self__.read_result = result);\n\nreturn (self__.callback.cljs$core$IFn$_invoke$arity$1 ? self__.callback.cljs$core$IFn$_invoke$arity$1(result) : self__.callback.call(null,result));\n} else {\nreturn null;\n}\n}));\n\n(shadow.grove.impl.DirectQuery.prototype.destroy_BANG_ = (function (){\nvar self__ = this;\nvar this$ = this;\n(self__.destroyed_QMARK_ = true);\n\nreturn shadow.grove.impl.unindex_query(cljs.core.deref(self__.rt_ref),self__.query_id,self__.read_keys);\n}));\n\n(shadow.grove.impl.DirectQuery.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rt-ref\",\"rt-ref\",-878707630,null),new cljs.core.Symbol(null,\"query-id\",\"query-id\",-1180306927,null),new cljs.core.Symbol(null,\"query\",\"query\",352022017,null),new cljs.core.Symbol(null,\"callback\",\"callback\",935395299,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"read-keys\",\"read-keys\",1110378906,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"read-result\",\"read-result\",-1424981661,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"destroyed?\",\"destroyed?\",-1604801705,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null))], null);\n}));\n\n(shadow.grove.impl.DirectQuery.cljs$lang$type = true);\n\n(shadow.grove.impl.DirectQuery.cljs$lang$ctorStr = \"shadow.grove.impl/DirectQuery\");\n\n(shadow.grove.impl.DirectQuery.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.grove.impl/DirectQuery\");\n}));\n\n/**\n * Positional factory function for shadow.grove.impl/DirectQuery.\n */\nshadow.grove.impl.__GT_DirectQuery = (function shadow$grove$impl$__GT_DirectQuery(rt_ref,query_id,query,callback,read_keys,read_result,destroyed_QMARK_){\nreturn (new shadow.grove.impl.DirectQuery(rt_ref,query_id,query,callback,read_keys,read_result,destroyed_QMARK_));\n});\n\nshadow.grove.impl.query_init = (function shadow$grove$impl$query_init(rt_ref,query_id,query,config,callback){\nvar map__12765 = cljs.core.deref(rt_ref);\nvar map__12765__$1 = cljs.core.__destructure_map(map__12765);\nvar active_queries_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12765__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"active-queries-map\",\"shadow.grove.runtime/active-queries-map\",-592199771));\nvar q = (new shadow.grove.impl.DirectQuery(rt_ref,query_id,query,callback,null,null,false));\nactive_queries_map.set(query_id,q);\n\nreturn q.do_read_BANG_();\n});\nshadow.grove.impl.query_destroy = (function shadow$grove$impl$query_destroy(rt_ref,query_id){\nvar map__12771 = cljs.core.deref(rt_ref);\nvar map__12771__$1 = cljs.core.__destructure_map(map__12771);\nvar active_queries_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12771__$1,new cljs.core.Keyword(\"shadow.grove.runtime\",\"active-queries-map\",\"shadow.grove.runtime/active-queries-map\",-592199771));\nvar temp__5808__auto__ = active_queries_map.get(query_id);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar q = temp__5808__auto__;\nactive_queries_map.delete(query_id);\n\nreturn q.destroy_BANG_();\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","shadow/grove/impl.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.grove.impl","~:reader-aliases",["^ ","~$sg","~$shadow.grove"],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$shadow.grove.runtime","^P","~$shadow.grove.db","^Q","~$comp","~$shadow.grove.components","~$eql","~$shadow.grove.eql-query","~$cljs.core","^V","~$gp","~$shadow.grove.protocols","^S","^S","~$goog","^Y","~$db","^Q","^U","^U","^O","^O","~$rt","^P","^X","^X"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^V","^V","^R","^S","^S","^S"],"~:form",["~#list",["~$ns","^F",["^15",["^11",["^O","~:as","^N"],["^I","~:as-alias","^H"],["^X","^17","^W"],["^P","^17","^["],["^Q","^17","^Z"],["^U","^17","^T"],["^S","^17","^R"]]]]],"~:flags",["^ ","^11",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^V","^O","^X","^P","^Q","^U","^S"]],"^K","^F","~:resource-id",["~:shadow.build.classpath/resource","shadow/grove/impl.cljs"],"~:compiled-at",1693994118256,"^G",["^ ","^N","^O","^P","^P","^Q","^Q","^R","^S","^T","^U","^V","^V","^W","^X","^S","^S","^Y","^Y","^Z","^Q","^U","^U","^O","^O","^H","^I","^[","^P","^X","^X"],"~:resource-name","shadow/grove/impl.cljs","~:warnings",[],"~:source","(ns shadow.grove.impl\n  (:require\n    [clojure.set :as set]\n    [shadow.grove :as-alias sg]\n    [shadow.grove.protocols :as gp]\n    [shadow.grove.runtime :as rt]\n    [shadow.grove.db :as db]\n    [shadow.grove.eql-query :as eql]\n    [shadow.grove.components :as comp]\n    ))\n\n(defn js-set-union [a b]\n  (.forEach b (fn [x] (.add a x))))\n\n(set! *warn-on-infer* false)\n\n(def ^function\n  work-queue-task!\n  (if js/window.requestIdleCallback\n    (fn [work-task]\n      (js/window.requestIdleCallback work-task))\n    (fn [^function work-task]\n      ;; microtask or goog.async.run don't do what we want\n      ;; we want the browser to prioritise rendering stuff\n      ;; the other work can be delayed until idle. setTimeout seems closest.\n      (js/setTimeout\n        (fn []\n          (let [start (js/Date.now)\n                fake-deadline\n                #js {:timeRemaining\n                     #(< 16 (- (js/Date.now) start))}]\n            (work-task fake-deadline)))\n        ;; usually 4 or so minimum but that is good enough for our purposes\n        0))))\n\n(def ^function\n  work-queue-cancel!\n  (if js/window.cancelIdleCallback\n    (fn [id]\n      (js/window.cancelIdleCallback id))\n    (fn [id]\n      (js/clearTimeout id))))\n\n(defonce index-queue (js/Array.))\n\n(defonce ^boolean work-queued? false)\n(defonce work-timeout nil)\n\n(defn index-work-all! []\n  (when work-queued?\n    (when work-timeout\n      (work-queue-cancel! work-timeout)\n      (set! work-timeout nil))\n\n    ;; work until all work is done, immediately work off new tasks\n    (loop []\n      (let [^function task (.shift index-queue)]\n        (when ^boolean task\n          (task)\n          (recur))))\n\n    (set! work-queued? false)))\n\n(defn index-work-some! [^js deadline]\n  (loop []\n    (when (pos? (.timeRemaining deadline))\n      (let [^function task (.shift index-queue)]\n        (when ^boolean task\n          (task)\n          (recur)))))\n\n  (if (pos? (alength index-queue))\n    (do (set! work-timeout (work-queue-task! index-work-some!))\n        (set! work-queued? true))\n    (do (set! work-timeout nil)\n        (set! work-queued? false))))\n\n(defn index-queue-some! []\n  (when-not work-queued?\n    (set! work-timeout (work-queue-task! index-work-some!))\n    (set! work-queued? true)))\n\n(defn index-query*\n  [{::rt/keys [active-queries-map key-index-seq key-index-ref query-index-map]} query-id prev-keys next-keys]\n  (when (.has active-queries-map query-id)\n    (let [key-index @key-index-ref]\n\n      ;; index keys that weren't used previously\n      (reduce\n        (fn [_ key]\n          (when-not (contains? prev-keys key)\n            (let [key-idx\n                  (or (get key-index key)\n                      (let [idx (swap! key-index-seq inc)]\n                        (swap! key-index-ref assoc key idx)\n                        idx))\n\n                  query-set\n                  (or (.get query-index-map key-idx)\n                      (let [query-set (js/Set.)]\n                        (.set query-index-map key-idx query-set)\n                        query-set))]\n\n              (.add query-set query-id)))\n          nil)\n        nil\n        next-keys)\n\n      ;; remove old keys that are no longer used\n      (when prev-keys\n        (reduce\n          (fn [_ key]\n            (when-not (contains? next-keys key)\n              (let [key-idx (get key-index key)\n                    query-set (.get query-index-map key-idx)]\n                (when ^boolean query-set\n                  (.delete query-set query-id)))))\n          nil\n          prev-keys)))))\n\n(defn index-query [env query-id prev-keys next-keys]\n  (.push index-queue #(index-query* env query-id prev-keys next-keys))\n  (index-queue-some!))\n\n;; FIXME: this needs some kind of GC\n;; currently does not remove empty sets from query-index-map\n\n(defn unindex-query*\n  [{::rt/keys [key-index-seq key-index-ref query-index-map]} query-id keys]\n\n  ;; FIXME: does this need to check if query is still active?\n  ;; I don't think so because unindex is called on destroy and things are never destroyed twice\n\n  (let [key-index @key-index-ref]\n    (reduce\n      (fn [_ key]\n        (let [key-idx\n              (or (get key-index key)\n                  (let [idx (swap! key-index-seq inc)]\n                    (swap! key-index-ref assoc key idx)\n                    idx))]\n\n          (when-some [query-set (.get query-index-map key-idx)]\n            (.delete query-set query-id))))\n      nil\n      keys)))\n\n(defn unindex-query [env query-id keys]\n  (.push index-queue #(unindex-query* env query-id keys))\n  (index-queue-some!))\n\n(defn invalidate-keys!\n  [{::rt/keys\n    [active-queries-map\n     query-index-map\n     key-index-ref] :as env}\n   keys-new\n   keys-removed\n   keys-updated]\n\n  ;; before we can invalidate anything we need to make sure the index is updated\n  ;; we delay updating index stuff to be async since we only need it here later\n  (index-work-all!)\n\n  (let [keys-to-invalidate (set/union keys-new keys-updated keys-removed)\n        key-index @key-index-ref\n        query-ids (js/Set.)]\n\n    (reduce\n      (fn [_ key]\n        ;; key might not be used by any query so might not have an id\n        (when-some [key-id (get key-index key)]\n          ;; same here\n          (when-some [query-set (.get query-index-map key-id)]\n            (js-set-union query-ids query-set))))\n\n      nil\n      keys-to-invalidate)\n\n    ;; just refreshes all affected queries in no deterministic order\n    ;; each query will figure out on its own if if actually triggers an update\n    ;; FIXME: figure out if this can be smarter\n    (.forEach query-ids\n      (fn [query-id]\n        (when-some [query (.get active-queries-map query-id)]\n          (gp/query-refresh! query))))))\n\n(defn merge-result [tx-env ev result]\n  (cond\n    (nil? result)\n    tx-env\n\n    (not (map? result))\n    (throw\n      (ex-info\n        (str \"tx handler returned invalid result for event \" (:e ev))\n        {:event ev\n         :env tx-env\n         :result result}))\n\n    (identical? (::tx-guard tx-env) (::tx-guard result))\n    result\n\n    :else\n    (throw\n      (ex-info\n        (str \"tx handler returned invalid result for event\" (:e ev) \", expected a modified env\")\n        {:event ev\n         :env tx-env\n         :result result}))))\n\n(defn unhandled-event-ex! [ev-id tx origin]\n  (if (and ^boolean js/goog.DEBUG (map? origin))\n    (loop [comp (comp/get-component origin)\n           err-msg (str \"Unhandled Event \" ev-id \"\\n    Component Trace:\")]\n      (if-not comp\n        ;; FIXME: directly outputting this is here is kinda ugly?\n        (do (js/console.error err-msg)\n            (throw (ex-info (str \"Unhandled Event \" ev-id) {:ev-id ev-id :tx tx :origin origin})))\n\n        (recur\n          (comp/get-parent comp)\n          (str err-msg \"\\n    \" (comp/get-component-name comp))\n          )))\n\n    (throw (ex-info\n             (str \"Unhandled Event \" ev-id)\n             {:ev-id ev-id :tx tx}))))\n\n(defn process-event\n  [rt-ref\n   {ev-id :e :as ev}\n   origin]\n  {:pre [(map? ev)\n         (keyword? ev-id)]}\n\n  ;; (js/console.log ev-id ev origin @rt-ref)\n\n  (let [{::rt/keys [data-ref event-config fx-config] :as env} @rt-ref\n        handler (get event-config ev-id)]\n\n    (if-not handler\n      (unhandled-event-ex! ev-id ev origin)\n\n      (let [before @data-ref\n\n            tx-db\n            (db/transacted before)\n\n            tx-guard\n            (js/Object.)\n\n            tx-done-ref\n            (atom false)\n\n            tx-env\n            (assoc env\n              ::tx-guard tx-guard\n              ::fx []\n              :db tx-db\n              ;; FIXME: should this be strict and only allow chaining tx from fx handlers?\n              ;; should be forbidden to execute side effects directly in tx handlers?\n              ;; but how do we enforce this cleanly? this feels kinda dirty maybe needless indirection?\n              :transact!\n              (fn [next-tx]\n                (throw (ex-info \"transact! only allowed from fx env\" {:tx next-tx}))))\n\n            result\n            (merge-result tx-env ev (handler tx-env ev))]\n\n        (let [{:keys [data keys-new keys-removed keys-updated] :as tx-result}\n              (db/commit! (:db result))]\n\n          (when-not (identical? @data-ref before)\n            (throw (ex-info \"someone messed with app-state while in tx\" {})))\n\n          (reset! data-ref data)\n\n          ;; FIXME: figure out if invalidation/refresh should be immediate or microtask'd/delayed?\n          (when-not (identical? before data)\n            (invalidate-keys! env keys-new keys-removed keys-updated))\n\n          ;; FIXME: re-frame allows fx to edit db but we already committed it\n          ;; currently not checking fx-fn return value at all since they supposed to run side effects only\n          ;; and may still edit stuff in env, just not db?\n\n          ;; dispatching async so render can get to it sooner\n          ;; dispatching these async since they can never do anything that affects the current render right?\n          (rt/next-tick\n            (fn []\n              (doseq [[fx-key value] (::rt/fx result)]\n                (let [fx-fn (get fx-config fx-key)\n\n                      fx-env\n                      (assoc result\n                        ;; creating this here so we can easily track which fx caused further work\n                        ;; technically all fx could run-now! directly given they have the scheduler from the env\n                        ;; but here we can easily track tx-done-ref to ensure fx doesn't actually immediately trigger\n                        ;; other events when they shouldn't because this is still in run-now! itself\n                        ;; FIXME: remove this once this is handled directly in the scheduler\n                        ;; run-now! inside run-now! should be a hard error\n                        :transact!\n                        (fn [fx-tx]\n                          (when-not @tx-done-ref\n                            (throw (ex-info \"cannot start another tx yet, current one is still running. transact! is meant for async events\" {})))\n\n                          (gp/run-now! ^not-native (::rt/scheduler env) #(process-event rt-ref fx-tx origin) [::fx-transact! fx-key])))]\n\n                  (if-not fx-fn\n                    (throw (ex-info (str \"unknown fx \" fx-key) {:fx-key fx-key :fx-value value}))\n\n                    (fx-fn fx-env value))))))\n\n          (when-some [tx-reporter (::rt/tx-reporter env)]\n            ;; dispatch tx-reporter async so it doesn't hold up rendering\n            ;; the only purpose of this is debugging anyways\n            (rt/next-tick\n              (fn []\n                (let [report\n                      {:event ev\n                       :origin origin\n                       :keys-new keys-new\n                       :keys-removed keys-removed\n                       :keys-updated keys-updated\n                       :fx (::rt/fx result)\n                       :db-before before\n                       :db-after data\n                       :env env\n                       :env-changes\n                       (reduce-kv\n                         (fn [report rkey rval]\n                           (if (identical? rval (get env rkey))\n                             report\n                             (assoc report rkey rval)))\n                         {}\n                         (dissoc result :db ::rt/fx ::tx-guard :transact!))}]\n\n                  (tx-reporter report)))))\n\n          (reset! tx-done-ref true)\n\n          (:return result))))))\n\n(deftype HookQuery\n  [^:mutable ident\n   ^:mutable query\n   ^:mutable config\n   ^:mutable ^not-native component-handle\n   ^:mutable rt-ref\n   ^:mutable active-queries-map\n   ^:mutable query-id\n   ^:mutable ready?\n   ^:mutable read-count\n   ^:mutable read-keys\n   ^:mutable read-result]\n\n  gp/IHook\n  (hook-init! [this ch]\n    (set! component-handle ch)\n\n    (let [env (gp/get-component-env ch)]\n      (set! rt-ref (::rt/runtime-ref env))\n      (set! active-queries-map (::rt/active-queries-map @rt-ref)))\n\n    (set! query-id (rt/next-id))\n\n    (.set active-queries-map query-id this)\n\n    (.do-read! this))\n\n  (hook-ready? [this]\n    (or ready? (false? (:suspend config))))\n\n  (hook-value [this] read-result)\n\n  ;; node deps changed, check if query changed\n  (hook-deps-update! [this ^HookQuery val]\n    (let [new-ident (.-ident val)\n          ident-equal? (= ident new-ident)]\n\n      (if (and ident-equal?\n               (= query (.-query val))\n               (= config (.-config val)))\n        false\n        ;; query changed, perform read immediately\n        (do (when-not ident-equal?\n              ;; need to reset this to 0 since do-read! uses this to track\n              ;; whether it needs to index the query or not\n              ;; thus a query with changing ident is not properly re-indexed if this is not reset\n              ;; I intended read-count as a debug utility to find overly active queries\n              ;; so this somehow needs to be addressed properly somewhere so this doesn't have multiple uses\n              (set! read-count 0))\n\n            (set! ident new-ident)\n            (set! query (.-query val))\n            (set! config (.-config val))\n            (let [old-result read-result]\n              (.do-read! this)\n              (not= old-result read-result))))))\n\n  ;; node was invalidated and needs update\n  (hook-update! [this]\n    (let [old-result read-result]\n      (.do-read! this)\n      (not= old-result read-result)))\n\n  (hook-destroy! [this]\n    (unindex-query @rt-ref query-id read-keys)\n    (.delete active-queries-map query-id))\n\n  gp/IQuery\n  (query-refresh! [this]\n    (gp/hook-invalidate! component-handle))\n\n  Object\n  (do-read! [this]\n    (let [query-env @rt-ref\n          db @(::rt/data-ref query-env)]\n\n      (if (and ident (nil? query))\n        ;; shortcut for just getting data for an ident\n        ;; don't need all the query stuff for those\n        (let [result (get db ident)\n              new-keys #{ident}]\n\n          ;; only need to index once\n          (when (zero? read-count)\n            (index-query query-env query-id read-keys new-keys))\n\n          (set! read-keys new-keys)\n\n          (if (keyword-identical? result :db/loading)\n            (set! read-result (assoc (:default config {}) ::sg/loading-state :loading))\n            (do (set! read-result result)\n                (set! ready? true))))\n\n        ;; query env is not the component env\n        (let [observed-data (db/observed db)\n              db-query (if ident [{ident query}] query)\n              result (eql/query query-env observed-data db-query)\n              new-keys (db/observed-keys observed-data)]\n\n          (index-query query-env query-id read-keys new-keys)\n\n          (set! read-keys new-keys)\n\n          (if (keyword-identical? result :db/loading)\n            (set! read-result (assoc (:default config {}) ::sg/loading-state :loading))\n\n            (do (set! read-result\n                  (-> (if ident (get result ident) result)\n                      (assoc ::sg/loading-state :ready)))\n                (set! ready? true))))))\n\n    (set! read-count (inc read-count))))\n\n(defn hook-query [ident query config]\n  {:pre [(or (nil? ident) (db/ident? ident))\n         (or (nil? query) (vector? query))\n         (map? config)]}\n  (HookQuery.\n    ident\n    query\n    config\n    nil\n    nil\n    nil\n    nil\n    false\n    0\n    nil\n    nil))\n\n(deftype DirectQuery\n  [rt-ref\n   query-id\n   query\n   callback\n   ^:mutable read-keys\n   ^:mutable read-result\n   ^:mutable destroyed?]\n\n  gp/IQuery\n  (query-refresh! [this]\n    (when-not destroyed?\n      (.do-read! this)))\n\n  Object\n  (do-read! [this]\n    (let [query-env @rt-ref\n          observed-data (db/observed @(::rt/data-ref query-env))\n          result (eql/query query-env observed-data query)\n          new-keys (db/observed-keys observed-data)]\n\n      ;; remember this even if query is still loading\n      (index-query query-env query-id read-keys new-keys)\n\n      (set! read-keys new-keys)\n\n      ;; if query is still loading don't send to main\n      (when (and (not (keyword-identical? result :db/loading))\n                 ;; empty result likely means the query is no longer valid\n                 ;; eg. deleted ident. don't send update, will likely be destroyed\n                 ;; when other query updates\n                 (some? result)\n                 (not (empty? result))\n                 ;; compare here so main doesn't need to compare again\n                 (not= result read-result))\n\n        (set! read-result result)\n\n        (callback result))))\n\n  (destroy! [this]\n    (set! destroyed? true)\n    (unindex-query @rt-ref query-id read-keys)))\n\n;; direct query, hooks don't use this\n(defn query-init [rt-ref query-id query config callback]\n  (let [{::rt/keys [active-queries-map]} @rt-ref\n        q (DirectQuery. rt-ref query-id query callback nil nil false)]\n    (.set active-queries-map query-id q)\n    (.do-read! q)))\n\n(defn query-destroy [rt-ref query-id]\n  (let [{::rt/keys [active-queries-map]} @rt-ref]\n    (when-some [q (.get active-queries-map query-id)]\n      (.delete active-queries-map query-id)\n      (.destroy! q))))","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["shadow.grove.impl/js-set-union","a","b","x","shadow.grove.impl/work-queue-task!","js/window.requestIdleCallback","work-task","js/setTimeout","start","js/Date.now","fake-deadline","shadow.grove.impl/work-queue-cancel!","js/window.cancelIdleCallback","id","js/clearTimeout","js/shadow","js/shadow.grove","js/shadow.grove.impl","js/shadow.grove.impl.index-queue","shadow.grove.impl/index-queue","js/Array","js/shadow.grove.impl.work-queued?","shadow.grove.impl/work-queued?","js/shadow.grove.impl.work-timeout","shadow.grove.impl/work-timeout","shadow.grove.impl/index-work-all!","task","shadow.grove.impl/index-work-some!","deadline","shadow.grove.impl/index-queue-some!","p__12602","map__12603","cljs.core/--destructure-map","cljs.core.get","shadow.grove.impl/index-query*","active-queries-map","key-index-seq","key-index-ref","query-index-map","query-id","prev-keys","next-keys","cljs.core/deref","key-index","cljs.core.reduce","_","key","cljs.core/contains?","key-idx","or__5045__auto__","idx","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/assoc","query-set","js/Set","shadow.grove.impl/index-query","env","p__12605","map__12606","shadow.grove.impl/unindex-query*","keys","temp__5808__auto__","shadow.grove.impl/unindex-query","p__12608","map__12609","shadow.grove.impl/invalidate-keys!","keys-new","keys-removed","keys-updated","keys-to-invalidate","clojure.set.union","query-ids","key-id","query","shadow.grove.protocols/query-refresh!","shadow.grove.impl/merge-result","tx-env","ev","result","cljs.core/map?","cljs.core.ex_info","shadow.grove.impl/unhandled-event-ex!","ev-id","tx","origin","and__5043__auto__","js/goog.DEBUG","comp","shadow.grove.components/get-component","err-msg","cljs.core/not","js/console.error","shadow.grove.components/get-parent","shadow.grove.components/get-component-name","p__12631","map__12632","js/Error","shadow.grove.impl/process-event","rt-ref","cljs.core/Keyword","map__12661","data-ref","event-config","fx-config","handler","before","tx-db","shadow.grove.db/transacted","tx-guard","js/Object","tx-done-ref","cljs.core.atom","cljs.core.assoc","next-tx","map__12663","data","tx-result","shadow.grove.db/commit!","cljs.core/reset!","shadow.grove.runtime/next-tick","seq__12667","cljs.core/seq","chunk__12668","count__12669","i__12670","vec__12712","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__12720","cljs.core/first","cljs.core/next","fx-key","value","fx-fn","fx-env","fx-tx","tx-reporter","report","cljs.core/reduce-kv","rkey","rval","cljs.core.dissoc","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.grove.impl/HookQuery","shadow.grove.impl/->HookQuery","ident","config","component-handle","ready?","read-count","read-keys","read-result","this","ch","shadow.grove.protocols/get-component-env","shadow.grove.runtime/next-id","val","new-ident","ident-equal?","cljs.core._EQ_","old-result","cljs.core.not_EQ_","query-env","db","new-keys","cljs.core/keyword-identical?","observed-data","shadow.grove.db/observed","db-query","shadow.grove.eql_query.query","shadow.grove.impl/hook-query","shadow.grove.db/ident?","cljs.core/vector?","shadow.grove.impl/DirectQuery","shadow.grove.impl/->DirectQuery","callback","destroyed?","cljs.core/empty?","shadow.grove.impl/query-init","map__12765","q","shadow.grove.impl/query-destroy","map__12771"]],"~:used-vars",["^D",["~$shadow.grove.impl/process-event","~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$js/shadow.grove.impl.index-queue","~$shadow.grove.impl/js-set-union","~$shadow.grove.impl/work-timeout","~$shadow.grove.impl/->DirectQuery","~$js/console.error","~$shadow.grove.db/commit!","~$cljs.core/vector?","~$cljs.core/=","~$shadow.grove.impl/unindex-query*","~$cljs.core/-write","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$shadow.grove.impl/query-destroy","~$shadow.grove.impl/invalidate-keys!","~$shadow.grove.impl/hook-query","~$cljs.core/not=","~$cljs.core/dissoc","~$js/window.cancelIdleCallback","~$cljs.core/keyword-identical?","~$cljs.core/chunk-rest","~$cljs.core/atom","~$shadow.grove.impl/merge-result","~$shadow.grove.impl/work-queue-cancel!","~$js/setTimeout","~$js/shadow.grove","~$cljs.core/empty?","~$cljs.core/contains?","~$cljs.core/map?","~$cljs.core/reset!","~$shadow.grove.components/get-parent","~$js/Date.now","~$shadow.grove.impl/work-queued?","~$shadow.grove.protocols/hook-invalidate!","~$shadow.grove.impl/index-query*","~$cljs.core/swap!","~$shadow.grove.protocols/run-now!","~$cljs.core/get","~$shadow.grove.components/get-component","~$js/Array","~$cljs.core/-nth","~$shadow.grove.db/observed-keys","~$shadow.grove.db/ident?","~$shadow.grove.eql-query/query","~$shadow.grove.impl/query-init","~$js/shadow.grove.impl.work-timeout","~$shadow.grove.runtime/next-tick","~$shadow.grove.impl/index-work-some!","~$cljs.core/nth","~$cljs.core/ex-info","~$shadow.grove.db/observed","~$shadow.grove.impl/->HookQuery","~$js/goog.DEBUG","~$cljs.core/next","~$shadow.grove.impl/index-query","~$js/Set","~$cljs.core/not","~$js/shadow.grove.impl","~$cljs.core/assoc","~$js/clearTimeout","~$clojure.set/union","~$shadow.grove.protocols/get-component-env","~$shadow.grove.impl/index-work-all!","~$shadow.grove.impl/index-queue-some!","~$shadow.grove.impl/unhandled-event-ex!","~$shadow.grove.impl/index-queue","~$cljs.core/reduce-kv","~$js/shadow","~$js/Object","~$shadow.grove.runtime/next-id","~$cljs.core/first","~$shadow.grove.protocols/query-refresh!","~$shadow.grove.components/get-component-name","~$shadow.grove.impl/HookQuery","~$js/shadow.grove.impl.work-queued?","~$shadow.grove.db/transacted","~$js/Error","~$js/window.requestIdleCallback","~$shadow.grove.impl/unindex-query","~$cljs.core/inc","~$shadow.grove.impl/DirectQuery","~$cljs.core/chunked-seq?","~$shadow.grove.impl/work-queue-task!"]]],"~:cache-keys",["~#cmap",[["^1=","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^Y","~$goog.dom.HtmlElement"]]],["^1=","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1=","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.array","~$goog.object","^3R","^3Q"]]],["^1=","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3Q"]]],["^1=","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S"]]],["^1=","shadow/arborist.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","~$shadow.arborist.protocols","~$shadow.arborist.fragments","~$shadow.arborist.attributes","~$shadow.arborist.common","~$shadow.arborist.collections","~$goog.async.nextTick"]]],["^1=","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3R","~$goog.reflect","^3Q"]]],["^1=","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","shadow/cljs/modern.cljs"],["ee16ada88101a631936f48dec7336340a66616ec","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V"]]],["^1=","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","shadow/arborist/protocols.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V"]]],["^1=","shadow/arborist/common.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","~$goog.dom","^40"]]],["^1=","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S"]]],"~:SHADOW-TIMESTAMP",[1693915017000,1693915017000,1667395541000],["^1=","shadow/arborist/attributes.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^3U","~$goog.string","~$goog.functions","~$clojure.string","^40"]]],["^1=","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","^49"]]],["^1=","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","~$goog.fs.blob","^3V","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3X","^3Y","^3Z","^3["]]],["^1=","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3Z","~$goog.html.SafeUrl","^3[","^3S","^3Q"]]],["^1=","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","~$goog.dom.asserts","^4=","~$goog.html.SafeHtml","^4@","~$goog.html.SafeStyle","^4B","^3W","~$goog.html.uncheckedconversions","^3Z","^3Q"]]],["^1=","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3Z","^3X","^3Y","^4@","^4E","~$goog.html.SafeStyleSheet","^4B","~$goog.dom.TagName","^3W","^3[","^3S","^46","^3T","^3U","^3Q","~$goog.dom.tags","^4A"]]],["^1=","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3U"]]],["^1=","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","shadow/grove/db.cljc"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","~$shadow.grove.db.ident"]]],["^1=","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3T","^3Q","^3R"]]],["^1=","shadow/arborist/collections.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^40","^43"]]],["^1=","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","shadow/arborist/fragments.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^40","^42","^43"]]],["^1=","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3T","^3S","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4H","~$goog.dom.safe","^4D","^4F","~$goog.math.Coordinate","~$goog.math.Size","^3U","^4<","^3Z","~$goog.string.Unicode","~$goog.userAgent"]]],["^1=","shadow/grove/components.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^3U","~$shadow.cljs.modern","~$shadow.arborist","^43","^40","^42","^P","^X"]]],["^1=","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.debug.Error","^4L"]]],["^1=","shadow/grove/protocols.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V"]]],["^1=","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3T","^3S","~$goog.collections.maps","^4<","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","shadow/grove/runtime.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^45","^X"]]],["^1=","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","shadow/grove/impl.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^O","^X","^P","^Q","^U","^S"]]],["^1=","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",[]]],["^1=","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3T","^3U"]]],["^1=","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^4<","~$goog.string.StringBuffer"]]],["^1=","shadow/grove/db/ident.cljc"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V"]]],["^1=","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S"]]],["^1=","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^4M","^4F","^3Z","^3Q"]]],["^1=","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.labs.userAgent","^3Q"]]],["^1=","shadow/grove/eql_query.cljc"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V","^Q"]]],["^1=","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.math"]]],["^1=","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.debug.entryPointRegistry","^4:","^4H","^4=","^46","^47"]]],["^1=","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","^4D","^4@","^4E","^4G","^4B","^3W","^3Z","^3Q","^3X"]]],["^1=","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y"]]],["^1=","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","~$goog.math.Long","~$goog.math.Integer","^4<","^3U","^3T","~$goog.Uri","^4Z"]]],["^1=","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3Z","^3[","^4A","^3S"]]],["^1=","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3Z","^4E","^3[","^3U","^3S","^3Q"]]],["^1=","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^49"]]],["^1=","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^4Q"]]],["^1=","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^V"]]],["^1=","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","^4<"]]],["^1=","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3L",["^ ","^3M",null,"^3N",["^D",[]],"^3O",["^Y","^3S","^3["]]]]],"~:clj-info",["^ ","jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/com/thheller/shadow-grove/0.4.2/shadow-grove-0.4.2.jar!/shadow/arborist.clj",1693915017000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/com/thheller/shadow-grove/0.4.2/shadow-grove-0.4.2.jar!/shadow/grove/components.clj",1693915017000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1649406308000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1667395541000,"jar:file:/home/jam/.m2/repository/thheller/shadow-cljs/2.19.8/shadow-cljs-2.19.8-aot.jar!/shadow/cljs/modern.cljc",1693915017000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1667395541000,"jar:file:/home/jam/.m2/repository/com/thheller/shadow-grove/0.4.2/shadow-grove-0.4.2.jar!/shadow/arborist/fragments.cljc",1693915017000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/alpha.clj",1649406308000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1667395541000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","shadow/grove/impl.cljs","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"~:shadow/js-access-properties",["^D",["requestIdleCallback","cancelIdleCallback","now"]],"^E","^F","^G",["^ ","^H","^I"],"^L",null,"^M",["^ ","^N","^O","^P","^P","^Q","^Q","^R","^S","^T","^U","^V","^V","^W","^X","^S","^S","^Y","^Y","^Z","^Q","^U","^U","^O","^O","^[","^P","^X","^X"],"^10",["^D",["^11"]],"~:shadow/js-access-global",["^D",["window","Object","Date","clearTimeout","Error","setTimeout","Array","Set"]],"^12",null,"~:defs",["^ ","~$DirectQuery",["^ ","~:num-fields",7,"~:protocols",["^D",["~$shadow.grove.protocols/IQuery","~$cljs.core/Object"]],"^E","^3G","^6","shadow/grove/impl.cljs","^:",21,"~:type",true,"^8",10,"^7",474,"~:record",false,"^9",474,"~:tag","~$function","~:skip-protocol-flag",null],"~$query-destroy",["^ ","~:protocol-inline",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",525,"^8",7,"^9",525,"^:",20,"~:arglists",["^15",["~$quote",["^15",[["~$rt-ref","~$query-id"]]]]]],"^E","^20","^6","shadow/grove/impl.cljs","^:",20,"~:method-params",["^15",[["^6@","^6A"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^8",1,"~:variadic?",false,"^7",525,"~:ret-tag",["^D",["~$any","~$clj-nil"]],"^9",525,"~:max-fixed-arity",2,"~:fn-var",true,"^6>",["^15",["^6?",["^15",[["^6@","^6A"]]]]]],"~$work-queued?",["^ ","^E","^2C","^6","shadow/grove/impl.cljs","^7",46,"^8",1,"^9",46,"^:",31,"^69","~$boolean","^5",["^ ","^6","shadow/grove/impl.cljs","^7",46,"^8",19,"^9",46,"^:",31,"^69","^6L"]],"~$index-query*",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",83,"^8",7,"^9",83,"^:",19,"^6>",["^15",["^6?",["^15",[[["^ ","~:shadow.grove.runtime/keys",["~$active-queries-map","~$key-index-seq","~$key-index-ref","~$query-index-map"]],"^6A","~$prev-keys","~$next-keys"]]]]]],"^E","^2E","^6","shadow/grove/impl.cljs","^:",19,"^6B",["^15",[["~$p__12602","^6A","^6S","^6T"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",83,"^6F",["^D",[null,"^6G","^6H"]],"^9",83,"^6I",4,"^6J",true,"^6>",["^15",["^6?",["^15",[[["^ ","^6N",["^6O","^6P","^6Q","^6R"]],"^6A","^6S","^6T"]]]]]],"~$unindex-query*",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",128,"^8",7,"^9",128,"^:",21,"^6>",["^15",["^6?",["^15",[[["^ ","^6N",["^6P","^6Q","^6R"]],"^6A","~$keys"]]]]]],"^E","^1T","^6","shadow/grove/impl.cljs","^:",21,"^6B",["^15",[["~$p__12605","^6A","^6W"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",128,"^6F",["^D",[null,"^6G"]],"^9",128,"^6I",3,"^6J",true,"^6>",["^15",["^6?",["^15",[[["^ ","^6N",["^6P","^6Q","^6R"]],"^6A","^6W"]]]]]],"~$index-work-all!",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",49,"^8",7,"^9",49,"^:",22,"^6>",["^15",["^6?",["^15",[[]]]]]],"^E","^35","^6","shadow/grove/impl.cljs","^:",22,"^6B",["^15",[[]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",49,"^6F",["^D",[null,"^6H"]],"^9",49,"^6I",0,"^6J",true,"^6>",["^15",["^6?",["^15",[[]]]]]],"~$index-work-some!",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",64,"^8",7,"^9",64,"^:",23,"^6>",["^15",["^6?",["^15",[["~$deadline"]]]]]],"^E","^2R","^6","shadow/grove/impl.cljs","^:",23,"^6B",["^15",[["^6["]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",64,"^9",64,"^6I",1,"^6J",true,"^6>",["^15",["^6?",["^15",[["^6["]]]]]],"~$index-query",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",121,"^8",7,"^9",121,"^:",18,"^6>",["^15",["^6?",["^15",[["~$env","^6A","^6S","^6T"]]]]]],"^E","^2Y","^6","shadow/grove/impl.cljs","^:",18,"^6B",["^15",[["^71","^6A","^6S","^6T"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",121,"^6F",["^D",[null,"^6H"]],"^9",121,"^6I",4,"^6J",true,"^6>",["^15",["^6?",["^15",[["^71","^6A","^6S","^6T"]]]]]],"~$unhandled-event-ex!",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",212,"^8",7,"^9",212,"^:",26,"^6>",["^15",["^6?",["^15",[["~$ev-id","~$tx","~$origin"]]]]]],"^E","^37","^6","shadow/grove/impl.cljs","^:",26,"^6B",["^15",[["^73","^74","^75"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",212,"^6F","~$ignore","^9",212,"^6I",3,"^6J",true,"^6>",["^15",["^6?",["^15",[["^73","^74","^75"]]]]]],"~$index-queue",["^ ","^E","^38","^6","shadow/grove/impl.cljs","^7",44,"^8",1,"^9",44,"^:",21,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",44,"^8",10,"^9",44,"^:",21],"^69","~$js"],"~$hook-query",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",457,"^8",7,"^9",457,"^:",17,"^6>",["^15",["^6?",["^15",[["~$ident","~$query","~$config"]]]]]],"^E","^22","^6","shadow/grove/impl.cljs","^:",17,"^6B",["^15",[["^7:","^7;","^7<"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",457,"^6F","^3@","^9",457,"^6I",3,"^6J",true,"^6>",["^15",["^6?",["^15",[["^7:","^7;","^7<"]]]]]],"~$index-queue-some!",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",78,"^8",7,"^9",78,"^:",24,"^6>",["^15",["^6?",["^15",[[]]]]]],"^E","^36","^6","shadow/grove/impl.cljs","^:",24,"^6B",["^15",[[]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",78,"^6F",["^D",[null,"^6H"]],"^9",78,"^6I",0,"^6J",true,"^6>",["^15",["^6?",["^15",[[]]]]]],"~$work-queue-task!",["^ ","^E","^3I","^6","shadow/grove/impl.cljs","^7",17,"^8",1,"^9",18,"^:",19,"^69","^6:","^5",["^ ","^6","shadow/grove/impl.cljs","^7",18,"^8",3,"^9",18,"^:",19,"^69","^6:"]],"~$HookQuery",["^ ","^63",11,"^64",["^D",["^65","^66","~$shadow.grove.protocols/IHook"]],"^E","^3@","^6","shadow/grove/impl.cljs","^:",19,"^67",true,"^8",10,"^7",344,"^68",false,"^9",344,"^69","^6:","^6;",null],"~$unindex-query",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",148,"^8",7,"^9",148,"^:",20,"^6>",["^15",["^6?",["^15",[["^71","^6A","^6W"]]]]]],"^E","^3E","^6","shadow/grove/impl.cljs","^:",20,"^6B",["^15",[["^71","^6A","^6W"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",148,"^6F",["^D",[null,"^6H"]],"^9",148,"^6I",3,"^6J",true,"^6>",["^15",["^6?",["^15",[["^71","^6A","^6W"]]]]]],"~$js-set-union",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",12,"^8",7,"^9",12,"^:",19,"^6>",["^15",["^6?",["^15",[["~$a","~$b"]]]]]],"^E","^1M","^6","shadow/grove/impl.cljs","^:",19,"^6B",["^15",[["~$a","~$b"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",12,"^6F","^6G","^9",12,"^6I",2,"^6J",true,"^6>",["^15",["^6?",["^15",[["~$a","~$b"]]]]]],"~$->HookQuery",["^ ","^6=",null,"^5",["^ ","^64",["^D",["^65","^66","^7@"]],"^6","shadow/grove/impl.cljs","^:",19,"^8",10,"~:factory","~:positional","^7",344,"^9",344,"^6>",["^15",["^6?",["^15",[["^7:","^7;","^7<","~$component-handle","^6@","^6O","^6A","~$ready?","~$read-count","~$read-keys","~$read-result"]]]]],"^6;",null,"~:doc","Positional factory function for shadow.grove.impl/HookQuery."],"^64",["^D",["^65","^66","^7@"]],"^E","^2V","^6","shadow/grove/impl.cljs","^:",19,"^6B",["^15",[["^7:","^7;","^7<","^7F","^6@","^6O","^6A","^7G","^7H","^7I","^7J"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7D","^7E","^7",344,"^6F","^3@","^9",344,"^6I",11,"^6J",true,"^6>",["^15",["^6?",["^15",[["^7:","^7;","^7<","^7F","^6@","^6O","^6A","^7G","^7H","^7I","^7J"]]]]],"^6;",null,"^7K","Positional factory function for shadow.grove.impl/HookQuery."],"~$process-event",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",230,"^8",7,"^9",230,"^:",20,"^6>",["^15",["^6?",["^15",[["^6@",["^ ","^73","~:e","^17","~$ev"],"^75"]]]]]],"^E","^1I","^6","shadow/grove/impl.cljs","^:",20,"^6B",["^15",[["^6@","~$p__12631","^75"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",230,"^6F","^6G","^9",230,"^6I",3,"^6J",true,"^6>",["^15",["^6?",["^15",[["^6@",["^ ","^73","~:e","^17","^7M"],"^75"]]]]]],"~$->DirectQuery",["^ ","^6=",null,"^5",["^ ","^64",["^D",["^65","^66"]],"^6","shadow/grove/impl.cljs","^:",21,"^8",10,"^7D","^7E","^7",474,"^9",474,"^6>",["^15",["^6?",["^15",[["^6@","^6A","^7;","~$callback","^7I","^7J","~$destroyed?"]]]]],"^6;",null,"^7K","Positional factory function for shadow.grove.impl/DirectQuery."],"^64",["^D",["^65","^66"]],"^E","^1O","^6","shadow/grove/impl.cljs","^:",21,"^6B",["^15",[["^6@","^6A","^7;","^7P","^7I","^7J","^7Q"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7D","^7E","^7",474,"^6F","^3G","^9",474,"^6I",7,"^6J",true,"^6>",["^15",["^6?",["^15",[["^6@","^6A","^7;","^7P","^7I","^7J","^7Q"]]]]],"^6;",null,"^7K","Positional factory function for shadow.grove.impl/DirectQuery."],"~$work-timeout",["^ ","^E","^1N","^6","shadow/grove/impl.cljs","^7",47,"^8",1,"^9",47,"^:",22,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",47,"^8",10,"^9",47,"^:",22],"^69","^6H"],"~$work-queue-cancel!",["^ ","^E","^2:","^6","shadow/grove/impl.cljs","^7",36,"^8",1,"^9",37,"^:",21,"^69","^6:","^5",["^ ","^6","shadow/grove/impl.cljs","^7",37,"^8",3,"^9",37,"^:",21,"^69","^6:"]],"~$query-init",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",519,"^8",7,"^9",519,"^:",17,"^6>",["^15",["^6?",["^15",[["^6@","^6A","^7;","^7<","^7P"]]]]]],"^E","^2O","^6","shadow/grove/impl.cljs","^:",17,"^6B",["^15",[["^6@","^6A","^7;","^7<","^7P"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",519,"^6F","^6G","^9",519,"^6I",5,"^6J",true,"^6>",["^15",["^6?",["^15",[["^6@","^6A","^7;","^7<","^7P"]]]]]],"~$merge-result",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",188,"^8",7,"^9",188,"^:",19,"^6>",["^15",["^6?",["^15",[["~$tx-env","^7M","~$result"]]]]]],"^E","^29","^6","shadow/grove/impl.cljs","^:",19,"^6B",["^15",[["^7V","^7M","^7W"]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",188,"^9",188,"^6I",3,"^6J",true,"^6>",["^15",["^6?",["^15",[["^7V","^7M","^7W"]]]]]],"~$invalidate-keys!",["^ ","^6=",null,"^5",["^ ","^6","shadow/grove/impl.cljs","^7",152,"^8",7,"^9",152,"^:",23,"^6>",["^15",["^6?",["^15",[[["^ ","^6N",["^6O","^6R","^6Q"],"^17","^71"],"~$keys-new","~$keys-removed","~$keys-updated"]]]]]],"^E","^21","^6","shadow/grove/impl.cljs","^:",23,"^6B",["^15",[["~$p__12608","^7Y","^7Z","^7["]]],"^6C",null,"^6D",["^15",[null,null]],"^8",1,"^6E",false,"^7",152,"^6F","^78","^9",152,"^6I",4,"^6J",true,"^6>",["^15",["^6?",["^15",[[["^ ","^6N",["^6O","^6R","^6Q"],"^17","^71"],"^7Y","^7Z","^7["]]]]]]],"^13",["^ ","^V","^V","^R","^S","^S","^S"],"~:cljs.analyzer/constants",["^ ","^10",["^D",["~:shadow.grove.runtime/fx-config","^7;","^7F","~:shadow.grove.runtime/runtime-ref","^7J","~:ready","^7P","~:shadow.grove.runtime/query-index-map","~:keys-updated","~:shadow.grove.runtime/active-queries-map","~:else","^7G","~:db-after","~:shadow.grove/loading-state","~:db","~:shadow.grove.runtime/event-config","~:return","~:default","~:shadow.grove.runtime/key-index-ref","~:shadow.grove.runtime/data-ref","~:shadow.grove.runtime/fx","~:fx-key","~:ev-id","~:env","~:e","~:transact!","^7<","~:suspend","~:shadow.grove.runtime/scheduler","~:db-before","~:shadow.grove.impl/tx-guard","^6A","^6@","~:keys-new","~:event","~:tx","~$not-native","~:loading","^7H","~:shadow.grove.runtime/tx-reporter","~:result","~:env-changes","~:shadow.grove.impl/fx-transact!","~:db/loading","~:shadow.grove.impl/fx","~:keys-removed","^7Q","~:shadow.grove.runtime/key-index-seq","~:origin","^69","~:mutable","^7I","^6O","~:fx-value","~:fx","^7:","~:data"]],"~:order",["^87","^8V","^8?","^85","~:e","^8K","^8D","^8P","^8I","^88","^8C","^8L","^8W","^8@","^8<","^82","^8T","^8;","^8E","^8[","^8J","^8U","^86","^8A","^8G","^8R","^8B","^8Y","^8O","^89","^8H","^8Q","^8Z","^8=","^83","^8F","^8S","^8>","^8:","^8N","^84","^7:","^8X","^7;","^7<","^7F","^69","^8M","^6@","^6O","^6A","^7G","^7H","^7I","^7J","^7P","^7Q"]],"^19",["^ ","^11",["^D",[]]],"^1:",["^ "],"^1;",["^Y","^V","^O","^X","^P","^Q","^U","^S"]],"^K","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^3K",[["^93","~:static-fns"],true,["^93","~:shadow-tweaks"],null,["^93","~:source-map-inline"],null,["^93","~:elide-asserts"],false,["^93","~:optimize-constants"],null,["^93","^1@"],null,["^93","~:external-config"],null,["^93","~:tooling-config"],null,["^93","~:emit-constants"],null,["^93","~:load-tests"],null,["^93","~:form-size-threshold"],null,["^93","~:global-goog-object&array"],null,["^93","~:data-readers"],null,["^93","~:infer-externs"],"~:auto",["^93","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^93","~:fn-invoke-direct"],null,["^93","~:source-map"],"/dev/null"]]]