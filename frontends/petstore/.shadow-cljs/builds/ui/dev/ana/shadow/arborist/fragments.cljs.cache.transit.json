["^ ","~:output",["^ ","~:js","goog.provide('shadow.arborist.fragments');\n/**\n * @idGenerator {consistent}\n */\nshadow.arborist.fragments.fragment_id = (function shadow$arborist$fragments$fragment_id(s){\nreturn s;\n});\nshadow.arborist.fragments.array_equiv = (function shadow$arborist$fragments$array_equiv(a,b){\nvar al = a.length;\nvar bl = b.length;\nif((al === bl)){\nvar i = (0);\nwhile(true){\nif((i === al)){\nreturn true;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((a[i]),(b[i]))){\nvar G__11765 = (i + (1));\ni = G__11765;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\nshadow.arborist.fragments.svg_ns = \"http://www.w3.org/2000/svg\";\nshadow.arborist.fragments.svg_element_fn = (function shadow$arborist$fragments$svg_element_fn(type){\nreturn document.createElementNS(shadow.arborist.fragments.svg_ns,type.name);\n});\nshadow.arborist.fragments.dom_element_fn = (function shadow$arborist$fragments$dom_element_fn(type){\nreturn document.createElement(type.name);\n});\nshadow.arborist.fragments.get_element_fn = (function shadow$arborist$fragments$get_element_fn(env,element_ns){\nif((element_ns === shadow.arborist.fragments.svg_ns)){\nreturn shadow.arborist.fragments.svg_element_fn;\n} else {\nreturn shadow.arborist.fragments.dom_element_fn;\n}\n});\n\n/**\n* @constructor\n*/\nshadow.arborist.fragments.FragmentCode = (function (create_fn,mount_fn,update_fn,destroy_fn){\nthis.create_fn = create_fn;\nthis.mount_fn = mount_fn;\nthis.update_fn = update_fn;\nthis.destroy_fn = destroy_fn;\n});\n\n(shadow.arborist.fragments.FragmentCode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"create-fn\",\"create-fn\",44490714,null),new cljs.core.Symbol(null,\"mount-fn\",\"mount-fn\",1060575271,null),new cljs.core.Symbol(null,\"update-fn\",\"update-fn\",-1943348456,null),new cljs.core.Symbol(null,\"destroy-fn\",\"destroy-fn\",1453616805,null)], null);\n}));\n\n(shadow.arborist.fragments.FragmentCode.cljs$lang$type = true);\n\n(shadow.arborist.fragments.FragmentCode.cljs$lang$ctorStr = \"shadow.arborist.fragments/FragmentCode\");\n\n(shadow.arborist.fragments.FragmentCode.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.fragments/FragmentCode\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.fragments/FragmentCode.\n */\nshadow.arborist.fragments.__GT_FragmentCode = (function shadow$arborist$fragments$__GT_FragmentCode(create_fn,mount_fn,update_fn,destroy_fn){\nreturn (new shadow.arborist.fragments.FragmentCode(create_fn,mount_fn,update_fn,destroy_fn));\n});\n\n\n/**\n* @constructor\n * @implements {shadow.arborist.protocols.IManaged}\n*/\nshadow.arborist.fragments.ManagedFragment = (function (env,code,vals,marker,exports,dom_entered_QMARK_){\nthis.env = env;\nthis.code = code;\nthis.vals = vals;\nthis.marker = marker;\nthis.exports = exports;\nthis.dom_entered_QMARK_ = dom_entered_QMARK_;\n});\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$dom_first$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.marker;\n}));\n\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$dom_insert$arity$3 = (function (this$,parent,anchor){\nvar self__ = this;\nvar this$__$1 = this;\nparent.insertBefore(self__.marker,anchor);\n\nreturn self__.code.mount_fn(self__.exports,parent,anchor);\n}));\n\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\n(self__.dom_entered_QMARK_ = true);\n\nreturn self__.exports.forEach((function (item){\nif((((!((item == null))))?((((false) || ((cljs.core.PROTOCOL_SENTINEL === item.shadow$arborist$protocols$IManaged$))))?true:false):false)){\nreturn item.shadow$arborist$protocols$IManaged$dom_entered_BANG_$arity$1(null);\n} else {\nreturn null;\n}\n}));\n}));\n\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2 = (function (this$,next){\nvar self__ = this;\nvar this$__$1 = this;\nvar and__5043__auto__ = shadow.arborist.fragments.fragment_init_QMARK_(next);\nif(cljs.core.truth_(and__5043__auto__)){\nreturn (self__.code === next.code);\n} else {\nreturn and__5043__auto__;\n}\n}));\n\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2 = (function (this$,next){\nvar self__ = this;\nvar this$__$1 = this;\nvar nvals_11781 = next.vals;\nself__.code.update_fn(this$__$1,self__.env,self__.exports,self__.vals,nvals_11781);\n\n(self__.vals = nvals_11781);\n\nreturn new cljs.core.Keyword(null,\"synced\",\"synced\",-1518561120);\n}));\n\n(shadow.arborist.fragments.ManagedFragment.prototype.shadow$arborist$protocols$IManaged$destroy_BANG_$arity$2 = (function (this$,dom_remove_QMARK_){\nvar self__ = this;\nvar this$__$1 = this;\nif(dom_remove_QMARK_){\nself__.marker.remove();\n} else {\n}\n\nreturn self__.code.destroy_fn(self__.env,self__.exports,self__.vals,dom_remove_QMARK_);\n}));\n\n(shadow.arborist.fragments.ManagedFragment.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"env\",\"env\",-175281708,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"code\",\"code\",-1068142627,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"FragmentCode\",\"FragmentCode\",1795368532,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"vals\",\"vals\",-1886377036,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),new cljs.core.Symbol(null,\"marker\",\"marker\",-1789317456,null),new cljs.core.Symbol(null,\"exports\",\"exports\",895523255,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"dom-entered?\",\"dom-entered?\",962657078,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null))], null);\n}));\n\n(shadow.arborist.fragments.ManagedFragment.cljs$lang$type = true);\n\n(shadow.arborist.fragments.ManagedFragment.cljs$lang$ctorStr = \"shadow.arborist.fragments/ManagedFragment\");\n\n(shadow.arborist.fragments.ManagedFragment.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.fragments/ManagedFragment\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.fragments/ManagedFragment.\n */\nshadow.arborist.fragments.__GT_ManagedFragment = (function shadow$arborist$fragments$__GT_ManagedFragment(env,code,vals,marker,exports,dom_entered_QMARK_){\nreturn (new shadow.arborist.fragments.ManagedFragment(env,code,vals,marker,exports,dom_entered_QMARK_));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {shadow.arborist.protocols.IConstruct}\n*/\nshadow.arborist.fragments.FragmentInit = (function (vals,element_ns,code){\nthis.vals = vals;\nthis.element_ns = element_ns;\nthis.code = code;\nthis.cljs$lang$protocol_mask$partition0$ = 2097152;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(shadow.arborist.fragments.FragmentInit.prototype.shadow$arborist$protocols$IConstruct$ = cljs.core.PROTOCOL_SENTINEL);\n\n(shadow.arborist.fragments.FragmentInit.prototype.shadow$arborist$protocols$IConstruct$as_managed$arity$2 = (function (_,env){\nvar self__ = this;\nvar ___$1 = this;\nvar element_fn = (((self__.element_ns == null))?new cljs.core.Keyword(\"dom\",\"element-fn\",\"dom/element-fn\",553675770).cljs$core$IFn$_invoke$arity$1(env):shadow.arborist.fragments.get_element_fn(env,self__.element_ns));\nvar env__$1 = (function (){var G__11695 = env;\nif((!((self__.element_ns == null)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__11695,new cljs.core.Keyword(\"dom\",\"element-fn\",\"dom/element-fn\",553675770),element_fn,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"dom\",\"svg\",\"dom/svg\",856951640),true], 0));\n} else {\nreturn G__11695;\n}\n})();\nvar exports__$1 = self__.code.create_fn(env__$1,self__.vals,element_fn);\nreturn (new shadow.arborist.fragments.ManagedFragment(env__$1,self__.code,self__.vals,shadow.arborist.common.dom_marker.cljs$core$IFn$_invoke$arity$1(env__$1),exports__$1,false));\n}));\n\n(shadow.arborist.fragments.FragmentInit.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){\nvar self__ = this;\nvar this$__$1 = this;\nvar and__5043__auto__ = (other instanceof shadow.arborist.fragments.FragmentInit);\nif(and__5043__auto__){\nvar and__5043__auto____$1 = (self__.code === other.code);\nif(and__5043__auto____$1){\nreturn shadow.arborist.fragments.array_equiv(self__.vals,other.vals);\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n}));\n\n(shadow.arborist.fragments.FragmentInit.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"vals\",\"vals\",-1886377036,null),new cljs.core.Symbol(null,\"element-ns\",\"element-ns\",400349362,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"code\",\"code\",-1068142627,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"FragmentCode\",\"FragmentCode\",1795368532,null)], null))], null);\n}));\n\n(shadow.arborist.fragments.FragmentInit.cljs$lang$type = true);\n\n(shadow.arborist.fragments.FragmentInit.cljs$lang$ctorStr = \"shadow.arborist.fragments/FragmentInit\");\n\n(shadow.arborist.fragments.FragmentInit.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"shadow.arborist.fragments/FragmentInit\");\n}));\n\n/**\n * Positional factory function for shadow.arborist.fragments/FragmentInit.\n */\nshadow.arborist.fragments.__GT_FragmentInit = (function shadow$arborist$fragments$__GT_FragmentInit(vals,element_ns,code){\nreturn (new shadow.arborist.fragments.FragmentInit(vals,element_ns,code));\n});\n\nshadow.arborist.fragments.fragment_init_QMARK_ = (function shadow$arborist$fragments$fragment_init_QMARK_(thing){\nreturn (thing instanceof shadow.arborist.fragments.FragmentInit);\n});\nshadow.arborist.fragments.has_no_lazy_seqs_QMARK_ = (function shadow$arborist$fragments$has_no_lazy_seqs_QMARK_(vals){\nreturn cljs.core.every_QMARK_((function (p1__11720_SHARP_){\nreturn (!((p1__11720_SHARP_ instanceof cljs.core.LazySeq)));\n}),vals);\n});\nshadow.arborist.fragments.fragment_init = (function shadow$arborist$fragments$fragment_init(vals,element_ns,code){\nif(shadow.arborist.fragments.has_no_lazy_seqs_QMARK_(vals)){\n} else {\nthrow (new Error([\"Assert failed: \",\"no lazy seqs allowed in fragments\",\"\\n\",\"(has-no-lazy-seqs? vals)\"].join('')));\n}\n\nreturn (new shadow.arborist.fragments.FragmentInit(vals,element_ns,code));\n});\n/**\n * @dict\n */\nshadow.arborist.fragments.known_fragments = ({});\nshadow.arborist.fragments.reset_known_fragments_BANG_ = (function shadow$arborist$fragments$reset_known_fragments_BANG_(){\nreturn (shadow.arborist.fragments.known_fragments = ({}));\n});\nshadow.arborist.fragments.create_text = (function shadow$arborist$fragments$create_text(env,text){\nreturn document.createTextNode(text);\n});\nshadow.arborist.fragments.set_attr = (function shadow$arborist$fragments$set_attr(env,node,key,oval,nval){\nreturn shadow.arborist.attributes.set_attr(env,node,key,oval,nval);\n});\nshadow.arborist.fragments.append_child = (function shadow$arborist$fragments$append_child(parent,child){\nreturn parent.appendChild(child);\n});\nshadow.arborist.fragments.managed_create = (function shadow$arborist$fragments$managed_create(env,other){\nreturn shadow.arborist.protocols.as_managed(other,env);\n});\nshadow.arborist.fragments.managed_append = (function shadow$arborist$fragments$managed_append(parent,other){\nif((((!((other == null))))?((((false) || ((cljs.core.PROTOCOL_SENTINEL === other.shadow$arborist$protocols$IManaged$))))?true:(((!other.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(shadow.arborist.protocols.IManaged,other):false)):cljs.core.native_satisfies_QMARK_(shadow.arborist.protocols.IManaged,other))){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"cannot append-managed\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"parent\",\"parent\",-878878779),parent,new cljs.core.Keyword(null,\"other\",\"other\",995793544),other], null));\n}\n\nreturn shadow.arborist.protocols.dom_insert(other,parent,null);\n});\nshadow.arborist.fragments.managed_insert = (function shadow$arborist$fragments$managed_insert(component,parent,anchor){\nreturn shadow.arborist.protocols.dom_insert(component,parent,anchor);\n});\nshadow.arborist.fragments.managed_remove = (function shadow$arborist$fragments$managed_remove(component,dom_remove_QMARK_){\nreturn shadow.arborist.protocols.destroy_BANG_(component,dom_remove_QMARK_);\n});\nshadow.arborist.fragments.update_managed = (function shadow$arborist$fragments$update_managed(fragment,env,nodes,idx,oval,nval){\nvar el = (nodes[idx]);\nif(el.shadow$arborist$protocols$IManaged$supports_QMARK_$arity$2(null,nval)){\nreturn el.shadow$arborist$protocols$IManaged$dom_sync_BANG_$arity$2(null,nval);\n} else {\nvar next = shadow.arborist.common.replace_managed(env,el,nval);\n(nodes[idx] = next);\n\nif(fragment.dom_entered_QMARK_){\nreturn shadow.arborist.protocols.dom_entered_BANG_(next);\n} else {\nreturn null;\n}\n}\n});\nshadow.arborist.fragments.update_attr = (function shadow$arborist$fragments$update_attr(env,nodes,idx,attr,oval,nval){\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(oval,nval)){\nvar el = (nodes[idx]);\nreturn shadow.arborist.fragments.set_attr(env,el,attr,oval,nval);\n} else {\nreturn null;\n}\n});\nshadow.arborist.fragments.clear_attr = (function shadow$arborist$fragments$clear_attr(env,nodes,idx,attr,oval){\nvar node = (nodes[idx]);\nreturn shadow.arborist.attributes.set_attr(env,node,attr,oval,null);\n});\nshadow.arborist.fragments.dom_insert_before = (function shadow$arborist$fragments$dom_insert_before(parent,node,anchor){\nreturn parent.insertBefore(node,anchor);\n});\nshadow.arborist.fragments.dom_remove = (function shadow$arborist$fragments$dom_remove(node){\nreturn node.remove();\n});\nshadow.arborist.fragments.css_join = (function shadow$arborist$fragments$css_join(from_el,from_attrs){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [from_el,from_attrs], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","shadow/arborist/fragments.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$html",["^ ","~:arglists",["~#list",[["~$&","~$body"]]],"^7",552,"^8",1,"^6","shadow/arborist/fragments.cljc","~:name","~$shadow.arborist.fragments/html","~:ns","~$shadow.arborist.fragments","~:macro",true],"~$svg",["^ ","^G",["^H",[["~$&","^I"]]],"^7",555,"^8",1,"^6","shadow/arborist/fragments.cljc","^J","~$shadow.arborist.fragments/svg","^L","^M","^N",true]],"^J","^M","~:reader-aliases",["^ "],"~:op","^L","~:imports",null,"~:requires",["^ ","~$shadow.arborist.protocols","^U","~$p","^U","~$shadow.arborist.attributes","^V","~$a","^V","~$shadow.arborist.common","^W","~$common","^W","~$cljs.core","^Y","~$goog","^Z"],"~:seen",["^D",["~:require","~:require-macros"]],"~:uses",null,"^11",["^ ","^M","^M","^Y","^Y"],"~:form",["^H",["~$ns","^M",["^H",["^11",["^M"]]],["^H",["^10",["^U","~:as","~$p"],["^V","^15","~$a"],["^W","^15","^X"]]]]],"~:flags",["^ ","^11",["^D",[]],"^10",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^Y","^U","^V","^W"]],"^L","^M","~:resource-id",["~:shadow.build.classpath/resource","shadow/arborist/fragments.cljs"],"~:compiled-at",1693994117772,"^Q",["^ ","~$p","^U","~$a","^V","^U","^U","^Y","^Y","^Z","^Z","^V","^V","^W","^W","^X","^W","^M","^M"],"~:resource-name","shadow/arborist/fragments.cljs","~:warnings",[],"~:source","(ns shadow.arborist.fragments\n  (:require-macros [shadow.arborist.fragments])\n  (:require\n    [shadow.arborist.protocols :as p]\n    [shadow.arborist.attributes :as a]\n    [shadow.arborist.common :as common]))\n\n(defn fragment-id\n  ;; https://github.com/google/closure-compiler/wiki/Id-Generator-Annotations\n  {:jsdoc [\"@idGenerator {consistent}\"]}\n  [s]\n  s)\n\n(defn array-equiv [a b]\n  (let [al (alength a)\n        bl (alength b)]\n    ;; FIXME: identical? wouldn't work in CLJ, but = is slower in CLJS\n    (when (identical? al bl)\n      (loop [i 0]\n        (if (identical? i al)\n          true\n          (when (= (aget a i) (aget b i))\n            (recur (inc i))))))))\n\n(def svg-ns \"http://www.w3.org/2000/svg\")\n\n;; FIXME: maybe take document from env, easier to mock out later\n(defn svg-element-fn [^Keyword type]\n  (js/document.createElementNS svg-ns (.-name type)))\n\n(defn dom-element-fn [^Keyword type]\n  (js/document.createElement (.-name type)))\n\n(defn get-element-fn [env element-ns]\n  (if (identical? element-ns svg-ns)\n    svg-element-fn\n    dom-element-fn))\n\n(deftype FragmentCode [create-fn mount-fn update-fn destroy-fn])\n\n(declare ^{:arglists '([thing])} fragment-init?)\n\n(deftype ManagedFragment\n  [env\n   ^FragmentCode code\n   ^:mutable vals\n   marker\n   exports\n   ^boolean ^:mutable dom-entered?]\n\n  p/IManaged\n  (dom-first [this] marker)\n\n  (dom-insert [this parent anchor]\n    (.insertBefore parent marker anchor)\n    (. code (mount-fn exports parent anchor)))\n\n  (dom-entered! [this]\n    ;; FIXME: maybe create fn in macro that saves traversing exports\n    ;; exports may contain many regular dom nodes and those don't need this\n    ;; but this is called once in the entire lifecycle so this should be fine\n    (set! dom-entered? true)\n    (.forEach exports\n      (fn [item]\n        (when (implements? p/IManaged item)\n          (p/dom-entered! item)\n          ))))\n\n  (supports? [this ^FragmentInit next]\n    (and (fragment-init? next)\n         (identical? code (.-code next))))\n\n  (dom-sync! [this ^FragmentInit next]\n    (let [nvals (.-vals next)]\n      (.. code (update-fn this env exports vals nvals))\n      (set! vals nvals))\n    :synced)\n\n  (destroy! [this ^boolean dom-remove?]\n    (when dom-remove?\n      (.remove marker))\n\n    (. code (destroy-fn env exports vals dom-remove?))))\n\n(deftype FragmentInit [vals element-ns ^FragmentCode code]\n  p/IConstruct\n  (as-managed [_ env]\n    (let [element-fn (if (nil? element-ns) (:dom/element-fn env) (get-element-fn env element-ns))\n          env (cond-> env (some? element-ns) (assoc :dom/element-fn element-fn :dom/svg true))\n          ;; create-fn creates all necessary nodes but only exports those that will be accessed later in an array\n          ;; this might be faster if create-fn just closed over locals and returns the callbacks to be used later\n          ;; svelte does this but CLJS doesn't allow to set! locals so it would require ugly js* code to make it work\n          ;; didn't benchmark but the array variant shouldn't be that much slower. maybe even faster since\n          ;; the functions don't need to be recreated for each fragment instance\n          exports (.. code (create-fn env vals element-fn))]\n      (ManagedFragment. env code vals (common/dom-marker env) exports false)))\n\n  IEquiv\n  (-equiv [this ^FragmentInit other]\n    (and (instance? FragmentInit other)\n         (identical? code (. other -code))\n         (array-equiv vals (.-vals other)))))\n\n(defn fragment-init? [thing]\n  (instance? FragmentInit thing))\n\n(defn has-no-lazy-seqs? [vals]\n  (every? #(not (instance? cljs.core/LazySeq %)) vals))\n\n(defn fragment-init [vals element-ns code]\n  (assert (has-no-lazy-seqs? vals)  \"no lazy seqs allowed in fragments\")\n  (FragmentInit. vals element-ns code))\n\n;; for fallback code, relying on registry\n(def ^{:jsdoc [\"@dict\"]} known-fragments #js {})\n\n(defn reset-known-fragments! []\n  (set! known-fragments #js {}))\n\n(defn create-text\n  ;; {:jsdoc [\"@noinline\"]}\n  [env text]\n  (js/document.createTextNode text))\n\n(defn set-attr [env node key oval nval]\n  (a/set-attr env node key oval nval))\n\n\n(defn append-child\n  ;; {:jsdoc [\"@noinline\"]}\n  [parent child]\n  (.appendChild parent child))\n\n(defn managed-create [env other]\n  ;; FIXME: validate that return value implements the proper protocols\n  (p/as-managed other env))\n\n;; called by macro generated code\n(defn managed-append [parent other]\n  (when-not (satisfies? p/IManaged other)\n    (throw (ex-info \"cannot append-managed\" {:parent parent :other other})))\n  (p/dom-insert other parent nil))\n\n(defn managed-insert [component parent anchor]\n  (p/dom-insert component parent anchor))\n\n(defn managed-remove [component dom-remove?]\n  (p/destroy! component dom-remove?))\n\n;; called by macro generated code\n(defn update-managed [^ManagedFragment fragment env nodes idx oval nval]\n  ;; not comparing oval/nval because impls can do that if needed\n  (let [^not-native el (aget nodes idx)]\n    (if ^boolean (p/supports? el nval)\n      (p/dom-sync! el nval)\n      (let [next (common/replace-managed env el nval)]\n        (aset nodes idx next)\n        (when ^boolean (.-dom-entered? fragment)\n          (p/dom-entered! next))))))\n\n;; called by macro generated code\n(defn update-attr [env nodes idx ^not-native attr oval nval]\n  ;; FIXME: should maybe move the comparisons to the actual impls?\n  (when (not= oval nval)\n    (let [el (aget nodes idx)]\n      (set-attr env el attr oval nval))))\n\n(defn clear-attr [env nodes idx attr oval]\n  (let [node (aget nodes idx)]\n    (a/set-attr env node attr oval nil)))\n\n;; just so the macro doesn't have to use dot interop\n;; will likely be inlined by closure anyways\n(defn dom-insert-before [^js parent node anchor]\n  (.insertBefore parent node anchor))\n\n(defn dom-remove [^js node]\n  (.remove node))\n\n(defn css-join [from-el from-attrs]\n  [from-el from-attrs])\n\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["shadow.arborist.fragments/fragment-id","s","shadow.arborist.fragments/array-equiv","a","b","al","bl","i","cljs.core._EQ_","shadow.arborist.fragments/svg-ns","shadow.arborist.fragments/svg-element-fn","type","js/document.createElementNS","shadow.arborist.fragments/dom-element-fn","js/document.createElement","shadow.arborist.fragments/get-element-fn","env","element-ns","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.arborist.fragments/FragmentCode","shadow.arborist.fragments/->FragmentCode","create-fn","mount-fn","update-fn","destroy-fn","cljs.core/PROTOCOL_SENTINEL","shadow.arborist.fragments/ManagedFragment","shadow.arborist.fragments/->ManagedFragment","code","vals","marker","exports","dom-entered?","this","parent","anchor","item","next","and__5043__auto__","shadow.arborist.fragments/fragment-init?","nvals","dom-remove?","shadow.arborist.fragments/FragmentInit","shadow.arborist.fragments/->FragmentInit","_","element-fn","G__11695","cljs.core.assoc","shadow.arborist.common.dom_marker","other","thing","shadow.arborist.fragments/has-no-lazy-seqs?","p1__11720#","cljs.core/every?","cljs.core/LazySeq","shadow.arborist.fragments/fragment-init","js/Error","shadow.arborist.fragments/known-fragments","shadow.arborist.fragments/reset-known-fragments!","shadow.arborist.fragments/create-text","text","js/document.createTextNode","shadow.arborist.fragments/set-attr","node","key","oval","nval","shadow.arborist.attributes/set-attr","shadow.arborist.fragments/append-child","child","shadow.arborist.fragments/managed-create","shadow.arborist.protocols/as-managed","shadow.arborist.fragments/managed-append","cljs.core/native-satisfies?","shadow.arborist.protocols/IManaged","cljs.core.ex_info","shadow.arborist.protocols/dom-insert","shadow.arborist.fragments/managed-insert","component","shadow.arborist.fragments/managed-remove","shadow.arborist.protocols/destroy!","shadow.arborist.fragments/update-managed","fragment","nodes","idx","el","shadow.arborist.common/replace-managed","shadow.arborist.protocols/dom-entered!","shadow.arborist.fragments/update-attr","attr","cljs.core.not_EQ_","shadow.arborist.fragments/clear-attr","shadow.arborist.fragments/dom-insert-before","shadow.arborist.fragments/dom-remove","shadow.arborist.fragments/css-join","from-el","from-attrs"]],"~:used-vars",["^D",["~$shadow.arborist.fragments/css-join","~$shadow.arborist.fragments/append-child","~$cljs.core/PROTOCOL_SENTINEL","~$shadow.arborist.protocols/dom-insert","~$shadow.arborist.common/replace-managed","~$shadow.arborist.fragments/update-attr","~$shadow.arborist.fragments/update-managed","~$shadow.arborist.fragments/FragmentInit","~$shadow.arborist.fragments/fragment-init","~$shadow.arborist.fragments/managed-insert","~$cljs.core/=","~$shadow.arborist.fragments/managed-remove","~$shadow.arborist.protocols/IManaged","~$cljs.core/-write","~$js/document.createElementNS","~$shadow.arborist.fragments/reset-known-fragments!","~$cljs.core/not=","~$cljs.core/LazySeq","~$shadow.arborist.fragments/array-equiv","~$shadow.arborist.fragments/svg-element-fn","~$shadow.arborist.fragments/svg-ns","~$cljs.core/native-satisfies?","~$shadow.arborist.attributes/set-attr","~$shadow.arborist.fragments/FragmentCode","~$shadow.arborist.fragments/dom-element-fn","~$shadow.arborist.fragments/managed-append","~$shadow.arborist.protocols/as-managed","~$shadow.arborist.fragments/create-text","~$shadow.arborist.fragments/clear-attr","~$shadow.arborist.fragments/fragment-init?","~$shadow.arborist.fragments/dom-insert-before","~$shadow.arborist.fragments/->ManagedFragment","~$shadow.arborist.fragments/fragment-id","~$shadow.arborist.fragments/->FragmentCode","~$shadow.arborist.common/dom-marker","~$shadow.arborist.fragments/set-attr","~$shadow.arborist.fragments/dom-remove","~$shadow.arborist.fragments/get-element-fn","~$cljs.core/ex-info","~$shadow.arborist.protocols/dom-sync!","~$shadow.arborist.protocols/destroy!","~$shadow.arborist.protocols/supports?","~$cljs.core/not","~$shadow.arborist.fragments/->FragmentInit","~$shadow.arborist.fragments/has-no-lazy-seqs?","~$cljs.core/assoc","~$shadow.arborist.fragments/known-fragments","~$shadow.arborist.protocols/dom-entered!","~$js/document.createTextNode","~$shadow.arborist.fragments/ManagedFragment","~$js/document.createElement","~$cljs.core/every?","~$js/Error","~$shadow.arborist.fragments/managed-create"]]],"~:cache-keys",["~#cmap",[["^1:","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^Z","~$goog.dom.HtmlElement"]]],["^1:","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1:","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.asserts"]]],["^1:","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.array","~$goog.object","^2X","^2W"]]],["^1:","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2W"]]],["^1:","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y"]]],["^1:","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2X","~$goog.reflect","^2W"]]],["^1:","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","shadow/arborist/protocols.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^Y"]]],["^1:","shadow/arborist/common.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^Y","~$goog.dom","^U"]]],["^1:","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y"]]],"~:SHADOW-TIMESTAMP",[1693915017000,1693915017000,1667395541000],["^1:","shadow/arborist/attributes.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^Y","^2[","~$goog.string","~$goog.functions","~$clojure.string","^U"]]],["^1:","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","^39"]]],["^1:","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","~$goog.fs.blob","^30","~$goog.html.SafeScript","~$goog.html.trustedtypes","^32","^33","^34","^35"]]],["^1:","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^34","~$goog.html.SafeUrl","^35","^2Y","^2W"]]],["^1:","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","~$goog.dom.asserts","^3=","~$goog.html.SafeHtml","^3@","~$goog.html.SafeStyle","^3B","^31","~$goog.html.uncheckedconversions","^34","^2W"]]],["^1:","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^34","^32","^33","^3@","^3E","~$goog.html.SafeStyleSheet","^3B","~$goog.dom.TagName","^31","^35","^2Y","^36","^2Z","^2[","^2W","~$goog.dom.tags","^3A"]]],["^1:","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2["]]],["^1:","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Z","^2W","^2X"]]],["^1:","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","shadow/arborist/fragments.cljs"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^Y","^U","^V","^W"]]],["^1:","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Z","^2Y","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3H","~$goog.dom.safe","^3D","^3F","~$goog.math.Coordinate","~$goog.math.Size","^2[","^3<","^34","~$goog.string.Unicode","~$goog.userAgent"]]],["^1:","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.debug.Error","^3K"]]],["^1:","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Z","^2Y","~$goog.collections.maps","^3<","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1:","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",[]]],["^1:","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Z","^2["]]],["^1:","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^Y","^3<","~$goog.string.StringBuffer"]]],["^1:","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^3L","^3F","^34","^2W"]]],["^1:","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.labs.userAgent","^2W"]]],["^1:","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.math"]]],["^1:","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","^3D","^3@","^3E","^3G","^3B","^31","^34","^2W","^32"]]],["^1:","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z"]]],["^1:","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","~$goog.math.Long","~$goog.math.Integer","^3<","^2[","^2Z","~$goog.Uri","^3W"]]],["^1:","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^34","^35","^3A","^2Y"]]],["^1:","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^34","^3E","^35","^2[","^2Y","^2W"]]],["^1:","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^39"]]],["^1:","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^3P"]]],["^1:","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","^3<"]]],["^1:","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2R",["^ ","^2S",null,"^2T",["^D",[]],"^2U",["^Z","^2Y","^35"]]]]],"~:clj-info",["^ ","jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1667395541000,"jar:file:/home/jam/.m2/repository/com/thheller/shadow-grove/0.4.2/shadow-grove-0.4.2.jar!/shadow/arborist/fragments.cljc",1693915017000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1667395541000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",1,"^8",5,"^9",1,"^:",30],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E",["^ ","^F",["^ ","^G",["^H",[["~$&","^I"]]],"^7",552,"^8",1,"^6","shadow/arborist/fragments.cljc","^J","^K","^L","^M","^N",true],"^O",["^ ","^G",["^H",[["~$&","^I"]]],"^7",555,"^8",1,"^6","shadow/arborist/fragments.cljc","^J","^P","^L","^M","^N",true]],"~:shadow/js-access-properties",["^D",["createTextNode","createElement","createElementNS"]],"^J","^M","^Q",["^ "],"^S",null,"^T",["^ ","^U","^U","~$p","^U","^V","^V","~$a","^V","^W","^W","^X","^W","^Y","^Y","^Z","^Z"],"^[",["^D",["^10","^11"]],"~:shadow/js-access-global",["^D",["document","Error"]],"^12",null,"~:defs",["^ ","~$->FragmentInit",["^ ","~:protocol-inline",null,"^5",["^ ","~:protocols",["^D",["~$cljs.core/IEquiv","~$shadow.arborist.protocols/IConstruct"]],"^6","shadow/arborist/fragments.cljs","^:",22,"^8",10,"~:factory","~:positional","^7",85,"^9",85,"^G",["^H",["~$quote",["^H",[["~$vals","~$element-ns","~$code"]]]]],"~:skip-protocol-flag",["^D",["^4W"]],"~:doc","Positional factory function for shadow.arborist.fragments/FragmentInit."],"^4V",["^D",["^4W","^4X"]],"^J","^2E","^6","shadow/arborist/fragments.cljs","^:",22,"~:method-params",["^H",[["^50","^51","^52"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^8",1,"~:variadic?",false,"^4Y","^4Z","^7",85,"~:ret-tag","^1M","^9",85,"~:max-fixed-arity",3,"~:fn-var",true,"^G",["^H",["^4[",["^H",[["^50","^51","^52"]]]]],"^53",["^D",["^4W"]],"^54","Positional factory function for shadow.arborist.fragments/FragmentInit."],"~$array-equiv",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",14,"^8",7,"^9",14,"^:",18,"^G",["^H",["^4[",["^H",[["~$a","~$b"]]]]]],"^J","^1X","^6","shadow/arborist/fragments.cljs","^:",18,"^55",["^H",[["~$a","~$b"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",14,"^59",["^D",["~$boolean","~$clj-nil"]],"^9",14,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["~$a","~$b"]]]]]],"~$dom-element-fn",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",31,"^8",7,"^9",31,"^:",21,"^G",["^H",["^4[",["^H",[["~$type"]]]]]],"^J","^22","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^5@"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",31,"^59","~$js","^9",31,"^5:",1,"^5;",true,"^G",["^H",["^4[",["^H",[["^5@"]]]]]],"~$append-child",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",129,"^8",7,"^9",129,"^:",19,"^G",["^H",["^4[",["^H",[["~$parent","~$child"]]]]]],"^J","^1G","^6","shadow/arborist/fragments.cljs","^:",19,"^55",["^H",[["^5C","^5D"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",129,"^59","~$any","^9",129,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^5C","^5D"]]]]]],"~$update-managed",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",151,"^8",7,"^9",151,"^:",21,"^G",["^H",["^4[",["^H",[["~$fragment","~$env","~$nodes","~$idx","~$oval","~$nval"]]]]]],"^J","^1L","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^5G","^5H","^5I","^5J","^5K","^5L"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",151,"^59",["^D",["^5E","^5>"]],"^9",151,"^5:",6,"^5;",true,"^G",["^H",["^4[",["^H",[["^5G","^5H","^5I","^5J","^5K","^5L"]]]]]],"~$FragmentInit",["^ ","~:num-fields",3,"^4V",["^D",["^4W","^4X"]],"^J","^1M","^6","shadow/arborist/fragments.cljs","^:",22,"~:type",true,"^8",10,"^7",85,"~:record",false,"^9",85,"~:tag","~$function","^53",["^D",["^4W"]]],"~$update-attr",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",162,"^8",7,"^9",162,"^:",18,"^G",["^H",["^4[",["^H",[["^5H","^5I","^5J","~$attr","^5K","^5L"]]]]]],"^J","^1K","^6","shadow/arborist/fragments.cljs","^:",18,"^55",["^H",[["^5H","^5I","^5J","^5T","^5K","^5L"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",162,"^59",["^D",["^5E","^5>"]],"^9",162,"^5:",6,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^5I","^5J","^5T","^5K","^5L"]]]]]],"~$dom-remove",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",177,"^8",7,"^9",177,"^:",17,"^G",["^H",["^4[",["^H",[["~$node"]]]]]],"^J","^2>","^6","shadow/arborist/fragments.cljs","^:",17,"^55",["^H",[["^5V"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",177,"^59","^5A","^9",177,"^5:",1,"^5;",true,"^G",["^H",["^4[",["^H",[["^5V"]]]]]],"~$fragment-id",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",8,"^8",7,"^9",8,"^:",18,"^G",["^H",["^4[",["^H",[["~$s"]]]]],"~:jsdoc",["@idGenerator {consistent}"]],"^J","^2:","^6","shadow/arborist/fragments.cljs","^:",18,"^55",["^H",[["~$s"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",8,"^9",8,"^5:",1,"^5;",true,"^G",["^H",["^4[",["^H",[["~$s"]]]]],"^5X",["@idGenerator {consistent}"]],"~$get-element-fn",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",34,"^8",7,"^9",34,"^:",21,"^G",["^H",["^4[",["^H",[["^5H","^51"]]]]]],"^J","^2?","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^5H","^51"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",34,"^9",34,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^51"]]]]]],"~$set-attr",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",125,"^8",7,"^9",125,"^:",15,"^G",["^H",["^4[",["^H",[["^5H","^5V","~$key","^5K","^5L"]]]]]],"^J","^2=","^6","shadow/arborist/fragments.cljs","^:",15,"^55",["^H",[["^5H","^5V","^5[","^5K","^5L"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",125,"^59","^5E","^9",125,"^5:",5,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^5V","^5[","^5K","^5L"]]]]]],"~$svg-element-fn",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",28,"^8",7,"^9",28,"^:",21,"^G",["^H",["^4[",["^H",[["^5@"]]]]]],"^J","^1Y","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^5@"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",28,"^59","^5A","^9",28,"^5:",1,"^5;",true,"^G",["^H",["^4[",["^H",[["^5@"]]]]]],"~$reset-known-fragments!",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",117,"^8",7,"^9",117,"^:",29,"^G",["^H",["^4[",["^H",[[]]]]]],"^J","^1U","^6","shadow/arborist/fragments.cljs","^:",29,"^55",["^H",[[]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",117,"^9",117,"^5:",0,"^5;",true,"^G",["^H",["^4[",["^H",[[]]]]]],"~$FragmentCode",["^ ","^5N",4,"^4V",["^D",[]],"^J","^21","^6","shadow/arborist/fragments.cljs","^:",22,"^5O",true,"^8",10,"^7",39,"^5P",false,"^9",39,"^5Q","^5R","^53",null],"~$managed-append",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",139,"^8",7,"^9",139,"^:",21,"^G",["^H",["^4[",["^H",[["^5C","~$other"]]]]]],"^J","^23","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^5C","^64"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",139,"^59","^5E","^9",139,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^5C","^64"]]]]]],"~$ManagedFragment",["^ ","^5N",6,"^4V",["^D",["^1R"]],"^J","^2K","^6","shadow/arborist/fragments.cljs","^:",25,"^5O",true,"^8",10,"^7",43,"^5P",false,"^9",43,"^5Q","^5R","^53",null],"~$->FragmentCode",["^ ","^4U",null,"^5",["^ ","^4V",["^D",[]],"^6","shadow/arborist/fragments.cljs","^:",22,"^8",10,"^4Y","^4Z","^7",39,"^9",39,"^G",["^H",["^4[",["^H",[["~$create-fn","~$mount-fn","~$update-fn","~$destroy-fn"]]]]],"^53",null,"^54","Positional factory function for shadow.arborist.fragments/FragmentCode."],"^4V",["^D",[]],"^J","^2;","^6","shadow/arborist/fragments.cljs","^:",22,"^55",["^H",[["^67","^68","^69","^6:"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^4Y","^4Z","^7",39,"^59","^21","^9",39,"^5:",4,"^5;",true,"^G",["^H",["^4[",["^H",[["^67","^68","^69","^6:"]]]]],"^53",null,"^54","Positional factory function for shadow.arborist.fragments/FragmentCode."],"~$clear-attr",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",168,"^8",7,"^9",168,"^:",17,"^G",["^H",["^4[",["^H",[["^5H","^5I","^5J","^5T","^5K"]]]]]],"^J","^26","^6","shadow/arborist/fragments.cljs","^:",17,"^55",["^H",[["^5H","^5I","^5J","^5T","^5K"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",168,"^59","^5E","^9",168,"^5:",5,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^5I","^5J","^5T","^5K"]]]]]],"~$managed-create",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",134,"^8",7,"^9",134,"^:",21,"^G",["^H",["^4[",["^H",[["^5H","^64"]]]]]],"^J","^2O","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^5H","^64"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",134,"^59","^5E","^9",134,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^64"]]]]]],"~$svg-ns",["^ ","^J","^1Z","^6","shadow/arborist/fragments.cljs","^7",25,"^8",1,"^9",25,"^:",12,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",25,"^8",6,"^9",25,"^:",12],"^5Q","~$string"],"~$create-text",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",120,"^8",7,"^9",120,"^:",18,"^G",["^H",["^4[",["^H",[["^5H","~$text"]]]]]],"^J","^25","^6","shadow/arborist/fragments.cljs","^:",18,"^55",["^H",[["^5H","^6@"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",120,"^59","^5A","^9",120,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^6@"]]]]]],"~$css-join",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",180,"^8",7,"^9",180,"^:",15,"^G",["^H",["^4[",["^H",[["~$from-el","~$from-attrs"]]]]]],"^J","^1F","^6","shadow/arborist/fragments.cljs","^:",15,"^55",["^H",[["^6B","^6C"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",180,"^59","~$cljs.core/IVector","^9",180,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^6B","^6C"]]]]]],"~$fragment-init?",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",104,"^8",7,"^9",104,"^:",21,"^G",["^H",["^4[",["^H",[["~$thing"]]]]]],"^J","^27","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^6F"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",104,"^59","^5=","^9",104,"^5:",1,"^5;",true,"^G",["^H",["^4[",["^H",[["^6F"]]]]]],"~$managed-remove",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",147,"^8",7,"^9",147,"^:",21,"^G",["^H",["^4[",["^H",[["~$component","~$dom-remove?"]]]]]],"^J","^1Q","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^6H","^6I"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",147,"^59","^5E","^9",147,"^5:",2,"^5;",true,"^G",["^H",["^4[",["^H",[["^6H","^6I"]]]]]],"~$->ManagedFragment",["^ ","^4U",null,"^5",["^ ","^4V",["^D",["^1R"]],"^6","shadow/arborist/fragments.cljs","^:",25,"^8",10,"^4Y","^4Z","^7",43,"^9",43,"^G",["^H",["^4[",["^H",[["^5H","^52","^50","~$marker","~$exports","~$dom-entered?"]]]]],"^53",null,"^54","Positional factory function for shadow.arborist.fragments/ManagedFragment."],"^4V",["^D",["^1R"]],"^J","^29","^6","shadow/arborist/fragments.cljs","^:",25,"^55",["^H",[["^5H","^52","^50","^6K","^6L","^6M"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^4Y","^4Z","^7",43,"^59","^2K","^9",43,"^5:",6,"^5;",true,"^G",["^H",["^4[",["^H",[["^5H","^52","^50","^6K","^6L","^6M"]]]]],"^53",null,"^54","Positional factory function for shadow.arborist.fragments/ManagedFragment."],"~$dom-insert-before",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",174,"^8",7,"^9",174,"^:",24,"^G",["^H",["^4[",["^H",[["^5C","^5V","~$anchor"]]]]]],"^J","^28","^6","shadow/arborist/fragments.cljs","^:",24,"^55",["^H",[["^5C","^5V","^6O"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",174,"^59","^5A","^9",174,"^5:",3,"^5;",true,"^G",["^H",["^4[",["^H",[["^5C","^5V","^6O"]]]]]],"~$fragment-init",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",110,"^8",7,"^9",110,"^:",20,"^G",["^H",["^4[",["^H",[["^50","^51","^52"]]]]]],"^J","^1N","^6","shadow/arborist/fragments.cljs","^:",20,"^55",["^H",[["^50","^51","^52"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",110,"^59","^1M","^9",110,"^5:",3,"^5;",true,"^G",["^H",["^4[",["^H",[["^50","^51","^52"]]]]]],"~$managed-insert",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",144,"^8",7,"^9",144,"^:",21,"^G",["^H",["^4[",["^H",[["^6H","^5C","^6O"]]]]]],"^J","^1O","^6","shadow/arborist/fragments.cljs","^:",21,"^55",["^H",[["^6H","^5C","^6O"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",144,"^59","^5E","^9",144,"^5:",3,"^5;",true,"^G",["^H",["^4[",["^H",[["^6H","^5C","^6O"]]]]]],"~$known-fragments",["^ ","^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",115,"^8",26,"^9",115,"^:",41,"^5X",["@dict"]],"^J","^2H","^6","shadow/arborist/fragments.cljs","^:",41,"^8",1,"^7",115,"^9",115,"^5Q","~$object","^5X",["@dict"]],"~$has-no-lazy-seqs?",["^ ","^4U",null,"^5",["^ ","^6","shadow/arborist/fragments.cljs","^7",107,"^8",7,"^9",107,"^:",24,"^G",["^H",["^4[",["^H",[["^50"]]]]]],"^J","^2F","^6","shadow/arborist/fragments.cljs","^:",24,"^55",["^H",[["^50"]]],"^56",null,"^57",["^H",[null,null]],"^8",1,"^58",false,"^7",107,"^59","^5=","^9",107,"^5:",1,"^5;",true,"^G",["^H",["^4[",["^H",[["^50"]]]]]]],"^11",["^ ","^M","^M","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^[",["^D",["~:synced","^5=","^6:","~:parent","^68","~:other","^6K","^51","^5H","^62","^50","^6M","^6L","^69","~:dom/svg","^5Q","~:mutable","^67","~:dom/element-fn","^52"]],"~:order",["^67","^68","^69","^6:","^6V","^5H","^52","^5Q","^62","^50","^6Z","^6K","^6L","^6M","^5=","^6[","^6Y","^51","^6W","^6X"]],"^16",["^ ","^11",["^D",[]],"^10",["^D",[]]],"^17",["^ "],"^18",["^Z","^Y","^U","^V","^W"]],"^L","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2Q",[["^73","~:static-fns"],true,["^73","~:shadow-tweaks"],null,["^73","~:source-map-inline"],null,["^73","~:elide-asserts"],false,["^73","~:optimize-constants"],null,["^73","^1="],null,["^73","~:external-config"],null,["^73","~:tooling-config"],null,["^73","~:emit-constants"],null,["^73","~:load-tests"],null,["^73","~:form-size-threshold"],null,["^73","~:global-goog-object&array"],null,["^73","~:data-readers"],null,["^73","~:infer-externs"],"~:auto",["^73","^1?"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^73","~:fn-invoke-direct"],null,["^73","~:source-map"],"/dev/null"]]]