["^ ","~:output",["^ ","~:js","goog.provide('shadow.grove.eql_query');\nshadow.grove.eql_query.lazy_seq_QMARK_ = (function shadow$grove$eql_query$lazy_seq_QMARK_(thing){\nreturn (((thing instanceof cljs.core.LazySeq)) && ((!(cljs.core.realized_QMARK_(thing)))));\n});\nif((typeof shadow !== 'undefined') && (typeof shadow.grove !== 'undefined') && (typeof shadow.grove.eql_query !== 'undefined') && (typeof shadow.grove.eql_query.attr !== 'undefined')){\n} else {\nshadow.grove.eql_query.attr = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),new cljs.core.Keyword(\"shadow.grove.eql-query\",\"default\",\"shadow.grove.eql-query/default\",1209436522)], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__12462 = cljs.core.get_global_hierarchy;\nreturn (fexpr__12462.cljs$core$IFn$_invoke$arity$0 ? fexpr__12462.cljs$core$IFn$_invoke$arity$0() : fexpr__12462.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"shadow.grove.eql-query\",\"attr\"),(function (env,db,current,query_part,params){\nreturn query_part;\n}),new cljs.core.Keyword(\"shadow.grove.eql-query\",\"default\",\"shadow.grove.eql-query/default\",1209436522),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nshadow.grove.eql_query.attr.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"shadow.grove.eql-query\",\"default\",\"shadow.grove.eql-query/default\",1209436522),(function (env,db,current,query_part,params){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(current,query_part,new cljs.core.Keyword(\"db\",\"undefined\",\"db/undefined\",-1970497934));\n}));\nshadow.grove.eql_query.process_lookup = (function shadow$grove$eql_query$process_lookup(env,db,current,result,kw,params){\nvar calced = shadow.grove.eql_query.attr.cljs$core$IFn$_invoke$arity$5(env,db,current,kw,params);\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547),calced)){\nreturn calced;\n} else {\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"db\",\"undefined\",\"db/undefined\",-1970497934),calced)){\nreturn result;\n} else {\nif(goog.DEBUG){\nif(shadow.grove.eql_query.lazy_seq_QMARK_(calced)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"the lookup of attribute \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(kw),\" returned a lazy sequence. Attributes must not return lazy sequences. Realize the result before returning (eg. doall).\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"kw\",\"kw\",1158308175),kw,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),calced], null));\n} else {\n}\n} else {\n}\n\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(result,kw,calced);\n\n}\n}\n});\nshadow.grove.eql_query.process_query_part = (function shadow$grove$eql_query$process_query_part(env,db,current,result,query_part){\nif(cljs.core.keyword_identical_QMARK_(query_part,new cljs.core.Keyword(\"db\",\"all\",\"db/all\",892118348))){\nreturn cljs.core.transient$(current);\n} else {\nif((query_part instanceof cljs.core.Keyword)){\nreturn shadow.grove.eql_query.process_lookup(env,db,current,result,query_part,cljs.core.PersistentArrayMap.EMPTY);\n} else {\nif(cljs.core.list_QMARK_(query_part)){\nvar vec__12467 = query_part;\nvar kw = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12467,(0),null);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12467,(1),null);\nreturn shadow.grove.eql_query.process_lookup(env,db,current,result,kw,params);\n} else {\nif(cljs.core.map_QMARK_(query_part)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(query_part))){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"join map with more than one entry\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-part\",\"query-part\",-130059393),query_part], null));\n}\n\nvar vec__12472 = cljs.core.first(query_part);\nvar join_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12472,(0),null);\nvar join_attrs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12472,(1),null);\nif(cljs.core.vector_QMARK_(join_attrs)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"join value must be a vector\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-part\",\"query-part\",-130059393),query_part], null));\n}\n\nif((join_key instanceof cljs.core.Keyword)){\nvar join_val = cljs.core.get.cljs$core$IFn$_invoke$arity$3(current,join_key,new cljs.core.Keyword(\"shadow.grove.eql-query\",\"missing\",\"shadow.grove.eql-query/missing\",-735544437));\nvar join_val__$1 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"shadow.grove.eql-query\",\"missing\",\"shadow.grove.eql-query/missing\",-735544437),join_val))?join_val:shadow.grove.eql_query.attr.cljs$core$IFn$_invoke$arity$5(env,db,current,join_key,cljs.core.PersistentArrayMap.EMPTY));\nif(cljs.core.keyword_identical_QMARK_(join_val__$1,new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547))){\nreturn join_val__$1;\n} else {\nif(cljs.core.keyword_identical_QMARK_(join_val__$1,new cljs.core.Keyword(\"db\",\"undefined\",\"db/undefined\",-1970497934))){\nreturn result;\n} else {\nif((join_val__$1 == null)){\nreturn result;\n} else {\nif(shadow.grove.db.ident_QMARK_(join_val__$1)){\nvar val = cljs.core.get.cljs$core$IFn$_invoke$arity$3(db,join_val__$1,new cljs.core.Keyword(\"shadow.grove.eql-query\",\"missing\",\"shadow.grove.eql-query/missing\",-735544437));\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"shadow.grove.eql-query\",\"missing\",\"shadow.grove.eql-query/missing\",-735544437),val)){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(result,join_key,new cljs.core.Keyword(\"shadow.grove.eql-query\",\"not-found\",\"shadow.grove.eql-query/not-found\",18009254));\n} else {\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547),val)){\nreturn val;\n} else {\nvar query_val = shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4(env,db,val,join_attrs);\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547),query_val)){\nreturn query_val;\n} else {\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(result,join_key,query_val);\n\n}\n\n}\n}\n} else {\nif(cljs.core.map_QMARK_(join_val__$1)){\nvar query_val = shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4(env,db,join_val__$1,join_attrs);\nif(cljs.core.keyword_identical_QMARK_(query_val,new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547))){\nreturn query_val;\n} else {\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(result,join_key,query_val);\n\n}\n} else {\nif(cljs.core.coll_QMARK_(join_val__$1)){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(result,join_key,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (join_item){\nif(shadow.grove.db.ident_QMARK_(join_item)){\nvar joined = cljs.core.get.cljs$core$IFn$_invoke$arity$2(db,join_item);\nif(cljs.core.map_QMARK_(joined)){\nreturn shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4(env,db,joined,join_attrs);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"coll item join missing\",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"join-key\",\"join-key\",750199789),join_key,new cljs.core.Keyword(null,\"join-val\",\"join-val\",-990533655),join_val__$1,new cljs.core.Keyword(null,\"join-item\",\"join-item\",-896163302),join_item], null));\n}\n} else {\nif(cljs.core.map_QMARK_(join_item)){\nreturn shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4(env,db,join_item,join_attrs);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"join-value contained unknown thing\",new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"join-key\",\"join-key\",750199789),join_key,new cljs.core.Keyword(null,\"join-val\",\"join-val\",-990533655),join_val__$1,new cljs.core.Keyword(null,\"join-item\",\"join-item\",-896163302),join_item,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),current], null));\n\n}\n}\n}),join_val__$1));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"don't know how to join\",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-part\",\"query-part\",-130059393),query_part,new cljs.core.Keyword(null,\"join-val\",\"join-val\",-990533655),join_val__$1,new cljs.core.Keyword(null,\"join-key\",\"join-key\",750199789),join_key], null));\n\n}\n}\n}\n}\n}\n}\n} else {\nif(shadow.grove.db.ident_QMARK_(join_key)){\nvar join_val = cljs.core.get.cljs$core$IFn$_invoke$arity$2(db,join_key);\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547),join_val)){\nreturn join_val;\n} else {\nif((join_val == null)){\nreturn result;\n} else {\nvar query_val = shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4(env,db,join_val,join_attrs);\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547),query_val)){\nreturn query_val;\n} else {\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(result,join_key,query_val);\n\n}\n\n}\n}\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"failed to join\",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-part\",\"query-part\",-130059393),query_part,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),current,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result], null));\n\n}\n}\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"invalid query part\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"part\",\"part\",77757738),query_part], null));\n\n}\n}\n}\n}\n});\nshadow.grove.eql_query.query = (function shadow$grove$eql_query$query(var_args){\nvar G__12509 = arguments.length;\nswitch (G__12509) {\ncase 3:\nreturn shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$3 = (function (env,db,query_data){\nreturn shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4(env,db,db,query_data);\n}));\n\n(shadow.grove.eql_query.query.cljs$core$IFn$_invoke$arity$4 = (function (env,db,current,query_data){\nif((!((env == null)))){\n} else {\nthrow (new Error(\"Assert failed: (some? env)\"));\n}\n\nif(cljs.core.map_QMARK_(db)){\n} else {\nthrow (new Error(\"Assert failed: (map? db)\"));\n}\n\nif(cljs.core.map_QMARK_(current)){\n} else {\nthrow (new Error(\"Assert failed: (map? current)\"));\n}\n\nif(cljs.core.vector_QMARK_(query_data)){\n} else {\nthrow (new Error(\"Assert failed: (vector? query-data)\"));\n}\n\nvar len = cljs.core.count(query_data);\nvar current__$1 = current;\nvar result = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);\nvar i = (0);\nwhile(true){\nif((i >= len)){\nreturn cljs.core.persistent_BANG_(result);\n} else {\nvar query_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(query_data,i);\nvar result__$1 = shadow.grove.eql_query.process_query_part(env,db,current__$1,result,query_part);\nif(cljs.core.keyword_identical_QMARK_(result__$1,new cljs.core.Keyword(\"db\",\"loading\",\"db/loading\",-737049547))){\nreturn result__$1;\n} else {\nvar G__12537 = current__$1;\nvar G__12538 = result__$1;\nvar G__12539 = (i + (1));\ncurrent__$1 = G__12537;\nresult = G__12538;\ni = G__12539;\ncontinue;\n}\n}\nbreak;\n}\n}));\n\n(shadow.grove.eql_query.query.cljs$lang$maxFixedArity = 4);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","minimal EQL query engine","~:file","shadow/grove/eql_query.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",27],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.grove.eql-query","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$shadow.grove.db","^M","~$db","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^E",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^G","minimal EQL query engine",["^V",["^R",["^M","~:as","^N"]]]]],"~:flags",["^ ","^R",["^E",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^M"]],"^J","^G","~:resource-id",["~:shadow.build.classpath/resource","shadow/grove/eql_query.cljc"],"~:compiled-at",1693994118069,"^H",["^ ","^M","^M","^N","^M","^O","^O","^P","^P"],"~:resource-name","shadow/grove/eql_query.cljc","~:warnings",[],"~:source","(ns shadow.grove.eql-query\n  \"minimal EQL query engine\"\n  (:require [shadow.grove.db :as db]))\n\n;; ideally would like to use pathom but currently that carries too much overhead\n;; and is over 10x slower for small simple queries. assuming that a page\n;; has 50 small queries the difference of 0.4ms vs 8.5ms per query is huge\n;; also has quite excessive code size (partly because of spec)\n\n;; pathom of course has a bajillion more features, just need to find a way\n;; to make it more performant for the grove use-cases of many small queries\n;; vs one large query that is composed from the root like fulcro does\n;; I might have just configured or used it wrong\n\n;; as long as everything is EQL it should be fine and easy to switch later\n\n;; unions are currently not supported. not sure where you'd ever need them.\n;; seems like it's only useful if you are forced to build one big query\n;; like in om/fulcro systems which is the first thing I dropped since it felt\n;; way too restrictive to use for me and that concept never \"clicked\".\n\n;; IMHO in the presence of suspense it no longer makes sense to build large queries\n;; since you may want to render parts early when you can\n\n#?(:clj\n   (defn keyword-identical? [x y]\n     (identical? x y)))\n\n(defn lazy-seq? [thing]\n  (and (instance? #?(:clj clojure.lang.LazySeq :cljs cljs.core/LazySeq) thing)\n       (not (realized? thing))))\n\n(declare\n  ^{:arglists '([env db query-data] [env db current query-data])}\n  query)\n\n;; FIXME: shouldn't use a multi-method since DCE doesn't like it\n;; but is the easiest to use with hot-reload in mind\n\n(defmulti attr\n  (fn [env db current query-part params] query-part)\n  :default ::default)\n\n(defmethod attr ::default [env db current query-part params]\n  (get current query-part :db/undefined))\n\n;; kw query with optional params\n;; ::foo\n;; (::foo {:bar 1})\n(defn- process-lookup [env db current result kw params]\n  (let [calced (attr env db current kw params)]\n    (cond\n      (keyword-identical? :db/loading calced)\n      calced\n\n      ;; don't add to result\n      (keyword-identical? :db/undefined calced)\n      result\n\n      :else\n      ;; FIXME: alias support\n      (do #?(:cljs\n             (when ^boolean js/goog.DEBUG\n               (when (lazy-seq? calced)\n                 (throw (ex-info (str \"the lookup of attribute \" kw \" returned a lazy sequence. Attributes must not return lazy sequences. Realize the result before returning (eg. doall).\")\n                          {:kw kw\n                           :result calced})))))\n          (assoc! result kw calced)))))\n\n;; FIXME: this tracking of :db/loading is really annoying, should probably just throw instead?\n(defn- process-query-part\n  [env db current result query-part]\n  (cond\n    (keyword-identical? query-part :db/all)\n    (transient current)\n\n    ;; simple attr\n    (keyword? query-part)\n    (process-lookup env db current result query-part {})\n\n    ;; (::foo {:params 1})\n    (list? query-part)\n    (let [[kw params] query-part]\n      (process-lookup env db current result kw params))\n\n    ;; join\n    ;; {ident [attrs]}\n    ;; {::foo [attrs]}\n    ;; {(::foo {:params 1} [attrs])\n    (map? query-part)\n    (do (when-not (= 1 (count query-part))\n          (throw (ex-info \"join map with more than one entry\" {:query-part query-part})))\n\n        (let [[join-key join-attrs] (first query-part)]\n          (when-not (vector? join-attrs)\n            (throw (ex-info \"join value must be a vector\" {:query-part query-part})))\n\n          (cond\n            (keyword? join-key)\n            (let [join-val (get current join-key ::missing)\n                  join-val\n                  (if (not= ::missing join-val)\n                    join-val\n                    ;; process-lookup but without associng the result since we need to process it\n                    (attr env db current join-key {}))]\n\n              (cond\n                (keyword-identical? join-val :db/loading)\n                join-val\n\n                (keyword-identical? join-val :db/undefined)\n                result\n\n                ;; FIXME: should this return nil or no key at all\n                ;; [{:foo [:bar]}] against {:foo nil}\n                ;; either {} or {:foo nil}?\n                (nil? join-val)\n                result\n\n                ;; {:some-prop [:some-other-ident 123]}\n                ;; FIXME: buggy if val is [:foo :bar] (just a vector of two keywords, no ident)\n                ;; but then the user shouldn't be trying to join so should be fine\n                (db/ident? join-val)\n                (let [val (get db join-val ::missing)]\n                  (cond\n                    (keyword-identical? ::missing val)\n                    (assoc! result join-key ::not-found)\n\n                    (keyword-identical? :db/loading val)\n                    val\n\n                    ;; FIXME: check more possible vals?\n                    :else\n                    (let [query-val (query env db val join-attrs)]\n                      (cond\n                        (keyword-identical? :db/loading query-val)\n                        query-val\n\n                        :else\n                        (assoc! result join-key query-val)))))\n\n                ;; nested-map, may want to join nested\n                (map? join-val)\n                (let [query-val (query env db join-val join-attrs)]\n                  (cond\n                    (keyword-identical? query-val :db/loading)\n                    query-val\n                    :else\n                    (assoc! result join-key query-val)))\n\n                ;; {:some-prop [[:some-other-ident 123] [:some-other-ident 456]]}\n                ;; {:some-prop [{:foo 1} {:foo 2}]}\n                ;; FIXME: should it preserve sets?\n                (coll? join-val)\n                (assoc! result join-key\n                  (mapv\n                    (fn [join-item]\n                      (cond\n                        (db/ident? join-item)\n                        (let [joined (get db join-item)]\n                          (if (map? joined)\n                            (query env db joined join-attrs)\n                            (throw (ex-info \"coll item join missing\" {:join-key join-key\n                                                                      :join-val join-val\n                                                                      :join-item join-item}))))\n\n                        (map? join-item)\n                        (query env db join-item join-attrs)\n\n                        :else\n                        (throw (ex-info \"join-value contained unknown thing\"\n                                 {:join-key join-key\n                                  :join-val join-val\n                                  :join-item join-item\n                                  :current current}))))\n                    join-val))\n\n                :else\n                (throw (ex-info \"don't know how to join\" {:query-part query-part :join-val join-val :join-key join-key}))))\n\n            ;; from root\n            (db/ident? join-key)\n            (let [join-val (get db join-key)]\n              (cond\n                (keyword-identical? :db/loading join-val)\n                join-val\n\n                (nil? join-val)\n                result\n\n                :else\n                (let [query-val (query env db join-val join-attrs)]\n                  (cond\n                    (keyword-identical? :db/loading query-val)\n                    query-val\n                    :else\n                    (assoc! result join-key query-val)))))\n\n            :else\n            (throw (ex-info \"failed to join\" {:query-part query-part\n                                              :current current\n                                              :result result})))))\n\n\n    :else\n    (throw (ex-info \"invalid query part\" {:part query-part}))))\n\n(defn query\n  ([env db query-data]\n   (query env db db query-data))\n  ([env db current query-data]\n   {:pre [(some? env)\n          (map? db)\n          (map? current)\n          (vector? query-data)]}\n   (let [len (count query-data)]\n     (loop [current current\n            result (transient {})\n            i 0]\n       (if (>= i len)\n         (persistent! result)\n         (let [query-part (nth query-data i)\n               result (process-query-part env db current result query-part)]\n           (if (keyword-identical? result :db/loading)\n             result\n             (recur current result (inc i)))))))))\n\n\n(comment\n  (query {}\n    {:hello {:world 1 :foo true}}\n    [{:hello [:world]}]))","~:reader-features",["^E",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["shadow.grove.eql-query/lazy-seq?","thing","cljs.core/LazySeq","cljs.core/realized?","js/shadow","js/shadow.grove","js/shadow.grove.eql-query","js/shadow.grove.eql-query.attr","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__12462","cljs.core/MultiFn","cljs.core.symbol","shadow.grove.eql-query/attr","env","db","current","query-part","params","shadow.grove.eql-query/process-lookup","result","kw","calced","cljs.core/keyword-identical?","js/goog.DEBUG","cljs.core.ex_info","cljs.core.assoc_BANG_","shadow.grove.eql-query/process-query-part","cljs.core/transient","cljs.core/Keyword","cljs.core/list?","vec__12467","cljs.core.nth","cljs.core/map?","cljs.core._EQ_","cljs.core/count","vec__12472","join-key","join-attrs","cljs.core/first","cljs.core/vector?","join-val","cljs.core.not_EQ_","shadow.grove.db/ident?","val","query-val","shadow.grove.eql_query.query","cljs.core/coll?","cljs.core.mapv","join-item","joined","var_args","G__12509","shadow.grove.eql-query/query","js/Error","query-data","len","i","cljs.core/persistent!"]],"~:used-vars",["^E",["~$cljs.core/MultiFn","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/count","~$cljs.core/Keyword","~$shadow.grove.eql-query/attr","~$cljs.core/mapv","~$cljs.core/not=","~$cljs.core/keyword-identical?","~$cljs.core/LazySeq","~$cljs.core/atom","~$shadow.grove.eql-query/process-lookup","~$js/shadow.grove","~$cljs.core/map?","~$cljs.core/-add-method","~$cljs.core/get","~$shadow.grove.db/ident?","~$shadow.grove.eql-query/query","~$cljs.core/symbol","~$js/shadow.grove.eql-query.attr","~$cljs.core/persistent!","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/list?","~$js/goog.DEBUG","~$js/shadow.grove.eql-query","~$cljs.core/transient","~$cljs.core/realized?","~$cljs.core/not","~$shadow.grove.eql-query/process-query-part","~$cljs.core/coll?","~$js/shadow","~$cljs.core/first","~$cljs.core/assoc!","~$js/Error","~$shadow.grove.eql-query/lazy-seq?"]]],"~:cache-keys",["~#cmap",[["^11","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^E",[]],"~:deps-syms",["^P","~$goog.dom.HtmlElement"]]],["^11","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^11","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2?"]]],["^11","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@"]]],["^11","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@"]]],"~:SHADOW-TIMESTAMP",[1693915017000,1693915017000,1667395541000],["^11","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@","~$goog.reflect"]]],["^11","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@","~$goog.fs.blob","^2A","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2C","^2D","^2E","^2F"]]],["^11","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2E","~$goog.html.SafeUrl","^2F","^2@","^2?"]]],["^11","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2J","~$goog.html.SafeStyle","^2L","^2B","~$goog.html.uncheckedconversions","^2E","^2?"]]],["^11","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2E","^2C","^2D","^2J","^2P","~$goog.html.SafeStyleSheet","^2L","~$goog.dom.TagName","^2B","^2F","^2@","~$goog.labs.userAgent.browser","^2<","^2=","^2?","~$goog.dom.tags","^2K"]]],["^11","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2="]]],["^11","shadow/grove/db.cljc"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^O","~$shadow.grove.db.ident"]]],["^11","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2<","^2@","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",[]]],["^11","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2<","^2="]]],["^11","shadow/grove/db/ident.cljc"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^O"]]],["^11","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","~$goog.dom.safe","^2Q","^2E","^2?"]]],["^11","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","~$goog.labs.userAgent","^2?"]]],["^11","shadow/grove/eql_query.cljc"],["b8a0dc13df75ac7867d81f2487e68ccce4839bd9","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^O","^M"]]],["^11","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@","^2O","^2J","^2P","^2R","^2L","^2B","^2E","^2?","^2C"]]],["^11","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P"]]],["^11","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","~$goog.math.Long","~$goog.math.Integer","^2Z","^2=","^2<","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2E","^2F","^2K","^2@"]]],["^11","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2E","^2P","^2F","^2=","^2@","^2?"]]],["^11","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2H"]]],["^11","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@","^2Z"]]],["^11","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^27",["^ ","^28",null,"^29",["^E",[]],"^2:",["^P","^2@","^2F"]]]]],"~:clj-info",["^ ","jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1667395541000,"jar:file:/home/jam/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1649406309000,"jar:file:/home/jam/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1667395541000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","minimal EQL query engine","^7","shadow/grove/eql_query.cljc","^8",1,"^9",5,"^:",1,"^;",27],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^H",["^ "],"^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^E",["^R"]],"~:shadow/js-access-global",["^E",["Error"]],"^S",null,"~:defs",["^ ","~$lazy-seq?",["^ ","~:protocol-inline",null,"^5",["^ ","^7","shadow/grove/eql_query.cljc","^8",29,"^9",7,"^:",29,"^;",16,"~:arglists",["^V",["~$quote",["^V",[["~$thing"]]]]]],"^F","^24","^7","shadow/grove/eql_query.cljc","^;",16,"~:method-params",["^V",[["^42"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^9",1,"~:variadic?",false,"^8",29,"~:ret-tag","~$boolean","^:",29,"~:max-fixed-arity",1,"~:fn-var",true,"^40",["^V",["^41",["^V",[["^42"]]]]]],"~$query",["^ ","^3[",null,"^5",["^ ","^7","shadow/grove/eql_query.cljc","^8",208,"^9",7,"^:",208,"^;",12,"^40",["^V",["^41",["^V",[["~$env","^N","~$query-data"],["^4<","^N","~$current","^4="]]]]],"~:top-fn",["^ ","^46",false,"~:fixed-arity",4,"^49",4,"^43",[["^4<","^N","^4="],["^4<","^N","^4>","^4="]],"^40",["^V",[["^4<","^N","^4="],["^4<","^N","^4>","^4="]]],"^45",["^V",[null,null]]]],"^F","^1N","^7","shadow/grove/eql_query.cljc","^;",12,"^4?",["^ ","^46",false,"^4@",4,"^49",4,"^43",[["^4<","^N","^4="],["^4<","^N","^4>","^4="]],"^40",["^V",[["^4<","^N","^4="],["^4<","^N","^4>","^4="]]],"^45",["^V",[null,null]]],"^43",[["^4<","^N","^4="],["^4<","^N","^4>","^4="]],"^44",null,"^4@",4,"^45",["^V",[null,null]],"^9",1,"^46",false,"~:methods",[["^ ","^4@",3,"^46",false,"~:tag","~$any"],["^ ","^4@",4,"^46",false,"^4B",["^E",[null,"~$clj","^4C","~$clj-nil"]]]],"^8",208,"^:",208,"^49",4,"^4:",true,"^40",["^V",[["^4<","^N","^4="],["^4<","^N","^4>","^4="]]]],"~$attr",["^ ","^F","^1B","^7","shadow/grove/eql_query.cljc","^8",40,"^9",1,"^:",40,"^;",15,"^5",["^ ","^7","shadow/grove/eql_query.cljc","^8",40,"^9",11,"^:",40,"^;",15],"^4B","^1="],"~$process-lookup",["^ ","^3[",null,"^5",["^ ","^7","shadow/grove/eql_query.cljc","^8",50,"^9",8,"^:",50,"^;",22,"~:private",true,"^40",["^V",["^41",["^V",[["^4<","^N","^4>","~$result","~$kw","~$params"]]]]]],"^4H",true,"^F","^1H","^7","shadow/grove/eql_query.cljc","^;",22,"^43",["^V",[["^4<","^N","^4>","^4I","^4J","^4K"]]],"^44",null,"^45",["^V",[null,null]],"^9",1,"^46",false,"^8",50,"^47",["^E",[null,"^4D","^4C"]],"^:",50,"^49",6,"^4:",true,"^40",["^V",["^41",["^V",[["^4<","^N","^4>","^4I","^4J","^4K"]]]]]],"~$process-query-part",["^ ","^3[",null,"^5",["^ ","^7","shadow/grove/eql_query.cljc","^8",71,"^9",8,"^:",71,"^;",26,"^4H",true,"^40",["^V",["^41",["^V",[["^4<","^N","^4>","^4I","~$query-part"]]]]]],"^4H",true,"^F","^1Z","^7","shadow/grove/eql_query.cljc","^;",26,"^43",["^V",[["^4<","^N","^4>","^4I","^4M"]]],"^44",null,"^45",["^V",[null,null]],"^9",1,"^46",false,"^8",71,"^47",["^E",[null,"^4D","^4C","^4E"]],"^:",71,"^49",5,"^4:",true,"^40",["^V",["^41",["^V",[["^4<","^N","^4>","^4I","^4M"]]]]]]],"^T",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^E",["~:shadow.grove.eql-query/not-found","~:else","~:default","~:join-val","~:part","~:shadow.grove.eql-query/default","~:shadow.grove.eql-query/missing","~:db/all","~:join-key","~:kw","~:db/undefined","~:result","~:db/loading","~:current","~:join-item","~:hierarchy","~:query-part"]],"~:order",["^4Q","^4T","^52","^4Y","^4[","^4P","^4X","^4Z","^4V","^53","^4U","^4O","^4W","^4R","^51","^50","^4S"]],"^Y",["^ ","^R",["^E",[]]],"^Z",["^ "],"^[",["^P","^O","^M"]],"^J","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^E",[]],"~:compiler-options",["^26",[["^57","~:static-fns"],true,["^57","~:shadow-tweaks"],null,["^57","~:source-map-inline"],null,["^57","~:elide-asserts"],false,["^57","~:optimize-constants"],null,["^57","^14"],null,["^57","~:external-config"],null,["^57","~:tooling-config"],null,["^57","~:emit-constants"],null,["^57","~:load-tests"],null,["^57","~:form-size-threshold"],null,["^57","~:global-goog-object&array"],null,["^57","~:data-readers"],null,["^57","~:infer-externs"],"~:auto",["^57","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^57","~:fn-invoke-direct"],null,["^57","~:source-map"],"/dev/null"]]]